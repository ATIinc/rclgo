/*
This file is part of rclgo

Copyright Â© 2021 Technology Innovation Institute, United Arab Emirates

Licensed under the Apache License, Version 2.0 (the "License");
	http://www.apache.org/licenses/LICENSE-2.0
*/

/*
THIS FILE IS AUTOGENERATED BY 'rclgo-gen generate'
*/

package turtlesim_srv
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/ros2/ros2types"
	"github.com/tiiuae/rclgo/pkg/ros2/ros2_type_dispatcher"
	rosidl_runtime_c "github.com/tiiuae/rclgo/pkg/ros2/rosidl_runtime_c"
	
)
/*
#cgo LDFLAGS: -L/opt/ros/foxy/lib -Wl,-rpath=/opt/ros/foxy/lib -lrcl -lrosidl_runtime_c -lrosidl_typesupport_c -lrcutils -lrmw_implementation
#cgo LDFLAGS: -lturtlesim__rosidl_typesupport_c -lturtlesim__rosidl_generator_c

#cgo CFLAGS: -I/opt/ros/foxy/include

#include <rosidl_runtime_c/message_type_support_struct.h>

#include <turtlesim/srv/kill.h>

*/
import "C"

func init() {
	ros2_type_dispatcher.RegisterROS2MsgTypeNameAlias("turtlesim/Kill_Request", &Kill_Request{})
}

// Do not create instances of this type directly. Always use NewKill_Request
// function instead.
type Kill_Request struct {
	Name rosidl_runtime_c.String `yaml:"name"`
}

// NewKill_Request creates a new Kill_Request with default values.
func NewKill_Request() *Kill_Request {
	self := Kill_Request{}
	self.SetDefaults(nil)
	return &self
}

func (t *Kill_Request) SetDefaults(d interface{}) ros2types.ROS2Msg {
	t.Name.SetDefaults("")
	
	return t
}

func (t *Kill_Request) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__turtlesim__srv__Kill_Request())
}
func (t *Kill_Request) PrepareMemory() unsafe.Pointer { //returns *C.turtlesim__srv__Kill_Request
	return (unsafe.Pointer)(C.turtlesim__srv__Kill_Request__create())
}
func (t *Kill_Request) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.turtlesim__srv__Kill_Request__destroy((*C.turtlesim__srv__Kill_Request)(pointer_to_free))
}
func (t *Kill_Request) AsCStruct() unsafe.Pointer {
	mem := (*C.turtlesim__srv__Kill_Request)(t.PrepareMemory())
	mem.name = *(*C.rosidl_runtime_c__String)(t.Name.AsCStruct())
	return unsafe.Pointer(mem)
}
func (t *Kill_Request) AsGoStruct(ros2_message_buffer unsafe.Pointer) {
	mem := (*C.turtlesim__srv__Kill_Request)(ros2_message_buffer)
	t.Name.AsGoStruct(unsafe.Pointer(&mem.name))
}
func (t *Kill_Request) Clone() ros2types.ROS2Msg {
	clone := *t
	return &clone
}

type CKill_Request = C.turtlesim__srv__Kill_Request
type CKill_Request__Sequence = C.turtlesim__srv__Kill_Request__Sequence

func Kill_Request__Sequence_to_Go(goSlice *[]Kill_Request, cSlice CKill_Request__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]Kill_Request, int64(cSlice.size))
	for i := 0; i < int(cSlice.size); i++ {
		cIdx := (*C.turtlesim__srv__Kill_Request__Sequence)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_turtlesim__srv__Kill_Request * uintptr(i)),
		))
		(*goSlice)[i] = Kill_Request{}
		(*goSlice)[i].AsGoStruct(unsafe.Pointer(cIdx))
	}
}
func Kill_Request__Sequence_to_C(cSlice *CKill_Request__Sequence, goSlice []Kill_Request) {
	if len(goSlice) == 0 {
		return
	}
	cSlice.data = (*C.turtlesim__srv__Kill_Request)(C.malloc((C.size_t)(C.sizeof_struct_turtlesim__srv__Kill_Request * uintptr(len(goSlice)))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity

	for i, v := range goSlice {
		cIdx := (*C.turtlesim__srv__Kill_Request)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_turtlesim__srv__Kill_Request * uintptr(i)),
		))
		*cIdx = *(*C.turtlesim__srv__Kill_Request)(v.AsCStruct())
	}
}
func Kill_Request__Array_to_Go(goSlice []Kill_Request, cSlice []CKill_Request) {
	for i := 0; i < len(cSlice); i++ {
		goSlice[i].AsGoStruct(unsafe.Pointer(&cSlice[i]))
	}
}
func Kill_Request__Array_to_C(cSlice []CKill_Request, goSlice []Kill_Request) {
	for i := 0; i < len(goSlice); i++ {
		cSlice[i] = *(*C.turtlesim__srv__Kill_Request)(goSlice[i].AsCStruct())
	}
}


