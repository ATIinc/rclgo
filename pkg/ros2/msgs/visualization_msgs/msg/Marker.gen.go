/*
This file is part of rclgo

Copyright Â© 2021 Technology Innovation Institute, United Arab Emirates

Licensed under the Apache License, Version 2.0 (the "License");
	http://www.apache.org/licenses/LICENSE-2.0
*/

/*
THIS FILE IS AUTOGENERATED BY 'rclgo-gen generate'
*/

package visualization_msgs_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/ros2/ros2types"
	"github.com/tiiuae/rclgo/pkg/ros2/ros2_type_dispatcher"
	builtin_interfaces_msg "github.com/tiiuae/rclgo/pkg/ros2/msgs/builtin_interfaces/msg"
	geometry_msgs_msg "github.com/tiiuae/rclgo/pkg/ros2/msgs/geometry_msgs/msg"
	std_msgs_msg "github.com/tiiuae/rclgo/pkg/ros2/msgs/std_msgs/msg"
	rosidl_runtime_c "github.com/tiiuae/rclgo/pkg/ros2/rosidl_runtime_c"
	
)
/*
#cgo LDFLAGS: -L/opt/ros/foxy/lib -Wl,-rpath=/opt/ros/foxy/lib -lrcl -lrosidl_runtime_c -lrosidl_typesupport_c -lrcutils -lrmw_implementation
#cgo LDFLAGS: -lvisualization_msgs__rosidl_typesupport_c -lvisualization_msgs__rosidl_generator_c
#cgo LDFLAGS: -lbuiltin_interfaces__rosidl_typesupport_c -lbuiltin_interfaces__rosidl_generator_c
#cgo LDFLAGS: -lgeometry_msgs__rosidl_typesupport_c -lgeometry_msgs__rosidl_generator_c
#cgo LDFLAGS: -lstd_msgs__rosidl_typesupport_c -lstd_msgs__rosidl_generator_c

#cgo CFLAGS: -I/opt/ros/foxy/include

#include <rosidl_runtime_c/message_type_support_struct.h>

#include <visualization_msgs/msg/marker.h>

*/
import "C"

func init() {
	ros2_type_dispatcher.RegisterROS2MsgTypeNameAlias("visualization_msgs/Marker", &Marker{})
}
const (
	Marker_ARROW int32 = 0
	Marker_CUBE int32 = 1
	Marker_SPHERE int32 = 2
	Marker_CYLINDER int32 = 3
	Marker_LINE_STRIP int32 = 4
	Marker_LINE_LIST int32 = 5
	Marker_CUBE_LIST int32 = 6
	Marker_SPHERE_LIST int32 = 7
	Marker_POINTS int32 = 8
	Marker_TEXT_VIEW_FACING int32 = 9
	Marker_MESH_RESOURCE int32 = 10
	Marker_TRIANGLE_LIST int32 = 11
	Marker_ADD int32 = 0
	Marker_MODIFY int32 = 0
	Marker_DELETE int32 = 2
	Marker_DELETEALL int32 = 3
)

// Do not create instances of this type directly. Always use NewMarker
// function instead.
type Marker struct {
	Header std_msgs_msg.Header `yaml:"header"`// Header for timestamp and frame id.
	Ns rosidl_runtime_c.String `yaml:"ns"`// Header for timestamp and frame id.Namespace in which to place the object.Used in conjunction with id to create a unique name for the object.
	Id int32 `yaml:"id"`// Header for timestamp and frame id.Namespace in which to place the object.Used in conjunction with id to create a unique name for the object.Object ID used in conjunction with the namespace for manipulating and deleting the object later.
	Type int32 `yaml:"type"`// Header for timestamp and frame id.Namespace in which to place the object.Used in conjunction with id to create a unique name for the object.Object ID used in conjunction with the namespace for manipulating and deleting the object later.Type of object.
	Action int32 `yaml:"action"`// Header for timestamp and frame id.Namespace in which to place the object.Used in conjunction with id to create a unique name for the object.Object ID used in conjunction with the namespace for manipulating and deleting the object later.Type of object.Action to take; one of:- 0 add/modify an object- 1 (deprecated)- 2 deletes an object- 3 deletes all objects
	Pose geometry_msgs_msg.Pose `yaml:"pose"`// Header for timestamp and frame id.Namespace in which to place the object.Used in conjunction with id to create a unique name for the object.Object ID used in conjunction with the namespace for manipulating and deleting the object later.Type of object.Action to take; one of:- 0 add/modify an object- 1 (deprecated)- 2 deletes an object- 3 deletes all objectsPose of the object with respect the frame_id specified in the header.
	Scale geometry_msgs_msg.Vector3 `yaml:"scale"`// Header for timestamp and frame id.Namespace in which to place the object.Used in conjunction with id to create a unique name for the object.Object ID used in conjunction with the namespace for manipulating and deleting the object later.Type of object.Action to take; one of:- 0 add/modify an object- 1 (deprecated)- 2 deletes an object- 3 deletes all objectsPose of the object with respect the frame_id specified in the header.Scale of the object; 1,1,1 means default (usually 1 meter square).
	Color std_msgs_msg.ColorRGBA `yaml:"color"`// Header for timestamp and frame id.Namespace in which to place the object.Used in conjunction with id to create a unique name for the object.Object ID used in conjunction with the namespace for manipulating and deleting the object later.Type of object.Action to take; one of:- 0 add/modify an object- 1 (deprecated)- 2 deletes an object- 3 deletes all objectsPose of the object with respect the frame_id specified in the header.Scale of the object; 1,1,1 means default (usually 1 meter square).Color of the object; in the range: [0.0-1.0]
	Lifetime builtin_interfaces_msg.Duration `yaml:"lifetime"`// Header for timestamp and frame id.Namespace in which to place the object.Used in conjunction with id to create a unique name for the object.Object ID used in conjunction with the namespace for manipulating and deleting the object later.Type of object.Action to take; one of:- 0 add/modify an object- 1 (deprecated)- 2 deletes an object- 3 deletes all objectsPose of the object with respect the frame_id specified in the header.Scale of the object; 1,1,1 means default (usually 1 meter square).Color of the object; in the range: [0.0-1.0]How long the object should last before being automatically deleted.0 indicates forever.
	FrameLocked bool `yaml:"frame_locked"`// Header for timestamp and frame id.Namespace in which to place the object.Used in conjunction with id to create a unique name for the object.Object ID used in conjunction with the namespace for manipulating and deleting the object later.Type of object.Action to take; one of:- 0 add/modify an object- 1 (deprecated)- 2 deletes an object- 3 deletes all objectsPose of the object with respect the frame_id specified in the header.Scale of the object; 1,1,1 means default (usually 1 meter square).Color of the object; in the range: [0.0-1.0]How long the object should last before being automatically deleted.0 indicates forever.If this marker should be frame-locked, i.e. retransformed into its frame every timestep.
	Points []geometry_msgs_msg.Point `yaml:"points"`// Only used if the type specified has some use for them (eg. POINTS, LINE_STRIP, etc.)
	Colors []std_msgs_msg.ColorRGBA `yaml:"colors"`// Only used if the type specified has some use for them (eg. POINTS, LINE_STRIP, etc.)Only used if the type specified has some use for them (eg. POINTS, LINE_STRIP, etc.)The number of colors provided must either be 0 or equal to the number of points provided.NOTE: alpha is not yet used
	Text rosidl_runtime_c.String `yaml:"text"`// Only used for text markers
	MeshResource rosidl_runtime_c.String `yaml:"mesh_resource"`// Only used for MESH_RESOURCE markers.
	MeshUseEmbeddedMaterials bool `yaml:"mesh_use_embedded_materials"`// Only used for MESH_RESOURCE markers.
}

// NewMarker creates a new Marker with default values.
func NewMarker() *Marker {
	self := Marker{}
	self.SetDefaults(nil)
	return &self
}

func (t *Marker) SetDefaults(d interface{}) ros2types.ROS2Msg {
	t.Header.SetDefaults(nil)
	t.Ns.SetDefaults("")
	t.Pose.SetDefaults(nil)
	t.Scale.SetDefaults(nil)
	t.Color.SetDefaults(nil)
	t.Lifetime.SetDefaults(nil)
	t.Text.SetDefaults("")
	t.MeshResource.SetDefaults("")
	
	return t
}

func (t *Marker) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__visualization_msgs__msg__Marker())
}
func (t *Marker) PrepareMemory() unsafe.Pointer { //returns *C.visualization_msgs__msg__Marker
	return (unsafe.Pointer)(C.visualization_msgs__msg__Marker__create())
}
func (t *Marker) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.visualization_msgs__msg__Marker__destroy((*C.visualization_msgs__msg__Marker)(pointer_to_free))
}
func (t *Marker) AsCStruct() unsafe.Pointer {
	mem := (*C.visualization_msgs__msg__Marker)(t.PrepareMemory())
	mem.header = *(*C.std_msgs__msg__Header)(t.Header.AsCStruct())
	mem.ns = *(*C.rosidl_runtime_c__String)(t.Ns.AsCStruct())
	mem.id = C.int32_t(t.Id)
	mem._type = C.int32_t(t.Type)
	mem.action = C.int32_t(t.Action)
	mem.pose = *(*C.geometry_msgs__msg__Pose)(t.Pose.AsCStruct())
	mem.scale = *(*C.geometry_msgs__msg__Vector3)(t.Scale.AsCStruct())
	mem.color = *(*C.std_msgs__msg__ColorRGBA)(t.Color.AsCStruct())
	mem.lifetime = *(*C.builtin_interfaces__msg__Duration)(t.Lifetime.AsCStruct())
	mem.frame_locked = C.bool(t.FrameLocked)
	geometry_msgs_msg.Point__Sequence_to_C((*geometry_msgs_msg.CPoint__Sequence)(unsafe.Pointer(&mem.points)), t.Points)
	std_msgs_msg.ColorRGBA__Sequence_to_C((*std_msgs_msg.CColorRGBA__Sequence)(unsafe.Pointer(&mem.colors)), t.Colors)
	mem.text = *(*C.rosidl_runtime_c__String)(t.Text.AsCStruct())
	mem.mesh_resource = *(*C.rosidl_runtime_c__String)(t.MeshResource.AsCStruct())
	mem.mesh_use_embedded_materials = C.bool(t.MeshUseEmbeddedMaterials)
	return unsafe.Pointer(mem)
}
func (t *Marker) AsGoStruct(ros2_message_buffer unsafe.Pointer) {
	mem := (*C.visualization_msgs__msg__Marker)(ros2_message_buffer)
	t.Header.AsGoStruct(unsafe.Pointer(&mem.header))
	t.Ns.AsGoStruct(unsafe.Pointer(&mem.ns))
	t.Id = int32(mem.id)
	t.Type = int32(mem._type)
	t.Action = int32(mem.action)
	t.Pose.AsGoStruct(unsafe.Pointer(&mem.pose))
	t.Scale.AsGoStruct(unsafe.Pointer(&mem.scale))
	t.Color.AsGoStruct(unsafe.Pointer(&mem.color))
	t.Lifetime.AsGoStruct(unsafe.Pointer(&mem.lifetime))
	t.FrameLocked = bool(mem.frame_locked)
	geometry_msgs_msg.Point__Sequence_to_Go(&t.Points, *(*geometry_msgs_msg.CPoint__Sequence)(unsafe.Pointer(&mem.points)))
	std_msgs_msg.ColorRGBA__Sequence_to_Go(&t.Colors, *(*std_msgs_msg.CColorRGBA__Sequence)(unsafe.Pointer(&mem.colors)))
	t.Text.AsGoStruct(unsafe.Pointer(&mem.text))
	t.MeshResource.AsGoStruct(unsafe.Pointer(&mem.mesh_resource))
	t.MeshUseEmbeddedMaterials = bool(mem.mesh_use_embedded_materials)
}
func (t *Marker) Clone() ros2types.ROS2Msg {
	clone := *t
	return &clone
}

type CMarker = C.visualization_msgs__msg__Marker
type CMarker__Sequence = C.visualization_msgs__msg__Marker__Sequence

func Marker__Sequence_to_Go(goSlice *[]Marker, cSlice CMarker__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]Marker, int64(cSlice.size))
	for i := 0; i < int(cSlice.size); i++ {
		cIdx := (*C.visualization_msgs__msg__Marker__Sequence)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_visualization_msgs__msg__Marker * uintptr(i)),
		))
		(*goSlice)[i] = Marker{}
		(*goSlice)[i].AsGoStruct(unsafe.Pointer(cIdx))
	}
}
func Marker__Sequence_to_C(cSlice *CMarker__Sequence, goSlice []Marker) {
	if len(goSlice) == 0 {
		return
	}
	cSlice.data = (*C.visualization_msgs__msg__Marker)(C.malloc((C.size_t)(C.sizeof_struct_visualization_msgs__msg__Marker * uintptr(len(goSlice)))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity

	for i, v := range goSlice {
		cIdx := (*C.visualization_msgs__msg__Marker)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_visualization_msgs__msg__Marker * uintptr(i)),
		))
		*cIdx = *(*C.visualization_msgs__msg__Marker)(v.AsCStruct())
	}
}
func Marker__Array_to_Go(goSlice []Marker, cSlice []CMarker) {
	for i := 0; i < len(cSlice); i++ {
		goSlice[i].AsGoStruct(unsafe.Pointer(&cSlice[i]))
	}
}
func Marker__Array_to_C(cSlice []CMarker, goSlice []Marker) {
	for i := 0; i < len(goSlice); i++ {
		cSlice[i] = *(*C.visualization_msgs__msg__Marker)(goSlice[i].AsCStruct())
	}
}


