/*
This file is part of rclgo

Copyright Â© 2021 Technology Innovation Institute, United Arab Emirates

Licensed under the Apache License, Version 2.0 (the "License");
	http://www.apache.org/licenses/LICENSE-2.0
*/

/*
THIS FILE IS AUTOGENERATED BY 'rclgo-gen generate'
*/

package visualization_msgs
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/ros2/ros2types"
	"github.com/tiiuae/rclgo/pkg/ros2/ros2_type_dispatcher"
	builtin_interfaces "github.com/tiiuae/rclgo/pkg/ros2/msgs/builtin_interfaces/msg"
	geometry_msgs "github.com/tiiuae/rclgo/pkg/ros2/msgs/geometry_msgs/msg"
	std_msgs "github.com/tiiuae/rclgo/pkg/ros2/msgs/std_msgs/msg"
	rosidl_runtime_c "github.com/tiiuae/rclgo/pkg/ros2/rosidl_runtime_c"
	
)
/*
#cgo LDFLAGS: -L/opt/ros/foxy/lib -Wl,-rpath=/opt/ros/foxy/lib -lrcl -lrosidl_runtime_c -lrosidl_typesupport_c -lrcutils -lrmw_implementation
#cgo LDFLAGS: -lvisualization_msgs__rosidl_typesupport_c -lvisualization_msgs__rosidl_generator_c
#cgo LDFLAGS: -lbuiltin_interfaces__rosidl_typesupport_c -lbuiltin_interfaces__rosidl_generator_c
#cgo LDFLAGS: -lgeometry_msgs__rosidl_typesupport_c -lgeometry_msgs__rosidl_generator_c
#cgo LDFLAGS: -lstd_msgs__rosidl_typesupport_c -lstd_msgs__rosidl_generator_c

#cgo CFLAGS: -I/opt/ros/foxy/include

#include <rosidl_runtime_c/message_type_support_struct.h>
#include <visualization_msgs/msg/image_marker.h>
*/
import "C"

func init() {
	ros2_type_dispatcher.RegisterROS2MsgTypeNameAlias("visualization_msgs/ImageMarker", &ImageMarker{})
}
const (
	ImageMarker_CIRCLE int32 = 0
	ImageMarker_LINE_STRIP int32 = 1
	ImageMarker_LINE_LIST int32 = 2
	ImageMarker_POLYGON int32 = 3
	ImageMarker_POINTS int32 = 4
	ImageMarker_ADD int32 = 0
	ImageMarker_REMOVE int32 = 1
)

// Do not create instances of this type directly. Always use NewImageMarker
// function instead.
type ImageMarker struct {
	Header std_msgs.Header `yaml:"header"`
	Ns rosidl_runtime_c.String `yaml:"ns"`// Namespace which is used with the id to form a unique id.
	Id int32 `yaml:"id"`// Namespace which is used with the id to form a unique id.Unique id within the namespace.
	Type int32 `yaml:"type"`// Namespace which is used with the id to form a unique id.Unique id within the namespace.One of the above types, e.g. CIRCLE, LINE_STRIP, etc.
	Action int32 `yaml:"action"`// Namespace which is used with the id to form a unique id.Unique id within the namespace.One of the above types, e.g. CIRCLE, LINE_STRIP, etc.Either ADD or REMOVE.
	Position geometry_msgs.Point `yaml:"position"`// Namespace which is used with the id to form a unique id.Unique id within the namespace.One of the above types, e.g. CIRCLE, LINE_STRIP, etc.Either ADD or REMOVE.Two-dimensional coordinate position, in pixel-coordinates.
	Scale float32 `yaml:"scale"`// Namespace which is used with the id to form a unique id.Unique id within the namespace.One of the above types, e.g. CIRCLE, LINE_STRIP, etc.Either ADD or REMOVE.Two-dimensional coordinate position, in pixel-coordinates.The scale of the object, e.g. the diameter for a CIRCLE.
	OutlineColor std_msgs.ColorRGBA `yaml:"outline_color"`// Namespace which is used with the id to form a unique id.Unique id within the namespace.One of the above types, e.g. CIRCLE, LINE_STRIP, etc.Either ADD or REMOVE.Two-dimensional coordinate position, in pixel-coordinates.The scale of the object, e.g. the diameter for a CIRCLE.The outline color of the marker.
	Filled uint8 `yaml:"filled"`// Namespace which is used with the id to form a unique id.Unique id within the namespace.One of the above types, e.g. CIRCLE, LINE_STRIP, etc.Either ADD or REMOVE.Two-dimensional coordinate position, in pixel-coordinates.The scale of the object, e.g. the diameter for a CIRCLE.The outline color of the marker.Whether or not to fill in the shape with color.
	FillColor std_msgs.ColorRGBA `yaml:"fill_color"`// Namespace which is used with the id to form a unique id.Unique id within the namespace.One of the above types, e.g. CIRCLE, LINE_STRIP, etc.Either ADD or REMOVE.Two-dimensional coordinate position, in pixel-coordinates.The scale of the object, e.g. the diameter for a CIRCLE.The outline color of the marker.Whether or not to fill in the shape with color.Fill color; in the range: [0.0-1.0]
	Lifetime builtin_interfaces.Duration `yaml:"lifetime"`// Namespace which is used with the id to form a unique id.Unique id within the namespace.One of the above types, e.g. CIRCLE, LINE_STRIP, etc.Either ADD or REMOVE.Two-dimensional coordinate position, in pixel-coordinates.The scale of the object, e.g. the diameter for a CIRCLE.The outline color of the marker.Whether or not to fill in the shape with color.Fill color; in the range: [0.0-1.0]How long the object should last before being automatically deleted.0 indicates forever.
	Points []geometry_msgs.Point `yaml:"points"`// Coordinates in 2D in pixel coords. Used for LINE_STRIP, LINE_LIST, POINTS, etc.
	OutlineColors []std_msgs.ColorRGBA `yaml:"outline_colors"`// Coordinates in 2D in pixel coords. Used for LINE_STRIP, LINE_LIST, POINTS, etc.The color for each line, point, etc. in the points field.
}

// NewImageMarker creates a new ImageMarker with default values.
func NewImageMarker() *ImageMarker {
	self := ImageMarker{}
	self.SetDefaults(nil)
	return &self
}

func (t *ImageMarker) SetDefaults(d interface{}) ros2types.ROS2Msg {
	t.Header.SetDefaults(nil)
	t.Ns.SetDefaults("")
	t.Position.SetDefaults(nil)
	t.OutlineColor.SetDefaults(nil)
	t.FillColor.SetDefaults(nil)
	t.Lifetime.SetDefaults(nil)
	
	return t
}

func (t *ImageMarker) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__visualization_msgs__msg__ImageMarker())
}
func (t *ImageMarker) PrepareMemory() unsafe.Pointer { //returns *C.visualization_msgs__msg__ImageMarker
	return (unsafe.Pointer)(C.visualization_msgs__msg__ImageMarker__create())
}
func (t *ImageMarker) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.visualization_msgs__msg__ImageMarker__destroy((*C.visualization_msgs__msg__ImageMarker)(pointer_to_free))
}
func (t *ImageMarker) AsCStruct() unsafe.Pointer {
	mem := (*C.visualization_msgs__msg__ImageMarker)(t.PrepareMemory())
	mem.header = *(*C.std_msgs__msg__Header)(t.Header.AsCStruct())
	mem.ns = *(*C.rosidl_runtime_c__String)(t.Ns.AsCStruct())
	mem.id = C.int32_t(t.Id)
	mem._type = C.int32_t(t.Type)
	mem.action = C.int32_t(t.Action)
	mem.position = *(*C.geometry_msgs__msg__Point)(t.Position.AsCStruct())
	mem.scale = C.float(t.Scale)
	mem.outline_color = *(*C.std_msgs__msg__ColorRGBA)(t.OutlineColor.AsCStruct())
	mem.filled = C.uint8_t(t.Filled)
	mem.fill_color = *(*C.std_msgs__msg__ColorRGBA)(t.FillColor.AsCStruct())
	mem.lifetime = *(*C.builtin_interfaces__msg__Duration)(t.Lifetime.AsCStruct())
	geometry_msgs.Point__Sequence_to_C((*geometry_msgs.CPoint__Sequence)(unsafe.Pointer(&mem.points)), t.Points)
	std_msgs.ColorRGBA__Sequence_to_C((*std_msgs.CColorRGBA__Sequence)(unsafe.Pointer(&mem.outline_colors)), t.OutlineColors)
	return unsafe.Pointer(mem)
}
func (t *ImageMarker) AsGoStruct(ros2_message_buffer unsafe.Pointer) {
	mem := (*C.visualization_msgs__msg__ImageMarker)(ros2_message_buffer)
	t.Header.AsGoStruct(unsafe.Pointer(&mem.header))
	t.Ns.AsGoStruct(unsafe.Pointer(&mem.ns))
	t.Id = int32(mem.id)
	t.Type = int32(mem._type)
	t.Action = int32(mem.action)
	t.Position.AsGoStruct(unsafe.Pointer(&mem.position))
	t.Scale = float32(mem.scale)
	t.OutlineColor.AsGoStruct(unsafe.Pointer(&mem.outline_color))
	t.Filled = uint8(mem.filled)
	t.FillColor.AsGoStruct(unsafe.Pointer(&mem.fill_color))
	t.Lifetime.AsGoStruct(unsafe.Pointer(&mem.lifetime))
	geometry_msgs.Point__Sequence_to_Go(&t.Points, *(*geometry_msgs.CPoint__Sequence)(unsafe.Pointer(&mem.points)))
	std_msgs.ColorRGBA__Sequence_to_Go(&t.OutlineColors, *(*std_msgs.CColorRGBA__Sequence)(unsafe.Pointer(&mem.outline_colors)))
}
func (t *ImageMarker) Clone() ros2types.ROS2Msg {
	clone := *t
	return &clone
}

type CImageMarker = C.visualization_msgs__msg__ImageMarker
type CImageMarker__Sequence = C.visualization_msgs__msg__ImageMarker__Sequence

func ImageMarker__Sequence_to_Go(goSlice *[]ImageMarker, cSlice CImageMarker__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]ImageMarker, int64(cSlice.size))
	for i := 0; i < int(cSlice.size); i++ {
		cIdx := (*C.visualization_msgs__msg__ImageMarker__Sequence)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_visualization_msgs__msg__ImageMarker * uintptr(i)),
		))
		(*goSlice)[i] = ImageMarker{}
		(*goSlice)[i].AsGoStruct(unsafe.Pointer(cIdx))
	}
}
func ImageMarker__Sequence_to_C(cSlice *CImageMarker__Sequence, goSlice []ImageMarker) {
	if len(goSlice) == 0 {
		return
	}
	cSlice.data = (*C.visualization_msgs__msg__ImageMarker)(C.malloc((C.size_t)(C.sizeof_struct_visualization_msgs__msg__ImageMarker * uintptr(len(goSlice)))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity

	for i, v := range goSlice {
		cIdx := (*C.visualization_msgs__msg__ImageMarker)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_visualization_msgs__msg__ImageMarker * uintptr(i)),
		))
		*cIdx = *(*C.visualization_msgs__msg__ImageMarker)(v.AsCStruct())
	}
}
func ImageMarker__Array_to_Go(goSlice []ImageMarker, cSlice []CImageMarker) {
	for i := 0; i < len(cSlice); i++ {
		goSlice[i].AsGoStruct(unsafe.Pointer(&cSlice[i]))
	}
}
func ImageMarker__Array_to_C(cSlice []CImageMarker, goSlice []ImageMarker) {
	for i := 0; i < len(goSlice); i++ {
		cSlice[i] = *(*C.visualization_msgs__msg__ImageMarker)(goSlice[i].AsCStruct())
	}
}


