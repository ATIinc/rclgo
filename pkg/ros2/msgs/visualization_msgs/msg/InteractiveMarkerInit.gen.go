/*
This file is part of rclgo

Copyright Â© 2021 Technology Innovation Institute, United Arab Emirates

Licensed under the Apache License, Version 2.0 (the "License");
	http://www.apache.org/licenses/LICENSE-2.0
*/

/*
THIS FILE IS AUTOGENERATED BY 'rclgo-gen generate'
*/

package visualization_msgs
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/ros2/ros2types"
	"github.com/tiiuae/rclgo/pkg/ros2/ros2_type_dispatcher"
	rosidl_runtime_c "github.com/tiiuae/rclgo/pkg/ros2/rosidl_runtime_c"
	
)
/*
#cgo LDFLAGS: -L/opt/ros/foxy/lib -Wl,-rpath=/opt/ros/foxy/lib -lrcl -lrosidl_runtime_c -lrosidl_typesupport_c -lrcutils -lrmw_implementation
#cgo LDFLAGS: -lvisualization_msgs__rosidl_typesupport_c -lvisualization_msgs__rosidl_generator_c

#cgo CFLAGS: -I/opt/ros/foxy/include

#include <rosidl_runtime_c/message_type_support_struct.h>
#include <visualization_msgs/msg/interactive_marker_init.h>
*/
import "C"

func init() {
	ros2_type_dispatcher.RegisterROS2MsgTypeNameAlias("visualization_msgs/InteractiveMarkerInit", &InteractiveMarkerInit{})
}

// Do not create instances of this type directly. Always use NewInteractiveMarkerInit
// function instead.
type InteractiveMarkerInit struct {
	ServerId rosidl_runtime_c.String `yaml:"server_id"`// Identifying string. Must be unique in the topic namespacethat this server works on.
	SeqNum uint64 `yaml:"seq_num"`// Sequence number.The client will use this to detect if it has missed a subsequentupdate.  Every update message will have the same sequence number asan init message.  Clients will likely want to unsubscribe from theinit topic after a successful initialization to avoid receivingduplicate data.
	Markers []InteractiveMarker `yaml:"markers"`// All markers.
}

// NewInteractiveMarkerInit creates a new InteractiveMarkerInit with default values.
func NewInteractiveMarkerInit() *InteractiveMarkerInit {
	self := InteractiveMarkerInit{}
	self.SetDefaults(nil)
	return &self
}

func (t *InteractiveMarkerInit) SetDefaults(d interface{}) ros2types.ROS2Msg {
	t.ServerId.SetDefaults("")
	
	return t
}

func (t *InteractiveMarkerInit) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__visualization_msgs__msg__InteractiveMarkerInit())
}
func (t *InteractiveMarkerInit) PrepareMemory() unsafe.Pointer { //returns *C.visualization_msgs__msg__InteractiveMarkerInit
	return (unsafe.Pointer)(C.visualization_msgs__msg__InteractiveMarkerInit__create())
}
func (t *InteractiveMarkerInit) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.visualization_msgs__msg__InteractiveMarkerInit__destroy((*C.visualization_msgs__msg__InteractiveMarkerInit)(pointer_to_free))
}
func (t *InteractiveMarkerInit) AsCStruct() unsafe.Pointer {
	mem := (*C.visualization_msgs__msg__InteractiveMarkerInit)(t.PrepareMemory())
	mem.server_id = *(*C.rosidl_runtime_c__String)(t.ServerId.AsCStruct())
	mem.seq_num = C.uint64_t(t.SeqNum)
	InteractiveMarker__Sequence_to_C(&mem.markers, t.Markers)
	return unsafe.Pointer(mem)
}
func (t *InteractiveMarkerInit) AsGoStruct(ros2_message_buffer unsafe.Pointer) {
	mem := (*C.visualization_msgs__msg__InteractiveMarkerInit)(ros2_message_buffer)
	t.ServerId.AsGoStruct(unsafe.Pointer(&mem.server_id))
	t.SeqNum = uint64(mem.seq_num)
	InteractiveMarker__Sequence_to_Go(&t.Markers, mem.markers)
}
func (t *InteractiveMarkerInit) Clone() ros2types.ROS2Msg {
	clone := *t
	return &clone
}

type CInteractiveMarkerInit = C.visualization_msgs__msg__InteractiveMarkerInit
type CInteractiveMarkerInit__Sequence = C.visualization_msgs__msg__InteractiveMarkerInit__Sequence

func InteractiveMarkerInit__Sequence_to_Go(goSlice *[]InteractiveMarkerInit, cSlice CInteractiveMarkerInit__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]InteractiveMarkerInit, int64(cSlice.size))
	for i := 0; i < int(cSlice.size); i++ {
		cIdx := (*C.visualization_msgs__msg__InteractiveMarkerInit__Sequence)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_visualization_msgs__msg__InteractiveMarkerInit * uintptr(i)),
		))
		(*goSlice)[i] = InteractiveMarkerInit{}
		(*goSlice)[i].AsGoStruct(unsafe.Pointer(cIdx))
	}
}
func InteractiveMarkerInit__Sequence_to_C(cSlice *CInteractiveMarkerInit__Sequence, goSlice []InteractiveMarkerInit) {
	if len(goSlice) == 0 {
		return
	}
	cSlice.data = (*C.visualization_msgs__msg__InteractiveMarkerInit)(C.malloc((C.size_t)(C.sizeof_struct_visualization_msgs__msg__InteractiveMarkerInit * uintptr(len(goSlice)))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity

	for i, v := range goSlice {
		cIdx := (*C.visualization_msgs__msg__InteractiveMarkerInit)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_visualization_msgs__msg__InteractiveMarkerInit * uintptr(i)),
		))
		*cIdx = *(*C.visualization_msgs__msg__InteractiveMarkerInit)(v.AsCStruct())
	}
}
func InteractiveMarkerInit__Array_to_Go(goSlice []InteractiveMarkerInit, cSlice []CInteractiveMarkerInit) {
	for i := 0; i < len(cSlice); i++ {
		goSlice[i].AsGoStruct(unsafe.Pointer(&cSlice[i]))
	}
}
func InteractiveMarkerInit__Array_to_C(cSlice []CInteractiveMarkerInit, goSlice []InteractiveMarkerInit) {
	for i := 0; i < len(goSlice); i++ {
		cSlice[i] = *(*C.visualization_msgs__msg__InteractiveMarkerInit)(goSlice[i].AsCStruct())
	}
}


