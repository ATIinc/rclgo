/*
This file is part of rclgo

Copyright Â© 2021 Technology Innovation Institute, United Arab Emirates

Licensed under the Apache License, Version 2.0 (the "License");
	http://www.apache.org/licenses/LICENSE-2.0
*/

/*
THIS FILE IS AUTOGENERATED BY 'rclgo-gen generate'
*/

package rmw_dds_common_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/ros2/ros2types"
	"github.com/tiiuae/rclgo/pkg/ros2/ros2_type_dispatcher"
	rosidl_runtime_c "github.com/tiiuae/rclgo/pkg/ros2/rosidl_runtime_c"
	
)
/*
#cgo LDFLAGS: -L/opt/ros/foxy/lib -Wl,-rpath=/opt/ros/foxy/lib -lrcl -lrosidl_runtime_c -lrosidl_typesupport_c -lrcutils -lrmw_implementation
#cgo LDFLAGS: -lrmw_dds_common__rosidl_typesupport_c -lrmw_dds_common__rosidl_generator_c

#cgo CFLAGS: -I/opt/ros/foxy/include

#include <rosidl_runtime_c/message_type_support_struct.h>

#include <rmw_dds_common/msg/gid.h>

*/
import "C"

func init() {
	ros2_type_dispatcher.RegisterROS2MsgTypeNameAlias("rmw_dds_common/Gid", &Gid{})
}

// Do not create instances of this type directly. Always use NewGid
// function instead.
type Gid struct {
	Data [24]byte `yaml:"data"`
}

// NewGid creates a new Gid with default values.
func NewGid() *Gid {
	self := Gid{}
	self.SetDefaults(nil)
	return &self
}

func (t *Gid) SetDefaults(d interface{}) ros2types.ROS2Msg {
	
	return t
}

func (t *Gid) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__rmw_dds_common__msg__Gid())
}
func (t *Gid) PrepareMemory() unsafe.Pointer { //returns *C.rmw_dds_common__msg__Gid
	return (unsafe.Pointer)(C.rmw_dds_common__msg__Gid__create())
}
func (t *Gid) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.rmw_dds_common__msg__Gid__destroy((*C.rmw_dds_common__msg__Gid)(pointer_to_free))
}
func (t *Gid) AsCStruct() unsafe.Pointer {
	mem := (*C.rmw_dds_common__msg__Gid)(t.PrepareMemory())
	cSlice_data := mem.data[:]
	rosidl_runtime_c.Char__Array_to_C(*(*[]rosidl_runtime_c.CChar)(unsafe.Pointer(&cSlice_data)), t.Data[:])
	return unsafe.Pointer(mem)
}
func (t *Gid) AsGoStruct(ros2_message_buffer unsafe.Pointer) {
	mem := (*C.rmw_dds_common__msg__Gid)(ros2_message_buffer)
	cSlice_data := mem.data[:]
	rosidl_runtime_c.Char__Array_to_Go(t.Data[:], *(*[]rosidl_runtime_c.CChar)(unsafe.Pointer(&cSlice_data)))
}
func (t *Gid) Clone() ros2types.ROS2Msg {
	clone := *t
	return &clone
}

type CGid = C.rmw_dds_common__msg__Gid
type CGid__Sequence = C.rmw_dds_common__msg__Gid__Sequence

func Gid__Sequence_to_Go(goSlice *[]Gid, cSlice CGid__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]Gid, int64(cSlice.size))
	for i := 0; i < int(cSlice.size); i++ {
		cIdx := (*C.rmw_dds_common__msg__Gid__Sequence)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_rmw_dds_common__msg__Gid * uintptr(i)),
		))
		(*goSlice)[i] = Gid{}
		(*goSlice)[i].AsGoStruct(unsafe.Pointer(cIdx))
	}
}
func Gid__Sequence_to_C(cSlice *CGid__Sequence, goSlice []Gid) {
	if len(goSlice) == 0 {
		return
	}
	cSlice.data = (*C.rmw_dds_common__msg__Gid)(C.malloc((C.size_t)(C.sizeof_struct_rmw_dds_common__msg__Gid * uintptr(len(goSlice)))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity

	for i, v := range goSlice {
		cIdx := (*C.rmw_dds_common__msg__Gid)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_rmw_dds_common__msg__Gid * uintptr(i)),
		))
		*cIdx = *(*C.rmw_dds_common__msg__Gid)(v.AsCStruct())
	}
}
func Gid__Array_to_Go(goSlice []Gid, cSlice []CGid) {
	for i := 0; i < len(cSlice); i++ {
		goSlice[i].AsGoStruct(unsafe.Pointer(&cSlice[i]))
	}
}
func Gid__Array_to_C(cSlice []CGid, goSlice []Gid) {
	for i := 0; i < len(goSlice); i++ {
		cSlice[i] = *(*C.rmw_dds_common__msg__Gid)(goSlice[i].AsCStruct())
	}
}


