/*
This file is part of rclgo

Copyright Â© 2021 Technology Innovation Institute, United Arab Emirates

Licensed under the Apache License, Version 2.0 (the "License");
	http://www.apache.org/licenses/LICENSE-2.0
*/

/*
THIS FILE IS AUTOGENERATED BY 'rclgo-gen generate'
*/

package stereo_msgs
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/ros2/ros2types"
	"github.com/tiiuae/rclgo/pkg/ros2/ros2_type_dispatcher"
	sensor_msgs "github.com/tiiuae/rclgo/pkg/ros2/msgs/sensor_msgs/msg"
	std_msgs "github.com/tiiuae/rclgo/pkg/ros2/msgs/std_msgs/msg"
	
)
/*
#cgo LDFLAGS: -L/opt/ros/foxy/lib -Wl,-rpath=/opt/ros/foxy/lib -lrcl -lrosidl_runtime_c -lrosidl_typesupport_c -lrcutils -lrmw_implementation
#cgo LDFLAGS: -lstereo_msgs__rosidl_typesupport_c -lstereo_msgs__rosidl_generator_c
#cgo LDFLAGS: -lsensor_msgs__rosidl_typesupport_c -lsensor_msgs__rosidl_generator_c
#cgo LDFLAGS: -lstd_msgs__rosidl_typesupport_c -lstd_msgs__rosidl_generator_c

#cgo CFLAGS: -I/opt/ros/foxy/include

#include <rosidl_runtime_c/message_type_support_struct.h>
#include <stereo_msgs/msg/disparity_image.h>
*/
import "C"

func init() {
	ros2_type_dispatcher.RegisterROS2MsgTypeNameAlias("stereo_msgs/DisparityImage", &DisparityImage{})
}

// Do not create instances of this type directly. Always use NewDisparityImage
// function instead.
type DisparityImage struct {
	Header std_msgs.Header `yaml:"header"`// Separate header for compatibility with current TimeSynchronizer.Likely to be removed in a later release, use image.header instead.
	Image sensor_msgs.Image `yaml:"image"`// Floating point disparity image. The disparities are pre-adjusted for anyx-offset between the principal points of the two cameras (in the casethat they are verged). That is: d = x_l - x_r - (cx_l - cx_r)
	F float32 `yaml:"f"`// Focal length, pixels. Stereo geometry. For disparity d, the depth from the camera is Z = fT/d.
	T float32 `yaml:"t"`// Baseline, world units. Stereo geometry. For disparity d, the depth from the camera is Z = fT/d.
	ValidWindow sensor_msgs.RegionOfInterest `yaml:"valid_window"`// Subwindow of (potentially) valid disparity values.
	MinDisparity float32 `yaml:"min_disparity"`// The range of disparities searched.In the disparity image, any disparity less than min_disparity is invalid.The disparity search range defines the horopter, or 3D volume that thestereo algorithm can "see". Points with Z outside of:Z_min = fT / max_disparityZ_max = fT / min_disparitycould not be found.
	MaxDisparity float32 `yaml:"max_disparity"`// The range of disparities searched.In the disparity image, any disparity less than min_disparity is invalid.The disparity search range defines the horopter, or 3D volume that thestereo algorithm can "see". Points with Z outside of:Z_min = fT / max_disparityZ_max = fT / min_disparitycould not be found.
	DeltaD float32 `yaml:"delta_d"`// Smallest allowed disparity increment. The smallest achievable depth rangeresolution is delta_Z = (Z^2/fT)*delta_d.
}

// NewDisparityImage creates a new DisparityImage with default values.
func NewDisparityImage() *DisparityImage {
	self := DisparityImage{}
	self.SetDefaults(nil)
	return &self
}

func (t *DisparityImage) SetDefaults(d interface{}) ros2types.ROS2Msg {
	t.Header.SetDefaults(nil)
	t.Image.SetDefaults(nil)
	t.ValidWindow.SetDefaults(nil)
	
	return t
}

func (t *DisparityImage) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__stereo_msgs__msg__DisparityImage())
}
func (t *DisparityImage) PrepareMemory() unsafe.Pointer { //returns *C.stereo_msgs__msg__DisparityImage
	return (unsafe.Pointer)(C.stereo_msgs__msg__DisparityImage__create())
}
func (t *DisparityImage) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.stereo_msgs__msg__DisparityImage__destroy((*C.stereo_msgs__msg__DisparityImage)(pointer_to_free))
}
func (t *DisparityImage) AsCStruct() unsafe.Pointer {
	mem := (*C.stereo_msgs__msg__DisparityImage)(t.PrepareMemory())
	mem.header = *(*C.std_msgs__msg__Header)(t.Header.AsCStruct())
	mem.image = *(*C.sensor_msgs__msg__Image)(t.Image.AsCStruct())
	mem.f = C.float(t.F)
	mem.t = C.float(t.T)
	mem.valid_window = *(*C.sensor_msgs__msg__RegionOfInterest)(t.ValidWindow.AsCStruct())
	mem.min_disparity = C.float(t.MinDisparity)
	mem.max_disparity = C.float(t.MaxDisparity)
	mem.delta_d = C.float(t.DeltaD)
	return unsafe.Pointer(mem)
}
func (t *DisparityImage) AsGoStruct(ros2_message_buffer unsafe.Pointer) {
	mem := (*C.stereo_msgs__msg__DisparityImage)(ros2_message_buffer)
	t.Header.AsGoStruct(unsafe.Pointer(&mem.header))
	t.Image.AsGoStruct(unsafe.Pointer(&mem.image))
	t.F = float32(mem.f)
	t.T = float32(mem.t)
	t.ValidWindow.AsGoStruct(unsafe.Pointer(&mem.valid_window))
	t.MinDisparity = float32(mem.min_disparity)
	t.MaxDisparity = float32(mem.max_disparity)
	t.DeltaD = float32(mem.delta_d)
}
func (t *DisparityImage) Clone() ros2types.ROS2Msg {
	clone := *t
	return &clone
}

type CDisparityImage = C.stereo_msgs__msg__DisparityImage
type CDisparityImage__Sequence = C.stereo_msgs__msg__DisparityImage__Sequence

func DisparityImage__Sequence_to_Go(goSlice *[]DisparityImage, cSlice CDisparityImage__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]DisparityImage, int64(cSlice.size))
	for i := 0; i < int(cSlice.size); i++ {
		cIdx := (*C.stereo_msgs__msg__DisparityImage__Sequence)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_stereo_msgs__msg__DisparityImage * uintptr(i)),
		))
		(*goSlice)[i] = DisparityImage{}
		(*goSlice)[i].AsGoStruct(unsafe.Pointer(cIdx))
	}
}
func DisparityImage__Sequence_to_C(cSlice *CDisparityImage__Sequence, goSlice []DisparityImage) {
	if len(goSlice) == 0 {
		return
	}
	cSlice.data = (*C.stereo_msgs__msg__DisparityImage)(C.malloc((C.size_t)(C.sizeof_struct_stereo_msgs__msg__DisparityImage * uintptr(len(goSlice)))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity

	for i, v := range goSlice {
		cIdx := (*C.stereo_msgs__msg__DisparityImage)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_stereo_msgs__msg__DisparityImage * uintptr(i)),
		))
		*cIdx = *(*C.stereo_msgs__msg__DisparityImage)(v.AsCStruct())
	}
}
func DisparityImage__Array_to_Go(goSlice []DisparityImage, cSlice []CDisparityImage) {
	for i := 0; i < len(cSlice); i++ {
		goSlice[i].AsGoStruct(unsafe.Pointer(&cSlice[i]))
	}
}
func DisparityImage__Array_to_C(cSlice []CDisparityImage, goSlice []DisparityImage) {
	for i := 0; i < len(goSlice); i++ {
		cSlice[i] = *(*C.stereo_msgs__msg__DisparityImage)(goSlice[i].AsCStruct())
	}
}


