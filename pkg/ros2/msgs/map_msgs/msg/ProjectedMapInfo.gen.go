/*
This file is part of rclgo

Copyright Â© 2021 Technology Innovation Institute, United Arab Emirates

Licensed under the Apache License, Version 2.0 (the "License");
	http://www.apache.org/licenses/LICENSE-2.0
*/

/*
THIS FILE IS AUTOGENERATED BY 'rclgo-gen generate'
*/

package map_msgs
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/ros2/ros2types"
	"github.com/tiiuae/rclgo/pkg/ros2/ros2_type_dispatcher"
	rosidl_runtime_c "github.com/tiiuae/rclgo/pkg/ros2/rosidl_runtime_c"
	
)
/*
#cgo LDFLAGS: -L/opt/ros/foxy/lib -Wl,-rpath=/opt/ros/foxy/lib -lrcl -lrosidl_runtime_c -lrosidl_typesupport_c -lrcutils -lrmw_implementation
#cgo LDFLAGS: -lmap_msgs__rosidl_typesupport_c -lmap_msgs__rosidl_generator_c

#cgo CFLAGS: -I/opt/ros/foxy/include

#include <rosidl_runtime_c/message_type_support_struct.h>
#include <map_msgs/msg/projected_map_info.h>
*/
import "C"

func init() {
	ros2_type_dispatcher.RegisterROS2MsgTypeNameAlias("map_msgs/ProjectedMapInfo", &ProjectedMapInfo{})
}

// Do not create instances of this type directly. Always use NewProjectedMapInfo
// function instead.
type ProjectedMapInfo struct {
	FrameId rosidl_runtime_c.String `yaml:"frame_id"`
	X float64 `yaml:"x"`
	Y float64 `yaml:"y"`
	Width float64 `yaml:"width"`
	Height float64 `yaml:"height"`
	MinZ float64 `yaml:"min_z"`
	MaxZ float64 `yaml:"max_z"`
}

// NewProjectedMapInfo creates a new ProjectedMapInfo with default values.
func NewProjectedMapInfo() *ProjectedMapInfo {
	self := ProjectedMapInfo{}
	self.SetDefaults(nil)
	return &self
}

func (t *ProjectedMapInfo) SetDefaults(d interface{}) ros2types.ROS2Msg {
	t.FrameId.SetDefaults("")
	
	return t
}

func (t *ProjectedMapInfo) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__map_msgs__msg__ProjectedMapInfo())
}
func (t *ProjectedMapInfo) PrepareMemory() unsafe.Pointer { //returns *C.map_msgs__msg__ProjectedMapInfo
	return (unsafe.Pointer)(C.map_msgs__msg__ProjectedMapInfo__create())
}
func (t *ProjectedMapInfo) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.map_msgs__msg__ProjectedMapInfo__destroy((*C.map_msgs__msg__ProjectedMapInfo)(pointer_to_free))
}
func (t *ProjectedMapInfo) AsCStruct() unsafe.Pointer {
	mem := (*C.map_msgs__msg__ProjectedMapInfo)(t.PrepareMemory())
	mem.frame_id = *(*C.rosidl_runtime_c__String)(t.FrameId.AsCStruct())
	mem.x = C.double(t.X)
	mem.y = C.double(t.Y)
	mem.width = C.double(t.Width)
	mem.height = C.double(t.Height)
	mem.min_z = C.double(t.MinZ)
	mem.max_z = C.double(t.MaxZ)
	return unsafe.Pointer(mem)
}
func (t *ProjectedMapInfo) AsGoStruct(ros2_message_buffer unsafe.Pointer) {
	mem := (*C.map_msgs__msg__ProjectedMapInfo)(ros2_message_buffer)
	t.FrameId.AsGoStruct(unsafe.Pointer(&mem.frame_id))
	t.X = float64(mem.x)
	t.Y = float64(mem.y)
	t.Width = float64(mem.width)
	t.Height = float64(mem.height)
	t.MinZ = float64(mem.min_z)
	t.MaxZ = float64(mem.max_z)
}
func (t *ProjectedMapInfo) Clone() ros2types.ROS2Msg {
	clone := *t
	return &clone
}

type CProjectedMapInfo = C.map_msgs__msg__ProjectedMapInfo
type CProjectedMapInfo__Sequence = C.map_msgs__msg__ProjectedMapInfo__Sequence

func ProjectedMapInfo__Sequence_to_Go(goSlice *[]ProjectedMapInfo, cSlice CProjectedMapInfo__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]ProjectedMapInfo, int64(cSlice.size))
	for i := 0; i < int(cSlice.size); i++ {
		cIdx := (*C.map_msgs__msg__ProjectedMapInfo__Sequence)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_map_msgs__msg__ProjectedMapInfo * uintptr(i)),
		))
		(*goSlice)[i] = ProjectedMapInfo{}
		(*goSlice)[i].AsGoStruct(unsafe.Pointer(cIdx))
	}
}
func ProjectedMapInfo__Sequence_to_C(cSlice *CProjectedMapInfo__Sequence, goSlice []ProjectedMapInfo) {
	if len(goSlice) == 0 {
		return
	}
	cSlice.data = (*C.map_msgs__msg__ProjectedMapInfo)(C.malloc((C.size_t)(C.sizeof_struct_map_msgs__msg__ProjectedMapInfo * uintptr(len(goSlice)))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity

	for i, v := range goSlice {
		cIdx := (*C.map_msgs__msg__ProjectedMapInfo)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_map_msgs__msg__ProjectedMapInfo * uintptr(i)),
		))
		*cIdx = *(*C.map_msgs__msg__ProjectedMapInfo)(v.AsCStruct())
	}
}
func ProjectedMapInfo__Array_to_Go(goSlice []ProjectedMapInfo, cSlice []CProjectedMapInfo) {
	for i := 0; i < len(cSlice); i++ {
		goSlice[i].AsGoStruct(unsafe.Pointer(&cSlice[i]))
	}
}
func ProjectedMapInfo__Array_to_C(cSlice []CProjectedMapInfo, goSlice []ProjectedMapInfo) {
	for i := 0; i < len(goSlice); i++ {
		cSlice[i] = *(*C.map_msgs__msg__ProjectedMapInfo)(goSlice[i].AsCStruct())
	}
}


