/*
This file is part of rclgo

Copyright Â© 2021 Technology Innovation Institute, United Arab Emirates

Licensed under the Apache License, Version 2.0 (the "License");
	http://www.apache.org/licenses/LICENSE-2.0
*/

/*
THIS FILE IS AUTOGENERATED BY 'rclgo-gen generate'
*/

package map_msgs
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/ros2/ros2types"
	"github.com/tiiuae/rclgo/pkg/ros2/ros2_type_dispatcher"
	sensor_msgs "github.com/tiiuae/rclgo/pkg/ros2/msgs/sensor_msgs/msg"
	std_msgs "github.com/tiiuae/rclgo/pkg/ros2/msgs/std_msgs/msg"
	
)
/*
#cgo LDFLAGS: -L/opt/ros/foxy/lib -Wl,-rpath=/opt/ros/foxy/lib -lrcl -lrosidl_runtime_c -lrosidl_typesupport_c -lrcutils -lrmw_implementation
#cgo LDFLAGS: -lmap_msgs__rosidl_typesupport_c -lmap_msgs__rosidl_generator_c
#cgo LDFLAGS: -lsensor_msgs__rosidl_typesupport_c -lsensor_msgs__rosidl_generator_c
#cgo LDFLAGS: -lstd_msgs__rosidl_typesupport_c -lstd_msgs__rosidl_generator_c

#cgo CFLAGS: -I/opt/ros/foxy/include

#include <rosidl_runtime_c/message_type_support_struct.h>
#include <map_msgs/msg/point_cloud2_update.h>
*/
import "C"

func init() {
	ros2_type_dispatcher.RegisterROS2MsgTypeNameAlias("map_msgs/PointCloud2Update", &PointCloud2Update{})
}
const (
	PointCloud2Update_ADD uint32 = 0
	PointCloud2Update_DELETE uint32 = 1
)

// Do not create instances of this type directly. Always use NewPointCloud2Update
// function instead.
type PointCloud2Update struct {
	Header std_msgs.Header `yaml:"header"`
	Type uint32 `yaml:"type"`// type of update, one of ADD or DELETE
	Points sensor_msgs.PointCloud2 `yaml:"points"`
}

// NewPointCloud2Update creates a new PointCloud2Update with default values.
func NewPointCloud2Update() *PointCloud2Update {
	self := PointCloud2Update{}
	self.SetDefaults(nil)
	return &self
}

func (t *PointCloud2Update) SetDefaults(d interface{}) ros2types.ROS2Msg {
	t.Header.SetDefaults(nil)
	t.Points.SetDefaults(nil)
	
	return t
}

func (t *PointCloud2Update) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__map_msgs__msg__PointCloud2Update())
}
func (t *PointCloud2Update) PrepareMemory() unsafe.Pointer { //returns *C.map_msgs__msg__PointCloud2Update
	return (unsafe.Pointer)(C.map_msgs__msg__PointCloud2Update__create())
}
func (t *PointCloud2Update) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.map_msgs__msg__PointCloud2Update__destroy((*C.map_msgs__msg__PointCloud2Update)(pointer_to_free))
}
func (t *PointCloud2Update) AsCStruct() unsafe.Pointer {
	mem := (*C.map_msgs__msg__PointCloud2Update)(t.PrepareMemory())
	mem.header = *(*C.std_msgs__msg__Header)(t.Header.AsCStruct())
	mem._type = C.uint32_t(t.Type)
	mem.points = *(*C.sensor_msgs__msg__PointCloud2)(t.Points.AsCStruct())
	return unsafe.Pointer(mem)
}
func (t *PointCloud2Update) AsGoStruct(ros2_message_buffer unsafe.Pointer) {
	mem := (*C.map_msgs__msg__PointCloud2Update)(ros2_message_buffer)
	t.Header.AsGoStruct(unsafe.Pointer(&mem.header))
	t.Type = uint32(mem._type)
	t.Points.AsGoStruct(unsafe.Pointer(&mem.points))
}
func (t *PointCloud2Update) Clone() ros2types.ROS2Msg {
	clone := *t
	return &clone
}

type CPointCloud2Update = C.map_msgs__msg__PointCloud2Update
type CPointCloud2Update__Sequence = C.map_msgs__msg__PointCloud2Update__Sequence

func PointCloud2Update__Sequence_to_Go(goSlice *[]PointCloud2Update, cSlice CPointCloud2Update__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]PointCloud2Update, int64(cSlice.size))
	for i := 0; i < int(cSlice.size); i++ {
		cIdx := (*C.map_msgs__msg__PointCloud2Update__Sequence)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_map_msgs__msg__PointCloud2Update * uintptr(i)),
		))
		(*goSlice)[i] = PointCloud2Update{}
		(*goSlice)[i].AsGoStruct(unsafe.Pointer(cIdx))
	}
}
func PointCloud2Update__Sequence_to_C(cSlice *CPointCloud2Update__Sequence, goSlice []PointCloud2Update) {
	if len(goSlice) == 0 {
		return
	}
	cSlice.data = (*C.map_msgs__msg__PointCloud2Update)(C.malloc((C.size_t)(C.sizeof_struct_map_msgs__msg__PointCloud2Update * uintptr(len(goSlice)))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity

	for i, v := range goSlice {
		cIdx := (*C.map_msgs__msg__PointCloud2Update)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_map_msgs__msg__PointCloud2Update * uintptr(i)),
		))
		*cIdx = *(*C.map_msgs__msg__PointCloud2Update)(v.AsCStruct())
	}
}
func PointCloud2Update__Array_to_Go(goSlice []PointCloud2Update, cSlice []CPointCloud2Update) {
	for i := 0; i < len(cSlice); i++ {
		goSlice[i].AsGoStruct(unsafe.Pointer(&cSlice[i]))
	}
}
func PointCloud2Update__Array_to_C(cSlice []CPointCloud2Update, goSlice []PointCloud2Update) {
	for i := 0; i < len(goSlice); i++ {
		cSlice[i] = *(*C.map_msgs__msg__PointCloud2Update)(goSlice[i].AsCStruct())
	}
}


