/*
This file is part of rclgo

Copyright Â© 2021 Technology Innovation Institute, United Arab Emirates

Licensed under the Apache License, Version 2.0 (the "License");
	http://www.apache.org/licenses/LICENSE-2.0
*/

/*
THIS FILE IS AUTOGENERATED BY 'rclgo-gen generate'
*/

package map_msgs_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/ros2/ros2types"
	"github.com/tiiuae/rclgo/pkg/ros2/ros2_type_dispatcher"
	std_msgs_msg "github.com/tiiuae/rclgo/pkg/ros2/msgs/std_msgs/msg"
	rosidl_runtime_c "github.com/tiiuae/rclgo/pkg/ros2/rosidl_runtime_c"
	
)
/*
#cgo LDFLAGS: -L/opt/ros/foxy/lib -Wl,-rpath=/opt/ros/foxy/lib -lrcl -lrosidl_runtime_c -lrosidl_typesupport_c -lrcutils -lrmw_implementation
#cgo LDFLAGS: -lmap_msgs__rosidl_typesupport_c -lmap_msgs__rosidl_generator_c
#cgo LDFLAGS: -lstd_msgs__rosidl_typesupport_c -lstd_msgs__rosidl_generator_c

#cgo CFLAGS: -I/opt/ros/foxy/include

#include <rosidl_runtime_c/message_type_support_struct.h>

#include <map_msgs/msg/occupancy_grid_update.h>

*/
import "C"

func init() {
	ros2_type_dispatcher.RegisterROS2MsgTypeNameAlias("map_msgs/OccupancyGridUpdate", &OccupancyGridUpdate{})
}

// Do not create instances of this type directly. Always use NewOccupancyGridUpdate
// function instead.
type OccupancyGridUpdate struct {
	Header std_msgs_msg.Header `yaml:"header"`
	X int32 `yaml:"x"`
	Y int32 `yaml:"y"`
	Width uint32 `yaml:"width"`
	Height uint32 `yaml:"height"`
	Data []int8 `yaml:"data"`
}

// NewOccupancyGridUpdate creates a new OccupancyGridUpdate with default values.
func NewOccupancyGridUpdate() *OccupancyGridUpdate {
	self := OccupancyGridUpdate{}
	self.SetDefaults(nil)
	return &self
}

func (t *OccupancyGridUpdate) SetDefaults(d interface{}) ros2types.ROS2Msg {
	t.Header.SetDefaults(nil)
	
	return t
}

func (t *OccupancyGridUpdate) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__map_msgs__msg__OccupancyGridUpdate())
}
func (t *OccupancyGridUpdate) PrepareMemory() unsafe.Pointer { //returns *C.map_msgs__msg__OccupancyGridUpdate
	return (unsafe.Pointer)(C.map_msgs__msg__OccupancyGridUpdate__create())
}
func (t *OccupancyGridUpdate) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.map_msgs__msg__OccupancyGridUpdate__destroy((*C.map_msgs__msg__OccupancyGridUpdate)(pointer_to_free))
}
func (t *OccupancyGridUpdate) AsCStruct() unsafe.Pointer {
	mem := (*C.map_msgs__msg__OccupancyGridUpdate)(t.PrepareMemory())
	mem.header = *(*C.std_msgs__msg__Header)(t.Header.AsCStruct())
	mem.x = C.int32_t(t.X)
	mem.y = C.int32_t(t.Y)
	mem.width = C.uint32_t(t.Width)
	mem.height = C.uint32_t(t.Height)
	rosidl_runtime_c.Int8__Sequence_to_C((*rosidl_runtime_c.CInt8__Sequence)(unsafe.Pointer(&mem.data)), t.Data)
	return unsafe.Pointer(mem)
}
func (t *OccupancyGridUpdate) AsGoStruct(ros2_message_buffer unsafe.Pointer) {
	mem := (*C.map_msgs__msg__OccupancyGridUpdate)(ros2_message_buffer)
	t.Header.AsGoStruct(unsafe.Pointer(&mem.header))
	t.X = int32(mem.x)
	t.Y = int32(mem.y)
	t.Width = uint32(mem.width)
	t.Height = uint32(mem.height)
	rosidl_runtime_c.Int8__Sequence_to_Go(&t.Data, *(*rosidl_runtime_c.CInt8__Sequence)(unsafe.Pointer(&mem.data)))
}
func (t *OccupancyGridUpdate) Clone() ros2types.ROS2Msg {
	clone := *t
	return &clone
}

type COccupancyGridUpdate = C.map_msgs__msg__OccupancyGridUpdate
type COccupancyGridUpdate__Sequence = C.map_msgs__msg__OccupancyGridUpdate__Sequence

func OccupancyGridUpdate__Sequence_to_Go(goSlice *[]OccupancyGridUpdate, cSlice COccupancyGridUpdate__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]OccupancyGridUpdate, int64(cSlice.size))
	for i := 0; i < int(cSlice.size); i++ {
		cIdx := (*C.map_msgs__msg__OccupancyGridUpdate__Sequence)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_map_msgs__msg__OccupancyGridUpdate * uintptr(i)),
		))
		(*goSlice)[i] = OccupancyGridUpdate{}
		(*goSlice)[i].AsGoStruct(unsafe.Pointer(cIdx))
	}
}
func OccupancyGridUpdate__Sequence_to_C(cSlice *COccupancyGridUpdate__Sequence, goSlice []OccupancyGridUpdate) {
	if len(goSlice) == 0 {
		return
	}
	cSlice.data = (*C.map_msgs__msg__OccupancyGridUpdate)(C.malloc((C.size_t)(C.sizeof_struct_map_msgs__msg__OccupancyGridUpdate * uintptr(len(goSlice)))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity

	for i, v := range goSlice {
		cIdx := (*C.map_msgs__msg__OccupancyGridUpdate)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_map_msgs__msg__OccupancyGridUpdate * uintptr(i)),
		))
		*cIdx = *(*C.map_msgs__msg__OccupancyGridUpdate)(v.AsCStruct())
	}
}
func OccupancyGridUpdate__Array_to_Go(goSlice []OccupancyGridUpdate, cSlice []COccupancyGridUpdate) {
	for i := 0; i < len(cSlice); i++ {
		goSlice[i].AsGoStruct(unsafe.Pointer(&cSlice[i]))
	}
}
func OccupancyGridUpdate__Array_to_C(cSlice []COccupancyGridUpdate, goSlice []OccupancyGridUpdate) {
	for i := 0; i < len(goSlice); i++ {
		cSlice[i] = *(*C.map_msgs__msg__OccupancyGridUpdate)(goSlice[i].AsCStruct())
	}
}


