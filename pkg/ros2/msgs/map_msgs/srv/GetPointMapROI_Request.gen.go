/*
This file is part of rclgo

Copyright Â© 2021 Technology Innovation Institute, United Arab Emirates

Licensed under the Apache License, Version 2.0 (the "License");
	http://www.apache.org/licenses/LICENSE-2.0
*/

/*
THIS FILE IS AUTOGENERATED BY 'rclgo-gen generate'
*/

package map_msgs_srv
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/ros2/ros2types"
	"github.com/tiiuae/rclgo/pkg/ros2/ros2_type_dispatcher"
	
)
/*
#cgo LDFLAGS: -L/opt/ros/foxy/lib -Wl,-rpath=/opt/ros/foxy/lib -lrcl -lrosidl_runtime_c -lrosidl_typesupport_c -lrcutils -lrmw_implementation
#cgo LDFLAGS: -lmap_msgs__rosidl_typesupport_c -lmap_msgs__rosidl_generator_c

#cgo CFLAGS: -I/opt/ros/foxy/include

#include <rosidl_runtime_c/message_type_support_struct.h>

#include <map_msgs/srv/get_point_map_roi.h>

*/
import "C"

func init() {
	ros2_type_dispatcher.RegisterROS2MsgTypeNameAlias("map_msgs/GetPointMapROI_Request", &GetPointMapROI_Request{})
}

// Do not create instances of this type directly. Always use NewGetPointMapROI_Request
// function instead.
type GetPointMapROI_Request struct {
	X float64 `yaml:"x"`
	Y float64 `yaml:"y"`
	Z float64 `yaml:"z"`
	R float64 `yaml:"r"`// if != 0, circular ROI of radius r
	LX float64 `yaml:"l_x"`// if r == 0, length of AABB on x
	LY float64 `yaml:"l_y"`// if r == 0, length of AABB on y
	LZ float64 `yaml:"l_z"`// if r == 0, length of AABB on z
}

// NewGetPointMapROI_Request creates a new GetPointMapROI_Request with default values.
func NewGetPointMapROI_Request() *GetPointMapROI_Request {
	self := GetPointMapROI_Request{}
	self.SetDefaults(nil)
	return &self
}

func (t *GetPointMapROI_Request) SetDefaults(d interface{}) ros2types.ROS2Msg {
	
	return t
}

func (t *GetPointMapROI_Request) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__map_msgs__srv__GetPointMapROI_Request())
}
func (t *GetPointMapROI_Request) PrepareMemory() unsafe.Pointer { //returns *C.map_msgs__srv__GetPointMapROI_Request
	return (unsafe.Pointer)(C.map_msgs__srv__GetPointMapROI_Request__create())
}
func (t *GetPointMapROI_Request) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.map_msgs__srv__GetPointMapROI_Request__destroy((*C.map_msgs__srv__GetPointMapROI_Request)(pointer_to_free))
}
func (t *GetPointMapROI_Request) AsCStruct() unsafe.Pointer {
	mem := (*C.map_msgs__srv__GetPointMapROI_Request)(t.PrepareMemory())
	mem.x = C.double(t.X)
	mem.y = C.double(t.Y)
	mem.z = C.double(t.Z)
	mem.r = C.double(t.R)
	mem.l_x = C.double(t.LX)
	mem.l_y = C.double(t.LY)
	mem.l_z = C.double(t.LZ)
	return unsafe.Pointer(mem)
}
func (t *GetPointMapROI_Request) AsGoStruct(ros2_message_buffer unsafe.Pointer) {
	mem := (*C.map_msgs__srv__GetPointMapROI_Request)(ros2_message_buffer)
	t.X = float64(mem.x)
	t.Y = float64(mem.y)
	t.Z = float64(mem.z)
	t.R = float64(mem.r)
	t.LX = float64(mem.l_x)
	t.LY = float64(mem.l_y)
	t.LZ = float64(mem.l_z)
}
func (t *GetPointMapROI_Request) Clone() ros2types.ROS2Msg {
	clone := *t
	return &clone
}

type CGetPointMapROI_Request = C.map_msgs__srv__GetPointMapROI_Request
type CGetPointMapROI_Request__Sequence = C.map_msgs__srv__GetPointMapROI_Request__Sequence

func GetPointMapROI_Request__Sequence_to_Go(goSlice *[]GetPointMapROI_Request, cSlice CGetPointMapROI_Request__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]GetPointMapROI_Request, int64(cSlice.size))
	for i := 0; i < int(cSlice.size); i++ {
		cIdx := (*C.map_msgs__srv__GetPointMapROI_Request__Sequence)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_map_msgs__srv__GetPointMapROI_Request * uintptr(i)),
		))
		(*goSlice)[i] = GetPointMapROI_Request{}
		(*goSlice)[i].AsGoStruct(unsafe.Pointer(cIdx))
	}
}
func GetPointMapROI_Request__Sequence_to_C(cSlice *CGetPointMapROI_Request__Sequence, goSlice []GetPointMapROI_Request) {
	if len(goSlice) == 0 {
		return
	}
	cSlice.data = (*C.map_msgs__srv__GetPointMapROI_Request)(C.malloc((C.size_t)(C.sizeof_struct_map_msgs__srv__GetPointMapROI_Request * uintptr(len(goSlice)))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity

	for i, v := range goSlice {
		cIdx := (*C.map_msgs__srv__GetPointMapROI_Request)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_map_msgs__srv__GetPointMapROI_Request * uintptr(i)),
		))
		*cIdx = *(*C.map_msgs__srv__GetPointMapROI_Request)(v.AsCStruct())
	}
}
func GetPointMapROI_Request__Array_to_Go(goSlice []GetPointMapROI_Request, cSlice []CGetPointMapROI_Request) {
	for i := 0; i < len(cSlice); i++ {
		goSlice[i].AsGoStruct(unsafe.Pointer(&cSlice[i]))
	}
}
func GetPointMapROI_Request__Array_to_C(cSlice []CGetPointMapROI_Request, goSlice []GetPointMapROI_Request) {
	for i := 0; i < len(goSlice); i++ {
		cSlice[i] = *(*C.map_msgs__srv__GetPointMapROI_Request)(goSlice[i].AsCStruct())
	}
}


