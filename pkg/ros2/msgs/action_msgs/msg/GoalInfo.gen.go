/*
This file is part of rclgo

Copyright Â© 2021 Technology Innovation Institute, United Arab Emirates

Licensed under the Apache License, Version 2.0 (the "License");
	http://www.apache.org/licenses/LICENSE-2.0
*/

/*
THIS FILE IS AUTOGENERATED BY 'rclgo-gen generate'
*/

package action_msgs
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/ros2/ros2types"
	"github.com/tiiuae/rclgo/pkg/ros2/ros2_type_dispatcher"
	builtin_interfaces "github.com/tiiuae/rclgo/pkg/ros2/msgs/builtin_interfaces/msg"
	unique_identifier_msgs "github.com/tiiuae/rclgo/pkg/ros2/msgs/unique_identifier_msgs/msg"
	
)
/*
#cgo LDFLAGS: -L/opt/ros/foxy/lib -Wl,-rpath=/opt/ros/foxy/lib -lrcl -lrosidl_runtime_c -lrosidl_typesupport_c -lrcutils -lrmw_implementation
#cgo LDFLAGS: -laction_msgs__rosidl_typesupport_c -laction_msgs__rosidl_generator_c
#cgo LDFLAGS: -lbuiltin_interfaces__rosidl_typesupport_c -lbuiltin_interfaces__rosidl_generator_c
#cgo LDFLAGS: -lunique_identifier_msgs__rosidl_typesupport_c -lunique_identifier_msgs__rosidl_generator_c

#cgo CFLAGS: -I/opt/ros/foxy/include

#include <rosidl_runtime_c/message_type_support_struct.h>
#include <action_msgs/msg/goal_info.h>
*/
import "C"

func init() {
	ros2_type_dispatcher.RegisterROS2MsgTypeNameAlias("action_msgs/GoalInfo", &GoalInfo{})
}

// Do not create instances of this type directly. Always use NewGoalInfo
// function instead.
type GoalInfo struct {
	GoalId unique_identifier_msgs.UUID `yaml:"goal_id"`// Goal ID
	Stamp builtin_interfaces.Time `yaml:"stamp"`// Time when the goal was accepted
}

// NewGoalInfo creates a new GoalInfo with default values.
func NewGoalInfo() *GoalInfo {
	self := GoalInfo{}
	self.SetDefaults(nil)
	return &self
}

func (t *GoalInfo) SetDefaults(d interface{}) ros2types.ROS2Msg {
	t.GoalId.SetDefaults(nil)
	t.Stamp.SetDefaults(nil)
	
	return t
}

func (t *GoalInfo) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__action_msgs__msg__GoalInfo())
}
func (t *GoalInfo) PrepareMemory() unsafe.Pointer { //returns *C.action_msgs__msg__GoalInfo
	return (unsafe.Pointer)(C.action_msgs__msg__GoalInfo__create())
}
func (t *GoalInfo) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.action_msgs__msg__GoalInfo__destroy((*C.action_msgs__msg__GoalInfo)(pointer_to_free))
}
func (t *GoalInfo) AsCStruct() unsafe.Pointer {
	mem := (*C.action_msgs__msg__GoalInfo)(t.PrepareMemory())
	mem.goal_id = *(*C.unique_identifier_msgs__msg__UUID)(t.GoalId.AsCStruct())
	mem.stamp = *(*C.builtin_interfaces__msg__Time)(t.Stamp.AsCStruct())
	return unsafe.Pointer(mem)
}
func (t *GoalInfo) AsGoStruct(ros2_message_buffer unsafe.Pointer) {
	mem := (*C.action_msgs__msg__GoalInfo)(ros2_message_buffer)
	t.GoalId.AsGoStruct(unsafe.Pointer(&mem.goal_id))
	t.Stamp.AsGoStruct(unsafe.Pointer(&mem.stamp))
}
func (t *GoalInfo) Clone() ros2types.ROS2Msg {
	clone := *t
	return &clone
}

type CGoalInfo = C.action_msgs__msg__GoalInfo
type CGoalInfo__Sequence = C.action_msgs__msg__GoalInfo__Sequence

func GoalInfo__Sequence_to_Go(goSlice *[]GoalInfo, cSlice CGoalInfo__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]GoalInfo, int64(cSlice.size))
	for i := 0; i < int(cSlice.size); i++ {
		cIdx := (*C.action_msgs__msg__GoalInfo__Sequence)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_action_msgs__msg__GoalInfo * uintptr(i)),
		))
		(*goSlice)[i] = GoalInfo{}
		(*goSlice)[i].AsGoStruct(unsafe.Pointer(cIdx))
	}
}
func GoalInfo__Sequence_to_C(cSlice *CGoalInfo__Sequence, goSlice []GoalInfo) {
	if len(goSlice) == 0 {
		return
	}
	cSlice.data = (*C.action_msgs__msg__GoalInfo)(C.malloc((C.size_t)(C.sizeof_struct_action_msgs__msg__GoalInfo * uintptr(len(goSlice)))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity

	for i, v := range goSlice {
		cIdx := (*C.action_msgs__msg__GoalInfo)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_action_msgs__msg__GoalInfo * uintptr(i)),
		))
		*cIdx = *(*C.action_msgs__msg__GoalInfo)(v.AsCStruct())
	}
}
func GoalInfo__Array_to_Go(goSlice []GoalInfo, cSlice []CGoalInfo) {
	for i := 0; i < len(cSlice); i++ {
		goSlice[i].AsGoStruct(unsafe.Pointer(&cSlice[i]))
	}
}
func GoalInfo__Array_to_C(cSlice []CGoalInfo, goSlice []GoalInfo) {
	for i := 0; i < len(goSlice); i++ {
		cSlice[i] = *(*C.action_msgs__msg__GoalInfo)(goSlice[i].AsCStruct())
	}
}


