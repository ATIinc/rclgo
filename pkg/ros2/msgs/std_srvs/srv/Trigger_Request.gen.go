/*
This file is part of rclgo

Copyright Â© 2021 Technology Innovation Institute, United Arab Emirates

Licensed under the Apache License, Version 2.0 (the "License");
	http://www.apache.org/licenses/LICENSE-2.0
*/

/*
THIS FILE IS AUTOGENERATED BY 'rclgo-gen generate'
*/

package std_srvs_srv
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/ros2/ros2types"
	"github.com/tiiuae/rclgo/pkg/ros2/ros2_type_dispatcher"
	
)
/*
#cgo LDFLAGS: -L/opt/ros/foxy/lib -Wl,-rpath=/opt/ros/foxy/lib -lrcl -lrosidl_runtime_c -lrosidl_typesupport_c -lrcutils -lrmw_implementation
#cgo LDFLAGS: -lstd_srvs__rosidl_typesupport_c -lstd_srvs__rosidl_generator_c

#cgo CFLAGS: -I/opt/ros/foxy/include

#include <rosidl_runtime_c/message_type_support_struct.h>

#include <std_srvs/srv/trigger.h>

*/
import "C"

func init() {
	ros2_type_dispatcher.RegisterROS2MsgTypeNameAlias("std_srvs/Trigger_Request", &Trigger_Request{})
}

// Do not create instances of this type directly. Always use NewTrigger_Request
// function instead.
type Trigger_Request struct {
}

// NewTrigger_Request creates a new Trigger_Request with default values.
func NewTrigger_Request() *Trigger_Request {
	self := Trigger_Request{}
	self.SetDefaults(nil)
	return &self
}

func (t *Trigger_Request) SetDefaults(d interface{}) ros2types.ROS2Msg {
	
	return t
}

func (t *Trigger_Request) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__std_srvs__srv__Trigger_Request())
}
func (t *Trigger_Request) PrepareMemory() unsafe.Pointer { //returns *C.std_srvs__srv__Trigger_Request
	return (unsafe.Pointer)(C.std_srvs__srv__Trigger_Request__create())
}
func (t *Trigger_Request) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.std_srvs__srv__Trigger_Request__destroy((*C.std_srvs__srv__Trigger_Request)(pointer_to_free))
}
func (t *Trigger_Request) AsCStruct() unsafe.Pointer {
	mem := (*C.std_srvs__srv__Trigger_Request)(t.PrepareMemory())
	return unsafe.Pointer(mem)
}
func (t *Trigger_Request) AsGoStruct(ros2_message_buffer unsafe.Pointer) {
	
}
func (t *Trigger_Request) Clone() ros2types.ROS2Msg {
	clone := *t
	return &clone
}

type CTrigger_Request = C.std_srvs__srv__Trigger_Request
type CTrigger_Request__Sequence = C.std_srvs__srv__Trigger_Request__Sequence

func Trigger_Request__Sequence_to_Go(goSlice *[]Trigger_Request, cSlice CTrigger_Request__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]Trigger_Request, int64(cSlice.size))
	for i := 0; i < int(cSlice.size); i++ {
		cIdx := (*C.std_srvs__srv__Trigger_Request__Sequence)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_std_srvs__srv__Trigger_Request * uintptr(i)),
		))
		(*goSlice)[i] = Trigger_Request{}
		(*goSlice)[i].AsGoStruct(unsafe.Pointer(cIdx))
	}
}
func Trigger_Request__Sequence_to_C(cSlice *CTrigger_Request__Sequence, goSlice []Trigger_Request) {
	if len(goSlice) == 0 {
		return
	}
	cSlice.data = (*C.std_srvs__srv__Trigger_Request)(C.malloc((C.size_t)(C.sizeof_struct_std_srvs__srv__Trigger_Request * uintptr(len(goSlice)))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity

	for i, v := range goSlice {
		cIdx := (*C.std_srvs__srv__Trigger_Request)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_std_srvs__srv__Trigger_Request * uintptr(i)),
		))
		*cIdx = *(*C.std_srvs__srv__Trigger_Request)(v.AsCStruct())
	}
}
func Trigger_Request__Array_to_Go(goSlice []Trigger_Request, cSlice []CTrigger_Request) {
	for i := 0; i < len(cSlice); i++ {
		goSlice[i].AsGoStruct(unsafe.Pointer(&cSlice[i]))
	}
}
func Trigger_Request__Array_to_C(cSlice []CTrigger_Request, goSlice []Trigger_Request) {
	for i := 0; i < len(goSlice); i++ {
		cSlice[i] = *(*C.std_srvs__srv__Trigger_Request)(goSlice[i].AsCStruct())
	}
}


