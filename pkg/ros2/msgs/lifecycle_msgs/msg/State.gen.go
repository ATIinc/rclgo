/*
This file is part of rclgo

Copyright © 2021 Technology Innovation Institute, United Arab Emirates

Licensed under the Apache License, Version 2.0 (the "License");
	http://www.apache.org/licenses/LICENSE-2.0
*/

/*
THIS FILE IS AUTOGENERATED BY 'rclgo-gen generate'
*/

package lifecycle_msgs_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/ros2/ros2types"
	"github.com/tiiuae/rclgo/pkg/ros2/ros2_type_dispatcher"
	rosidl_runtime_c "github.com/tiiuae/rclgo/pkg/ros2/rosidl_runtime_c"
	
)
/*
#cgo LDFLAGS: -L/opt/ros/foxy/lib -Wl,-rpath=/opt/ros/foxy/lib -lrcl -lrosidl_runtime_c -lrosidl_typesupport_c -lrcutils -lrmw_implementation
#cgo LDFLAGS: -llifecycle_msgs__rosidl_typesupport_c -llifecycle_msgs__rosidl_generator_c

#cgo CFLAGS: -I/opt/ros/foxy/include

#include <rosidl_runtime_c/message_type_support_struct.h>

#include <lifecycle_msgs/msg/state.h>

*/
import "C"

func init() {
	ros2_type_dispatcher.RegisterROS2MsgTypeNameAlias("lifecycle_msgs/State", &State{})
}
const (
	State_PRIMARY_STATE_UNKNOWN uint8 = 0// Indicates state has not yet been set.
	State_PRIMARY_STATE_UNCONFIGURED uint8 = 1// This is the life cycle state the node is in immediately after beinginstantiated.
	State_PRIMARY_STATE_INACTIVE uint8 = 2// This state represents a node that is not currently performing any processing.
	State_PRIMARY_STATE_ACTIVE uint8 = 3// This is the main state of the node’s life cycle. While in this state, the nodeperforms any processing, responds to service requests, reads and processesdata, produces output, etc.
	State_PRIMARY_STATE_FINALIZED uint8 = 4// The finalized state is the state in which the node ends immediately beforebeing destroyed.
	State_TRANSITION_STATE_CONFIGURING uint8 = 10// In this transition state the node’s onConfigure callback will be called toallow the node to load its configuration and conduct any required setup.
	State_TRANSITION_STATE_CLEANINGUP uint8 = 11// In this transition state the node’s callback onCleanup will be called to clearall state and return the node to a functionally equivalent state as whenfirst created.
	State_TRANSITION_STATE_SHUTTINGDOWN uint8 = 12// In this transition state the callback onShutdown will be executed to do anycleanup necessary before destruction.
	State_TRANSITION_STATE_ACTIVATING uint8 = 13// In this transition state the callback onActivate will be executed to do anyfinal preparations to start executing.
	State_TRANSITION_STATE_DEACTIVATING uint8 = 14// In this transition state the callback onDeactivate will be executed to do anycleanup to start executing, and reverse the onActivate changes.
	State_TRANSITION_STATE_ERRORPROCESSING uint8 = 15// This transition state is where any error may be cleaned up.
)

// Do not create instances of this type directly. Always use NewState
// function instead.
type State struct {
	Id uint8 `yaml:"id"`// The state id value from the above definitions.
	Label rosidl_runtime_c.String `yaml:"label"`// A text label of the state.
}

// NewState creates a new State with default values.
func NewState() *State {
	self := State{}
	self.SetDefaults(nil)
	return &self
}

func (t *State) SetDefaults(d interface{}) ros2types.ROS2Msg {
	t.Label.SetDefaults("")
	
	return t
}

func (t *State) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__lifecycle_msgs__msg__State())
}
func (t *State) PrepareMemory() unsafe.Pointer { //returns *C.lifecycle_msgs__msg__State
	return (unsafe.Pointer)(C.lifecycle_msgs__msg__State__create())
}
func (t *State) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.lifecycle_msgs__msg__State__destroy((*C.lifecycle_msgs__msg__State)(pointer_to_free))
}
func (t *State) AsCStruct() unsafe.Pointer {
	mem := (*C.lifecycle_msgs__msg__State)(t.PrepareMemory())
	mem.id = C.uint8_t(t.Id)
	mem.label = *(*C.rosidl_runtime_c__String)(t.Label.AsCStruct())
	return unsafe.Pointer(mem)
}
func (t *State) AsGoStruct(ros2_message_buffer unsafe.Pointer) {
	mem := (*C.lifecycle_msgs__msg__State)(ros2_message_buffer)
	t.Id = uint8(mem.id)
	t.Label.AsGoStruct(unsafe.Pointer(&mem.label))
}
func (t *State) Clone() ros2types.ROS2Msg {
	clone := *t
	return &clone
}

type CState = C.lifecycle_msgs__msg__State
type CState__Sequence = C.lifecycle_msgs__msg__State__Sequence

func State__Sequence_to_Go(goSlice *[]State, cSlice CState__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]State, int64(cSlice.size))
	for i := 0; i < int(cSlice.size); i++ {
		cIdx := (*C.lifecycle_msgs__msg__State__Sequence)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_lifecycle_msgs__msg__State * uintptr(i)),
		))
		(*goSlice)[i] = State{}
		(*goSlice)[i].AsGoStruct(unsafe.Pointer(cIdx))
	}
}
func State__Sequence_to_C(cSlice *CState__Sequence, goSlice []State) {
	if len(goSlice) == 0 {
		return
	}
	cSlice.data = (*C.lifecycle_msgs__msg__State)(C.malloc((C.size_t)(C.sizeof_struct_lifecycle_msgs__msg__State * uintptr(len(goSlice)))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity

	for i, v := range goSlice {
		cIdx := (*C.lifecycle_msgs__msg__State)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_lifecycle_msgs__msg__State * uintptr(i)),
		))
		*cIdx = *(*C.lifecycle_msgs__msg__State)(v.AsCStruct())
	}
}
func State__Array_to_Go(goSlice []State, cSlice []CState) {
	for i := 0; i < len(cSlice); i++ {
		goSlice[i].AsGoStruct(unsafe.Pointer(&cSlice[i]))
	}
}
func State__Array_to_C(cSlice []CState, goSlice []State) {
	for i := 0; i < len(goSlice); i++ {
		cSlice[i] = *(*C.lifecycle_msgs__msg__State)(goSlice[i].AsCStruct())
	}
}


