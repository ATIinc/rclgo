/*
This file is part of rclgo

Copyright Â© 2021 Technology Innovation Institute, United Arab Emirates

Licensed under the Apache License, Version 2.0 (the "License");
	http://www.apache.org/licenses/LICENSE-2.0
*/

/*
THIS FILE IS AUTOGENERATED BY 'rclgo-gen generate'
*/

package lifecycle_msgs_srv
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/ros2/ros2types"
	"github.com/tiiuae/rclgo/pkg/ros2/ros2_type_dispatcher"
	
)
/*
#cgo LDFLAGS: -L/opt/ros/foxy/lib -Wl,-rpath=/opt/ros/foxy/lib -lrcl -lrosidl_runtime_c -lrosidl_typesupport_c -lrcutils -lrmw_implementation
#cgo LDFLAGS: -llifecycle_msgs__rosidl_typesupport_c -llifecycle_msgs__rosidl_generator_c

#cgo CFLAGS: -I/opt/ros/foxy/include

#include <rosidl_runtime_c/message_type_support_struct.h>

#include <lifecycle_msgs/srv/get_available_states.h>

*/
import "C"

func init() {
	ros2_type_dispatcher.RegisterROS2MsgTypeNameAlias("lifecycle_msgs/GetAvailableStates_Request", &GetAvailableStates_Request{})
}

// Do not create instances of this type directly. Always use NewGetAvailableStates_Request
// function instead.
type GetAvailableStates_Request struct {
}

// NewGetAvailableStates_Request creates a new GetAvailableStates_Request with default values.
func NewGetAvailableStates_Request() *GetAvailableStates_Request {
	self := GetAvailableStates_Request{}
	self.SetDefaults(nil)
	return &self
}

func (t *GetAvailableStates_Request) SetDefaults(d interface{}) ros2types.ROS2Msg {
	
	return t
}

func (t *GetAvailableStates_Request) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__lifecycle_msgs__srv__GetAvailableStates_Request())
}
func (t *GetAvailableStates_Request) PrepareMemory() unsafe.Pointer { //returns *C.lifecycle_msgs__srv__GetAvailableStates_Request
	return (unsafe.Pointer)(C.lifecycle_msgs__srv__GetAvailableStates_Request__create())
}
func (t *GetAvailableStates_Request) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.lifecycle_msgs__srv__GetAvailableStates_Request__destroy((*C.lifecycle_msgs__srv__GetAvailableStates_Request)(pointer_to_free))
}
func (t *GetAvailableStates_Request) AsCStruct() unsafe.Pointer {
	mem := (*C.lifecycle_msgs__srv__GetAvailableStates_Request)(t.PrepareMemory())
	return unsafe.Pointer(mem)
}
func (t *GetAvailableStates_Request) AsGoStruct(ros2_message_buffer unsafe.Pointer) {
	
}
func (t *GetAvailableStates_Request) Clone() ros2types.ROS2Msg {
	clone := *t
	return &clone
}

type CGetAvailableStates_Request = C.lifecycle_msgs__srv__GetAvailableStates_Request
type CGetAvailableStates_Request__Sequence = C.lifecycle_msgs__srv__GetAvailableStates_Request__Sequence

func GetAvailableStates_Request__Sequence_to_Go(goSlice *[]GetAvailableStates_Request, cSlice CGetAvailableStates_Request__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]GetAvailableStates_Request, int64(cSlice.size))
	for i := 0; i < int(cSlice.size); i++ {
		cIdx := (*C.lifecycle_msgs__srv__GetAvailableStates_Request__Sequence)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_lifecycle_msgs__srv__GetAvailableStates_Request * uintptr(i)),
		))
		(*goSlice)[i] = GetAvailableStates_Request{}
		(*goSlice)[i].AsGoStruct(unsafe.Pointer(cIdx))
	}
}
func GetAvailableStates_Request__Sequence_to_C(cSlice *CGetAvailableStates_Request__Sequence, goSlice []GetAvailableStates_Request) {
	if len(goSlice) == 0 {
		return
	}
	cSlice.data = (*C.lifecycle_msgs__srv__GetAvailableStates_Request)(C.malloc((C.size_t)(C.sizeof_struct_lifecycle_msgs__srv__GetAvailableStates_Request * uintptr(len(goSlice)))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity

	for i, v := range goSlice {
		cIdx := (*C.lifecycle_msgs__srv__GetAvailableStates_Request)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_lifecycle_msgs__srv__GetAvailableStates_Request * uintptr(i)),
		))
		*cIdx = *(*C.lifecycle_msgs__srv__GetAvailableStates_Request)(v.AsCStruct())
	}
}
func GetAvailableStates_Request__Array_to_Go(goSlice []GetAvailableStates_Request, cSlice []CGetAvailableStates_Request) {
	for i := 0; i < len(cSlice); i++ {
		goSlice[i].AsGoStruct(unsafe.Pointer(&cSlice[i]))
	}
}
func GetAvailableStates_Request__Array_to_C(cSlice []CGetAvailableStates_Request, goSlice []GetAvailableStates_Request) {
	for i := 0; i < len(goSlice); i++ {
		cSlice[i] = *(*C.lifecycle_msgs__srv__GetAvailableStates_Request)(goSlice[i].AsCStruct())
	}
}


