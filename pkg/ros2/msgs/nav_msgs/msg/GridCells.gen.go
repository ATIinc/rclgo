/*
This file is part of rclgo

Copyright Â© 2021 Technology Innovation Institute, United Arab Emirates

Licensed under the Apache License, Version 2.0 (the "License");
	http://www.apache.org/licenses/LICENSE-2.0
*/

/*
THIS FILE IS AUTOGENERATED BY 'rclgo-gen generate'
*/

package nav_msgs_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/ros2/ros2types"
	"github.com/tiiuae/rclgo/pkg/ros2/ros2_type_dispatcher"
	geometry_msgs_msg "github.com/tiiuae/rclgo/pkg/ros2/msgs/geometry_msgs/msg"
	std_msgs_msg "github.com/tiiuae/rclgo/pkg/ros2/msgs/std_msgs/msg"
	
)
/*
#cgo LDFLAGS: -L/opt/ros/foxy/lib -Wl,-rpath=/opt/ros/foxy/lib -lrcl -lrosidl_runtime_c -lrosidl_typesupport_c -lrcutils -lrmw_implementation
#cgo LDFLAGS: -lnav_msgs__rosidl_typesupport_c -lnav_msgs__rosidl_generator_c
#cgo LDFLAGS: -lgeometry_msgs__rosidl_typesupport_c -lgeometry_msgs__rosidl_generator_c
#cgo LDFLAGS: -lstd_msgs__rosidl_typesupport_c -lstd_msgs__rosidl_generator_c

#cgo CFLAGS: -I/opt/ros/foxy/include

#include <rosidl_runtime_c/message_type_support_struct.h>

#include <nav_msgs/msg/grid_cells.h>

*/
import "C"

func init() {
	ros2_type_dispatcher.RegisterROS2MsgTypeNameAlias("nav_msgs/GridCells", &GridCells{})
}

// Do not create instances of this type directly. Always use NewGridCells
// function instead.
type GridCells struct {
	Header std_msgs_msg.Header `yaml:"header"`
	CellWidth float32 `yaml:"cell_width"`// Width of each cell
	CellHeight float32 `yaml:"cell_height"`// Height of each cell
	Cells []geometry_msgs_msg.Point `yaml:"cells"`// Each cell is represented by the Point at the center of the cell
}

// NewGridCells creates a new GridCells with default values.
func NewGridCells() *GridCells {
	self := GridCells{}
	self.SetDefaults(nil)
	return &self
}

func (t *GridCells) SetDefaults(d interface{}) ros2types.ROS2Msg {
	t.Header.SetDefaults(nil)
	
	return t
}

func (t *GridCells) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__nav_msgs__msg__GridCells())
}
func (t *GridCells) PrepareMemory() unsafe.Pointer { //returns *C.nav_msgs__msg__GridCells
	return (unsafe.Pointer)(C.nav_msgs__msg__GridCells__create())
}
func (t *GridCells) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.nav_msgs__msg__GridCells__destroy((*C.nav_msgs__msg__GridCells)(pointer_to_free))
}
func (t *GridCells) AsCStruct() unsafe.Pointer {
	mem := (*C.nav_msgs__msg__GridCells)(t.PrepareMemory())
	mem.header = *(*C.std_msgs__msg__Header)(t.Header.AsCStruct())
	mem.cell_width = C.float(t.CellWidth)
	mem.cell_height = C.float(t.CellHeight)
	geometry_msgs_msg.Point__Sequence_to_C((*geometry_msgs_msg.CPoint__Sequence)(unsafe.Pointer(&mem.cells)), t.Cells)
	return unsafe.Pointer(mem)
}
func (t *GridCells) AsGoStruct(ros2_message_buffer unsafe.Pointer) {
	mem := (*C.nav_msgs__msg__GridCells)(ros2_message_buffer)
	t.Header.AsGoStruct(unsafe.Pointer(&mem.header))
	t.CellWidth = float32(mem.cell_width)
	t.CellHeight = float32(mem.cell_height)
	geometry_msgs_msg.Point__Sequence_to_Go(&t.Cells, *(*geometry_msgs_msg.CPoint__Sequence)(unsafe.Pointer(&mem.cells)))
}
func (t *GridCells) Clone() ros2types.ROS2Msg {
	clone := *t
	return &clone
}

type CGridCells = C.nav_msgs__msg__GridCells
type CGridCells__Sequence = C.nav_msgs__msg__GridCells__Sequence

func GridCells__Sequence_to_Go(goSlice *[]GridCells, cSlice CGridCells__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]GridCells, int64(cSlice.size))
	for i := 0; i < int(cSlice.size); i++ {
		cIdx := (*C.nav_msgs__msg__GridCells__Sequence)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_nav_msgs__msg__GridCells * uintptr(i)),
		))
		(*goSlice)[i] = GridCells{}
		(*goSlice)[i].AsGoStruct(unsafe.Pointer(cIdx))
	}
}
func GridCells__Sequence_to_C(cSlice *CGridCells__Sequence, goSlice []GridCells) {
	if len(goSlice) == 0 {
		return
	}
	cSlice.data = (*C.nav_msgs__msg__GridCells)(C.malloc((C.size_t)(C.sizeof_struct_nav_msgs__msg__GridCells * uintptr(len(goSlice)))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity

	for i, v := range goSlice {
		cIdx := (*C.nav_msgs__msg__GridCells)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_nav_msgs__msg__GridCells * uintptr(i)),
		))
		*cIdx = *(*C.nav_msgs__msg__GridCells)(v.AsCStruct())
	}
}
func GridCells__Array_to_Go(goSlice []GridCells, cSlice []CGridCells) {
	for i := 0; i < len(cSlice); i++ {
		goSlice[i].AsGoStruct(unsafe.Pointer(&cSlice[i]))
	}
}
func GridCells__Array_to_C(cSlice []CGridCells, goSlice []GridCells) {
	for i := 0; i < len(goSlice); i++ {
		cSlice[i] = *(*C.nav_msgs__msg__GridCells)(goSlice[i].AsCStruct())
	}
}


