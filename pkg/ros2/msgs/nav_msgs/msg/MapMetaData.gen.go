/*
This file is part of rclgo

Copyright Â© 2021 Technology Innovation Institute, United Arab Emirates

Licensed under the Apache License, Version 2.0 (the "License");
	http://www.apache.org/licenses/LICENSE-2.0
*/

/*
THIS FILE IS AUTOGENERATED BY 'rclgo-gen generate'
*/

package nav_msgs_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/ros2/ros2types"
	"github.com/tiiuae/rclgo/pkg/ros2/ros2_type_dispatcher"
	builtin_interfaces_msg "github.com/tiiuae/rclgo/pkg/ros2/msgs/builtin_interfaces/msg"
	geometry_msgs_msg "github.com/tiiuae/rclgo/pkg/ros2/msgs/geometry_msgs/msg"
	
)
/*
#cgo LDFLAGS: -L/opt/ros/foxy/lib -Wl,-rpath=/opt/ros/foxy/lib -lrcl -lrosidl_runtime_c -lrosidl_typesupport_c -lrcutils -lrmw_implementation
#cgo LDFLAGS: -lnav_msgs__rosidl_typesupport_c -lnav_msgs__rosidl_generator_c
#cgo LDFLAGS: -lbuiltin_interfaces__rosidl_typesupport_c -lbuiltin_interfaces__rosidl_generator_c
#cgo LDFLAGS: -lgeometry_msgs__rosidl_typesupport_c -lgeometry_msgs__rosidl_generator_c

#cgo CFLAGS: -I/opt/ros/foxy/include

#include <rosidl_runtime_c/message_type_support_struct.h>

#include <nav_msgs/msg/map_meta_data.h>

*/
import "C"

func init() {
	ros2_type_dispatcher.RegisterROS2MsgTypeNameAlias("nav_msgs/MapMetaData", &MapMetaData{})
}

// Do not create instances of this type directly. Always use NewMapMetaData
// function instead.
type MapMetaData struct {
	MapLoadTime builtin_interfaces_msg.Time `yaml:"map_load_time"`// The time at which the map was loaded
	Resolution float32 `yaml:"resolution"`// The map resolution [m/cell]
	Width uint32 `yaml:"width"`// Map width [cells]
	Height uint32 `yaml:"height"`// Map height [cells]
	Origin geometry_msgs_msg.Pose `yaml:"origin"`// The origin of the map [m, m, rad].  This is the real-world pose of thebottom left corner of cell (0,0) in the map.
}

// NewMapMetaData creates a new MapMetaData with default values.
func NewMapMetaData() *MapMetaData {
	self := MapMetaData{}
	self.SetDefaults(nil)
	return &self
}

func (t *MapMetaData) SetDefaults(d interface{}) ros2types.ROS2Msg {
	t.MapLoadTime.SetDefaults(nil)
	t.Origin.SetDefaults(nil)
	
	return t
}

func (t *MapMetaData) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__nav_msgs__msg__MapMetaData())
}
func (t *MapMetaData) PrepareMemory() unsafe.Pointer { //returns *C.nav_msgs__msg__MapMetaData
	return (unsafe.Pointer)(C.nav_msgs__msg__MapMetaData__create())
}
func (t *MapMetaData) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.nav_msgs__msg__MapMetaData__destroy((*C.nav_msgs__msg__MapMetaData)(pointer_to_free))
}
func (t *MapMetaData) AsCStruct() unsafe.Pointer {
	mem := (*C.nav_msgs__msg__MapMetaData)(t.PrepareMemory())
	mem.map_load_time = *(*C.builtin_interfaces__msg__Time)(t.MapLoadTime.AsCStruct())
	mem.resolution = C.float(t.Resolution)
	mem.width = C.uint32_t(t.Width)
	mem.height = C.uint32_t(t.Height)
	mem.origin = *(*C.geometry_msgs__msg__Pose)(t.Origin.AsCStruct())
	return unsafe.Pointer(mem)
}
func (t *MapMetaData) AsGoStruct(ros2_message_buffer unsafe.Pointer) {
	mem := (*C.nav_msgs__msg__MapMetaData)(ros2_message_buffer)
	t.MapLoadTime.AsGoStruct(unsafe.Pointer(&mem.map_load_time))
	t.Resolution = float32(mem.resolution)
	t.Width = uint32(mem.width)
	t.Height = uint32(mem.height)
	t.Origin.AsGoStruct(unsafe.Pointer(&mem.origin))
}
func (t *MapMetaData) Clone() ros2types.ROS2Msg {
	clone := *t
	return &clone
}

type CMapMetaData = C.nav_msgs__msg__MapMetaData
type CMapMetaData__Sequence = C.nav_msgs__msg__MapMetaData__Sequence

func MapMetaData__Sequence_to_Go(goSlice *[]MapMetaData, cSlice CMapMetaData__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]MapMetaData, int64(cSlice.size))
	for i := 0; i < int(cSlice.size); i++ {
		cIdx := (*C.nav_msgs__msg__MapMetaData__Sequence)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_nav_msgs__msg__MapMetaData * uintptr(i)),
		))
		(*goSlice)[i] = MapMetaData{}
		(*goSlice)[i].AsGoStruct(unsafe.Pointer(cIdx))
	}
}
func MapMetaData__Sequence_to_C(cSlice *CMapMetaData__Sequence, goSlice []MapMetaData) {
	if len(goSlice) == 0 {
		return
	}
	cSlice.data = (*C.nav_msgs__msg__MapMetaData)(C.malloc((C.size_t)(C.sizeof_struct_nav_msgs__msg__MapMetaData * uintptr(len(goSlice)))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity

	for i, v := range goSlice {
		cIdx := (*C.nav_msgs__msg__MapMetaData)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_nav_msgs__msg__MapMetaData * uintptr(i)),
		))
		*cIdx = *(*C.nav_msgs__msg__MapMetaData)(v.AsCStruct())
	}
}
func MapMetaData__Array_to_Go(goSlice []MapMetaData, cSlice []CMapMetaData) {
	for i := 0; i < len(cSlice); i++ {
		goSlice[i].AsGoStruct(unsafe.Pointer(&cSlice[i]))
	}
}
func MapMetaData__Array_to_C(cSlice []CMapMetaData, goSlice []MapMetaData) {
	for i := 0; i < len(goSlice); i++ {
		cSlice[i] = *(*C.nav_msgs__msg__MapMetaData)(goSlice[i].AsCStruct())
	}
}


