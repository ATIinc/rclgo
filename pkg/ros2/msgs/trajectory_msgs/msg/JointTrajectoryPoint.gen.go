/*
This file is part of rclgo

Copyright Â© 2021 Technology Innovation Institute, United Arab Emirates

Licensed under the Apache License, Version 2.0 (the "License");
	http://www.apache.org/licenses/LICENSE-2.0
*/

/*
THIS FILE IS AUTOGENERATED BY 'rclgo-gen generate'
*/

package trajectory_msgs
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/ros2/ros2types"
	"github.com/tiiuae/rclgo/pkg/ros2/ros2_type_dispatcher"
	builtin_interfaces "github.com/tiiuae/rclgo/pkg/ros2/msgs/builtin_interfaces/msg"
	rosidl_runtime_c "github.com/tiiuae/rclgo/pkg/ros2/rosidl_runtime_c"
	
)
/*
#cgo LDFLAGS: -L/opt/ros/foxy/lib -Wl,-rpath=/opt/ros/foxy/lib -lrcl -lrosidl_runtime_c -lrosidl_typesupport_c -lrcutils -lrmw_implementation
#cgo LDFLAGS: -ltrajectory_msgs__rosidl_typesupport_c -ltrajectory_msgs__rosidl_generator_c
#cgo LDFLAGS: -lbuiltin_interfaces__rosidl_typesupport_c -lbuiltin_interfaces__rosidl_generator_c

#cgo CFLAGS: -I/opt/ros/foxy/include

#include <rosidl_runtime_c/message_type_support_struct.h>
#include <trajectory_msgs/msg/joint_trajectory_point.h>
*/
import "C"

func init() {
	ros2_type_dispatcher.RegisterROS2MsgTypeNameAlias("trajectory_msgs/JointTrajectoryPoint", &JointTrajectoryPoint{})
}

// Do not create instances of this type directly. Always use NewJointTrajectoryPoint
// function instead.
type JointTrajectoryPoint struct {
	Positions []float64 `yaml:"positions"`// Single DOF joint positions for each joint relative to their "0" position.The units depend on the specific joint type: radians for revolute orcontinuous joints, and meters for prismatic joints.
	Velocities []float64 `yaml:"velocities"`// The rate of change in position of each joint. Units are joint type dependent.Radians/second for revolute or continuous joints, and meters/second forprismatic joints.
	Accelerations []float64 `yaml:"accelerations"`// Rate of change in velocity of each joint. Units are joint type dependent.Radians/second^2 for revolute or continuous joints, and meters/second^2 forprismatic joints.
	Effort []float64 `yaml:"effort"`// The torque or the force to be applied at each joint. For revolute/continuousjoints effort denotes a torque in newton-meters. For prismatic joints, effortdenotes a force in newtons.
	TimeFromStart builtin_interfaces.Duration `yaml:"time_from_start"`// Desired time from the trajectory start to arrive at this trajectory point.
}

// NewJointTrajectoryPoint creates a new JointTrajectoryPoint with default values.
func NewJointTrajectoryPoint() *JointTrajectoryPoint {
	self := JointTrajectoryPoint{}
	self.SetDefaults(nil)
	return &self
}

func (t *JointTrajectoryPoint) SetDefaults(d interface{}) ros2types.ROS2Msg {
	t.TimeFromStart.SetDefaults(nil)
	
	return t
}

func (t *JointTrajectoryPoint) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__trajectory_msgs__msg__JointTrajectoryPoint())
}
func (t *JointTrajectoryPoint) PrepareMemory() unsafe.Pointer { //returns *C.trajectory_msgs__msg__JointTrajectoryPoint
	return (unsafe.Pointer)(C.trajectory_msgs__msg__JointTrajectoryPoint__create())
}
func (t *JointTrajectoryPoint) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.trajectory_msgs__msg__JointTrajectoryPoint__destroy((*C.trajectory_msgs__msg__JointTrajectoryPoint)(pointer_to_free))
}
func (t *JointTrajectoryPoint) AsCStruct() unsafe.Pointer {
	mem := (*C.trajectory_msgs__msg__JointTrajectoryPoint)(t.PrepareMemory())
	rosidl_runtime_c.Float64__Sequence_to_C((*rosidl_runtime_c.CFloat64__Sequence)(unsafe.Pointer(&mem.positions)), t.Positions)
	rosidl_runtime_c.Float64__Sequence_to_C((*rosidl_runtime_c.CFloat64__Sequence)(unsafe.Pointer(&mem.velocities)), t.Velocities)
	rosidl_runtime_c.Float64__Sequence_to_C((*rosidl_runtime_c.CFloat64__Sequence)(unsafe.Pointer(&mem.accelerations)), t.Accelerations)
	rosidl_runtime_c.Float64__Sequence_to_C((*rosidl_runtime_c.CFloat64__Sequence)(unsafe.Pointer(&mem.effort)), t.Effort)
	mem.time_from_start = *(*C.builtin_interfaces__msg__Duration)(t.TimeFromStart.AsCStruct())
	return unsafe.Pointer(mem)
}
func (t *JointTrajectoryPoint) AsGoStruct(ros2_message_buffer unsafe.Pointer) {
	mem := (*C.trajectory_msgs__msg__JointTrajectoryPoint)(ros2_message_buffer)
	rosidl_runtime_c.Float64__Sequence_to_Go(&t.Positions, *(*rosidl_runtime_c.CFloat64__Sequence)(unsafe.Pointer(&mem.positions)))
	rosidl_runtime_c.Float64__Sequence_to_Go(&t.Velocities, *(*rosidl_runtime_c.CFloat64__Sequence)(unsafe.Pointer(&mem.velocities)))
	rosidl_runtime_c.Float64__Sequence_to_Go(&t.Accelerations, *(*rosidl_runtime_c.CFloat64__Sequence)(unsafe.Pointer(&mem.accelerations)))
	rosidl_runtime_c.Float64__Sequence_to_Go(&t.Effort, *(*rosidl_runtime_c.CFloat64__Sequence)(unsafe.Pointer(&mem.effort)))
	t.TimeFromStart.AsGoStruct(unsafe.Pointer(&mem.time_from_start))
}
func (t *JointTrajectoryPoint) Clone() ros2types.ROS2Msg {
	clone := *t
	return &clone
}

type CJointTrajectoryPoint = C.trajectory_msgs__msg__JointTrajectoryPoint
type CJointTrajectoryPoint__Sequence = C.trajectory_msgs__msg__JointTrajectoryPoint__Sequence

func JointTrajectoryPoint__Sequence_to_Go(goSlice *[]JointTrajectoryPoint, cSlice CJointTrajectoryPoint__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]JointTrajectoryPoint, int64(cSlice.size))
	for i := 0; i < int(cSlice.size); i++ {
		cIdx := (*C.trajectory_msgs__msg__JointTrajectoryPoint__Sequence)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_trajectory_msgs__msg__JointTrajectoryPoint * uintptr(i)),
		))
		(*goSlice)[i] = JointTrajectoryPoint{}
		(*goSlice)[i].AsGoStruct(unsafe.Pointer(cIdx))
	}
}
func JointTrajectoryPoint__Sequence_to_C(cSlice *CJointTrajectoryPoint__Sequence, goSlice []JointTrajectoryPoint) {
	if len(goSlice) == 0 {
		return
	}
	cSlice.data = (*C.trajectory_msgs__msg__JointTrajectoryPoint)(C.malloc((C.size_t)(C.sizeof_struct_trajectory_msgs__msg__JointTrajectoryPoint * uintptr(len(goSlice)))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity

	for i, v := range goSlice {
		cIdx := (*C.trajectory_msgs__msg__JointTrajectoryPoint)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_trajectory_msgs__msg__JointTrajectoryPoint * uintptr(i)),
		))
		*cIdx = *(*C.trajectory_msgs__msg__JointTrajectoryPoint)(v.AsCStruct())
	}
}
func JointTrajectoryPoint__Array_to_Go(goSlice []JointTrajectoryPoint, cSlice []CJointTrajectoryPoint) {
	for i := 0; i < len(cSlice); i++ {
		goSlice[i].AsGoStruct(unsafe.Pointer(&cSlice[i]))
	}
}
func JointTrajectoryPoint__Array_to_C(cSlice []CJointTrajectoryPoint, goSlice []JointTrajectoryPoint) {
	for i := 0; i < len(goSlice); i++ {
		cSlice[i] = *(*C.trajectory_msgs__msg__JointTrajectoryPoint)(goSlice[i].AsCStruct())
	}
}


