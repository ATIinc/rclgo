/*
This file is part of rclgo

Copyright Â© 2021 Technology Innovation Institute, United Arab Emirates

Licensed under the Apache License, Version 2.0 (the "License");
	http://www.apache.org/licenses/LICENSE-2.0
*/

/*
THIS FILE IS AUTOGENERATED BY 'rclgo-gen generate'
*/

package statistics_msgs
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/ros2/ros2types"
	"github.com/tiiuae/rclgo/pkg/ros2/ros2_type_dispatcher"
	builtin_interfaces "github.com/tiiuae/rclgo/pkg/ros2/msgs/builtin_interfaces/msg"
	rosidl_runtime_c "github.com/tiiuae/rclgo/pkg/ros2/rosidl_runtime_c"
	
)
/*
#cgo LDFLAGS: -L/opt/ros/foxy/lib -Wl,-rpath=/opt/ros/foxy/lib -lrcl -lrosidl_runtime_c -lrosidl_typesupport_c -lrcutils -lrmw_implementation
#cgo LDFLAGS: -lstatistics_msgs__rosidl_typesupport_c -lstatistics_msgs__rosidl_generator_c
#cgo LDFLAGS: -lbuiltin_interfaces__rosidl_typesupport_c -lbuiltin_interfaces__rosidl_generator_c

#cgo CFLAGS: -I/opt/ros/foxy/include

#include <rosidl_runtime_c/message_type_support_struct.h>
#include <statistics_msgs/msg/metrics_message.h>
*/
import "C"

func init() {
	ros2_type_dispatcher.RegisterROS2MsgTypeNameAlias("statistics_msgs/MetricsMessage", &MetricsMessage{})
}

// Do not create instances of this type directly. Always use NewMetricsMessage
// function instead.
type MetricsMessage struct {
	MeasurementSourceName rosidl_runtime_c.String `yaml:"measurement_source_name"`// Name metric measurement source, e.g., node, topic, or process name
	MetricsSource rosidl_runtime_c.String `yaml:"metrics_source"`// Name of the metric being measured, e.g. cpu_percentage, free_memory_mb, message_age, etc.
	Unit rosidl_runtime_c.String `yaml:"unit"`// Unit of measure of the metric, e.g. percent, mb, seconds, etc.
	WindowStart builtin_interfaces.Time `yaml:"window_start"`// Measurement window start time
	WindowStop builtin_interfaces.Time `yaml:"window_stop"`// Measurement window end time
	Statistics []StatisticDataPoint `yaml:"statistics"`// A list of statistics data point, defined in StatisticDataPoint.msg
}

// NewMetricsMessage creates a new MetricsMessage with default values.
func NewMetricsMessage() *MetricsMessage {
	self := MetricsMessage{}
	self.SetDefaults(nil)
	return &self
}

func (t *MetricsMessage) SetDefaults(d interface{}) ros2types.ROS2Msg {
	t.MeasurementSourceName.SetDefaults("")
	t.MetricsSource.SetDefaults("")
	t.Unit.SetDefaults("")
	t.WindowStart.SetDefaults(nil)
	t.WindowStop.SetDefaults(nil)
	
	return t
}

func (t *MetricsMessage) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__statistics_msgs__msg__MetricsMessage())
}
func (t *MetricsMessage) PrepareMemory() unsafe.Pointer { //returns *C.statistics_msgs__msg__MetricsMessage
	return (unsafe.Pointer)(C.statistics_msgs__msg__MetricsMessage__create())
}
func (t *MetricsMessage) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.statistics_msgs__msg__MetricsMessage__destroy((*C.statistics_msgs__msg__MetricsMessage)(pointer_to_free))
}
func (t *MetricsMessage) AsCStruct() unsafe.Pointer {
	mem := (*C.statistics_msgs__msg__MetricsMessage)(t.PrepareMemory())
	mem.measurement_source_name = *(*C.rosidl_runtime_c__String)(t.MeasurementSourceName.AsCStruct())
	mem.metrics_source = *(*C.rosidl_runtime_c__String)(t.MetricsSource.AsCStruct())
	mem.unit = *(*C.rosidl_runtime_c__String)(t.Unit.AsCStruct())
	mem.window_start = *(*C.builtin_interfaces__msg__Time)(t.WindowStart.AsCStruct())
	mem.window_stop = *(*C.builtin_interfaces__msg__Time)(t.WindowStop.AsCStruct())
	StatisticDataPoint__Sequence_to_C(&mem.statistics, t.Statistics)
	return unsafe.Pointer(mem)
}
func (t *MetricsMessage) AsGoStruct(ros2_message_buffer unsafe.Pointer) {
	mem := (*C.statistics_msgs__msg__MetricsMessage)(ros2_message_buffer)
	t.MeasurementSourceName.AsGoStruct(unsafe.Pointer(&mem.measurement_source_name))
	t.MetricsSource.AsGoStruct(unsafe.Pointer(&mem.metrics_source))
	t.Unit.AsGoStruct(unsafe.Pointer(&mem.unit))
	t.WindowStart.AsGoStruct(unsafe.Pointer(&mem.window_start))
	t.WindowStop.AsGoStruct(unsafe.Pointer(&mem.window_stop))
	StatisticDataPoint__Sequence_to_Go(&t.Statistics, mem.statistics)
}
func (t *MetricsMessage) Clone() ros2types.ROS2Msg {
	clone := *t
	return &clone
}

type CMetricsMessage = C.statistics_msgs__msg__MetricsMessage
type CMetricsMessage__Sequence = C.statistics_msgs__msg__MetricsMessage__Sequence

func MetricsMessage__Sequence_to_Go(goSlice *[]MetricsMessage, cSlice CMetricsMessage__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]MetricsMessage, int64(cSlice.size))
	for i := 0; i < int(cSlice.size); i++ {
		cIdx := (*C.statistics_msgs__msg__MetricsMessage__Sequence)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_statistics_msgs__msg__MetricsMessage * uintptr(i)),
		))
		(*goSlice)[i] = MetricsMessage{}
		(*goSlice)[i].AsGoStruct(unsafe.Pointer(cIdx))
	}
}
func MetricsMessage__Sequence_to_C(cSlice *CMetricsMessage__Sequence, goSlice []MetricsMessage) {
	if len(goSlice) == 0 {
		return
	}
	cSlice.data = (*C.statistics_msgs__msg__MetricsMessage)(C.malloc((C.size_t)(C.sizeof_struct_statistics_msgs__msg__MetricsMessage * uintptr(len(goSlice)))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity

	for i, v := range goSlice {
		cIdx := (*C.statistics_msgs__msg__MetricsMessage)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_statistics_msgs__msg__MetricsMessage * uintptr(i)),
		))
		*cIdx = *(*C.statistics_msgs__msg__MetricsMessage)(v.AsCStruct())
	}
}
func MetricsMessage__Array_to_Go(goSlice []MetricsMessage, cSlice []CMetricsMessage) {
	for i := 0; i < len(cSlice); i++ {
		goSlice[i].AsGoStruct(unsafe.Pointer(&cSlice[i]))
	}
}
func MetricsMessage__Array_to_C(cSlice []CMetricsMessage, goSlice []MetricsMessage) {
	for i := 0; i < len(goSlice); i++ {
		cSlice[i] = *(*C.statistics_msgs__msg__MetricsMessage)(goSlice[i].AsCStruct())
	}
}


