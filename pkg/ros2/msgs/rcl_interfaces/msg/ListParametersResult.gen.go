/*
This file is part of rclgo

Copyright Â© 2021 Technology Innovation Institute, United Arab Emirates

Licensed under the Apache License, Version 2.0 (the "License");
	http://www.apache.org/licenses/LICENSE-2.0
*/

/*
THIS FILE IS AUTOGENERATED BY 'rclgo-gen generate'
*/

package rcl_interfaces_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/ros2/types"
	"github.com/tiiuae/rclgo/pkg/ros2/ros2_type_dispatcher"
	rosidl_runtime_c "github.com/tiiuae/rclgo/pkg/ros2/rosidl_runtime_c"
	
)
/*
#cgo LDFLAGS: -L/opt/ros/foxy/lib -Wl,-rpath=/opt/ros/foxy/lib -lrcl -lrosidl_runtime_c -lrosidl_typesupport_c -lrcutils -lrmw_implementation
#cgo LDFLAGS: -lrcl_interfaces__rosidl_typesupport_c -lrcl_interfaces__rosidl_generator_c

#cgo CFLAGS: -I/opt/ros/foxy/include

#include <rosidl_runtime_c/message_type_support_struct.h>

#include <rcl_interfaces/msg/list_parameters_result.h>

*/
import "C"

func init() {
	ros2_type_dispatcher.RegisterROS2MsgTypeNameAlias("rcl_interfaces/ListParametersResult", ListParametersResultTypeSupport)
}

// Do not create instances of this type directly. Always use NewListParametersResult
// function instead.
type ListParametersResult struct {
	Names []string `yaml:"names"`// The resulting parameters under the given prefixes.
	Prefixes []string `yaml:"prefixes"`// The resulting prefixes under the given prefixes.TODO(wjwwood): link to prefix definition and rules.
}

// NewListParametersResult creates a new ListParametersResult with default values.
func NewListParametersResult() *ListParametersResult {
	self := ListParametersResult{}
	self.SetDefaults()
	return &self
}

func (t *ListParametersResult) Clone() types.Message {
	clone := *t
	return &clone
}

func (t *ListParametersResult) SetDefaults() {
	
}

// Modifying this variable is undefined behavior.
var ListParametersResultTypeSupport types.MessageTypeSupport = _ListParametersResultTypeSupport{}

type _ListParametersResultTypeSupport struct{}

func (t _ListParametersResultTypeSupport) New() types.Message {
	return NewListParametersResult()
}

func (t _ListParametersResultTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.rcl_interfaces__msg__ListParametersResult
	return (unsafe.Pointer)(C.rcl_interfaces__msg__ListParametersResult__create())
}

func (t _ListParametersResultTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.rcl_interfaces__msg__ListParametersResult__destroy((*C.rcl_interfaces__msg__ListParametersResult)(pointer_to_free))
}

func (t _ListParametersResultTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*ListParametersResult)
	mem := (*C.rcl_interfaces__msg__ListParametersResult)(dst)
	rosidl_runtime_c.String__Sequence_to_C((*rosidl_runtime_c.CString__Sequence)(unsafe.Pointer(&mem.names)), m.Names)
	rosidl_runtime_c.String__Sequence_to_C((*rosidl_runtime_c.CString__Sequence)(unsafe.Pointer(&mem.prefixes)), m.Prefixes)
}

func (t _ListParametersResultTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*ListParametersResult)
	mem := (*C.rcl_interfaces__msg__ListParametersResult)(ros2_message_buffer)
	rosidl_runtime_c.String__Sequence_to_Go(&m.Names, *(*rosidl_runtime_c.CString__Sequence)(unsafe.Pointer(&mem.names)))
	rosidl_runtime_c.String__Sequence_to_Go(&m.Prefixes, *(*rosidl_runtime_c.CString__Sequence)(unsafe.Pointer(&mem.prefixes)))
}

func (t _ListParametersResultTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__msg__ListParametersResult())
}

type CListParametersResult = C.rcl_interfaces__msg__ListParametersResult
type CListParametersResult__Sequence = C.rcl_interfaces__msg__ListParametersResult__Sequence

func ListParametersResult__Sequence_to_Go(goSlice *[]ListParametersResult, cSlice CListParametersResult__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]ListParametersResult, int64(cSlice.size))
	for i := 0; i < int(cSlice.size); i++ {
		cIdx := (*C.rcl_interfaces__msg__ListParametersResult__Sequence)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_rcl_interfaces__msg__ListParametersResult * uintptr(i)),
		))
		ListParametersResultTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(cIdx))
	}
}
func ListParametersResult__Sequence_to_C(cSlice *CListParametersResult__Sequence, goSlice []ListParametersResult) {
	if len(goSlice) == 0 {
		return
	}
	cSlice.data = (*C.rcl_interfaces__msg__ListParametersResult)(C.malloc((C.size_t)(C.sizeof_struct_rcl_interfaces__msg__ListParametersResult * uintptr(len(goSlice)))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity

	for i, v := range goSlice {
		cIdx := (*C.rcl_interfaces__msg__ListParametersResult)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_rcl_interfaces__msg__ListParametersResult * uintptr(i)),
		))
		ListParametersResultTypeSupport.AsCStruct(unsafe.Pointer(cIdx), &v)
	}
}
func ListParametersResult__Array_to_Go(goSlice []ListParametersResult, cSlice []CListParametersResult) {
	for i := 0; i < len(cSlice); i++ {
		ListParametersResultTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func ListParametersResult__Array_to_C(cSlice []CListParametersResult, goSlice []ListParametersResult) {
	for i := 0; i < len(goSlice); i++ {
		ListParametersResultTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
