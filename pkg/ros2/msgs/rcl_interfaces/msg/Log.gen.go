/*
This file is part of rclgo

Copyright Â© 2021 Technology Innovation Institute, United Arab Emirates

Licensed under the Apache License, Version 2.0 (the "License");
	http://www.apache.org/licenses/LICENSE-2.0
*/

/*
THIS FILE IS AUTOGENERATED BY 'rclgo-gen generate'
*/

package rcl_interfaces
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/ros2/ros2types"
	"github.com/tiiuae/rclgo/pkg/ros2/ros2_type_dispatcher"
	builtin_interfaces "github.com/tiiuae/rclgo/pkg/ros2/msgs/builtin_interfaces/msg"
	rosidl_runtime_c "github.com/tiiuae/rclgo/pkg/ros2/rosidl_runtime_c"
	
)
/*
#cgo LDFLAGS: -L/opt/ros/foxy/lib -Wl,-rpath=/opt/ros/foxy/lib -lrcl -lrosidl_runtime_c -lrosidl_typesupport_c -lrcutils -lrmw_implementation
#cgo LDFLAGS: -lrcl_interfaces__rosidl_typesupport_c -lrcl_interfaces__rosidl_generator_c
#cgo LDFLAGS: -lbuiltin_interfaces__rosidl_typesupport_c -lbuiltin_interfaces__rosidl_generator_c

#cgo CFLAGS: -I/opt/ros/foxy/include

#include <rosidl_runtime_c/message_type_support_struct.h>
#include <rcl_interfaces/msg/log.h>
*/
import "C"

func init() {
	ros2_type_dispatcher.RegisterROS2MsgTypeNameAlias("rcl_interfaces/Log", &Log{})
}
const (
	Log_DEBUG byte = 10// Debug is for pedantic information, which is useful when debugging issues.
	Log_INFO byte = 20// Info is the standard informational level and is used to report expectedinformation.
	Log_WARN byte = 30// Warning is for information that may potentially cause issues or possibly unexpectedbehavior.
	Log_ERROR byte = 40// Error is for information that this node cannot resolve.
	Log_FATAL byte = 50// Information about a impending node shutdown.
)

// Do not create instances of this type directly. Always use NewLog
// function instead.
type Log struct {
	Stamp builtin_interfaces.Time `yaml:"stamp"`// Timestamp when this message was generated by the node.
	Level uint8 `yaml:"level"`// Corresponding log level, see above definitions.
	Name rosidl_runtime_c.String `yaml:"name"`// The name representing the logger this message came from.
	Msg rosidl_runtime_c.String `yaml:"msg"`// The full log message.
	File rosidl_runtime_c.String `yaml:"file"`// The file the message came from.
	Function rosidl_runtime_c.String `yaml:"function"`// The function the message came from.
	Line uint32 `yaml:"line"`// The line in the file the message came from.
}

// NewLog creates a new Log with default values.
func NewLog() *Log {
	self := Log{}
	self.SetDefaults(nil)
	return &self
}

func (t *Log) SetDefaults(d interface{}) ros2types.ROS2Msg {
	t.Stamp.SetDefaults(nil)
	t.Name.SetDefaults("")
	t.Msg.SetDefaults("")
	t.File.SetDefaults("")
	t.Function.SetDefaults("")
	
	return t
}

func (t *Log) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__msg__Log())
}
func (t *Log) PrepareMemory() unsafe.Pointer { //returns *C.rcl_interfaces__msg__Log
	return (unsafe.Pointer)(C.rcl_interfaces__msg__Log__create())
}
func (t *Log) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.rcl_interfaces__msg__Log__destroy((*C.rcl_interfaces__msg__Log)(pointer_to_free))
}
func (t *Log) AsCStruct() unsafe.Pointer {
	mem := (*C.rcl_interfaces__msg__Log)(t.PrepareMemory())
	mem.stamp = *(*C.builtin_interfaces__msg__Time)(t.Stamp.AsCStruct())
	mem.level = C.uint8_t(t.Level)
	mem.name = *(*C.rosidl_runtime_c__String)(t.Name.AsCStruct())
	mem.msg = *(*C.rosidl_runtime_c__String)(t.Msg.AsCStruct())
	mem.file = *(*C.rosidl_runtime_c__String)(t.File.AsCStruct())
	mem.function = *(*C.rosidl_runtime_c__String)(t.Function.AsCStruct())
	mem.line = C.uint32_t(t.Line)
	return unsafe.Pointer(mem)
}
func (t *Log) AsGoStruct(ros2_message_buffer unsafe.Pointer) {
	mem := (*C.rcl_interfaces__msg__Log)(ros2_message_buffer)
	t.Stamp.AsGoStruct(unsafe.Pointer(&mem.stamp))
	t.Level = uint8(mem.level)
	t.Name.AsGoStruct(unsafe.Pointer(&mem.name))
	t.Msg.AsGoStruct(unsafe.Pointer(&mem.msg))
	t.File.AsGoStruct(unsafe.Pointer(&mem.file))
	t.Function.AsGoStruct(unsafe.Pointer(&mem.function))
	t.Line = uint32(mem.line)
}
func (t *Log) Clone() ros2types.ROS2Msg {
	clone := *t
	return &clone
}

type CLog = C.rcl_interfaces__msg__Log
type CLog__Sequence = C.rcl_interfaces__msg__Log__Sequence

func Log__Sequence_to_Go(goSlice *[]Log, cSlice CLog__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]Log, int64(cSlice.size))
	for i := 0; i < int(cSlice.size); i++ {
		cIdx := (*C.rcl_interfaces__msg__Log__Sequence)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_rcl_interfaces__msg__Log * uintptr(i)),
		))
		(*goSlice)[i] = Log{}
		(*goSlice)[i].AsGoStruct(unsafe.Pointer(cIdx))
	}
}
func Log__Sequence_to_C(cSlice *CLog__Sequence, goSlice []Log) {
	if len(goSlice) == 0 {
		return
	}
	cSlice.data = (*C.rcl_interfaces__msg__Log)(C.malloc((C.size_t)(C.sizeof_struct_rcl_interfaces__msg__Log * uintptr(len(goSlice)))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity

	for i, v := range goSlice {
		cIdx := (*C.rcl_interfaces__msg__Log)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_rcl_interfaces__msg__Log * uintptr(i)),
		))
		*cIdx = *(*C.rcl_interfaces__msg__Log)(v.AsCStruct())
	}
}
func Log__Array_to_Go(goSlice []Log, cSlice []CLog) {
	for i := 0; i < len(cSlice); i++ {
		goSlice[i].AsGoStruct(unsafe.Pointer(&cSlice[i]))
	}
}
func Log__Array_to_C(cSlice []CLog, goSlice []Log) {
	for i := 0; i < len(goSlice); i++ {
		cSlice[i] = *(*C.rcl_interfaces__msg__Log)(goSlice[i].AsCStruct())
	}
}


