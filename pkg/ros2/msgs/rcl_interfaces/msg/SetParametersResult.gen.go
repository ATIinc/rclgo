/*
This file is part of rclgo

Copyright Â© 2021 Technology Innovation Institute, United Arab Emirates

Licensed under the Apache License, Version 2.0 (the "License");
	http://www.apache.org/licenses/LICENSE-2.0
*/

/*
THIS FILE IS AUTOGENERATED BY 'rclgo-gen generate'
*/

package rcl_interfaces
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/ros2/ros2types"
	"github.com/tiiuae/rclgo/pkg/ros2/ros2_type_dispatcher"
	rosidl_runtime_c "github.com/tiiuae/rclgo/pkg/ros2/rosidl_runtime_c"
	
)
/*
#cgo LDFLAGS: -L/opt/ros/foxy/lib -Wl,-rpath=/opt/ros/foxy/lib -lrcl -lrosidl_runtime_c -lrosidl_typesupport_c -lrcutils -lrmw_implementation
#cgo LDFLAGS: -lrcl_interfaces__rosidl_typesupport_c -lrcl_interfaces__rosidl_generator_c

#cgo CFLAGS: -I/opt/ros/foxy/include

#include <rosidl_runtime_c/message_type_support_struct.h>
#include <rcl_interfaces/msg/set_parameters_result.h>
*/
import "C"

func init() {
	ros2_type_dispatcher.RegisterROS2MsgTypeNameAlias("rcl_interfaces/SetParametersResult", &SetParametersResult{})
}

// Do not create instances of this type directly. Always use NewSetParametersResult
// function instead.
type SetParametersResult struct {
	Successful bool `yaml:"successful"`// A true value of the same index indicates that the parameter was setsuccessfully. A false value indicates the change was rejected.
	Reason rosidl_runtime_c.String `yaml:"reason"`// Reason why the setting was either successful or a failure. This should only beused for logging and user interfaces.
}

// NewSetParametersResult creates a new SetParametersResult with default values.
func NewSetParametersResult() *SetParametersResult {
	self := SetParametersResult{}
	self.SetDefaults(nil)
	return &self
}

func (t *SetParametersResult) SetDefaults(d interface{}) ros2types.ROS2Msg {
	t.Reason.SetDefaults("")
	
	return t
}

func (t *SetParametersResult) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__msg__SetParametersResult())
}
func (t *SetParametersResult) PrepareMemory() unsafe.Pointer { //returns *C.rcl_interfaces__msg__SetParametersResult
	return (unsafe.Pointer)(C.rcl_interfaces__msg__SetParametersResult__create())
}
func (t *SetParametersResult) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.rcl_interfaces__msg__SetParametersResult__destroy((*C.rcl_interfaces__msg__SetParametersResult)(pointer_to_free))
}
func (t *SetParametersResult) AsCStruct() unsafe.Pointer {
	mem := (*C.rcl_interfaces__msg__SetParametersResult)(t.PrepareMemory())
	mem.successful = C.bool(t.Successful)
	mem.reason = *(*C.rosidl_runtime_c__String)(t.Reason.AsCStruct())
	return unsafe.Pointer(mem)
}
func (t *SetParametersResult) AsGoStruct(ros2_message_buffer unsafe.Pointer) {
	mem := (*C.rcl_interfaces__msg__SetParametersResult)(ros2_message_buffer)
	t.Successful = bool(mem.successful)
	t.Reason.AsGoStruct(unsafe.Pointer(&mem.reason))
}
func (t *SetParametersResult) Clone() ros2types.ROS2Msg {
	clone := *t
	return &clone
}

type CSetParametersResult = C.rcl_interfaces__msg__SetParametersResult
type CSetParametersResult__Sequence = C.rcl_interfaces__msg__SetParametersResult__Sequence

func SetParametersResult__Sequence_to_Go(goSlice *[]SetParametersResult, cSlice CSetParametersResult__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]SetParametersResult, int64(cSlice.size))
	for i := 0; i < int(cSlice.size); i++ {
		cIdx := (*C.rcl_interfaces__msg__SetParametersResult__Sequence)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_rcl_interfaces__msg__SetParametersResult * uintptr(i)),
		))
		(*goSlice)[i] = SetParametersResult{}
		(*goSlice)[i].AsGoStruct(unsafe.Pointer(cIdx))
	}
}
func SetParametersResult__Sequence_to_C(cSlice *CSetParametersResult__Sequence, goSlice []SetParametersResult) {
	if len(goSlice) == 0 {
		return
	}
	cSlice.data = (*C.rcl_interfaces__msg__SetParametersResult)(C.malloc((C.size_t)(C.sizeof_struct_rcl_interfaces__msg__SetParametersResult * uintptr(len(goSlice)))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity

	for i, v := range goSlice {
		cIdx := (*C.rcl_interfaces__msg__SetParametersResult)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_rcl_interfaces__msg__SetParametersResult * uintptr(i)),
		))
		*cIdx = *(*C.rcl_interfaces__msg__SetParametersResult)(v.AsCStruct())
	}
}
func SetParametersResult__Array_to_Go(goSlice []SetParametersResult, cSlice []CSetParametersResult) {
	for i := 0; i < len(cSlice); i++ {
		goSlice[i].AsGoStruct(unsafe.Pointer(&cSlice[i]))
	}
}
func SetParametersResult__Array_to_C(cSlice []CSetParametersResult, goSlice []SetParametersResult) {
	for i := 0; i < len(goSlice); i++ {
		cSlice[i] = *(*C.rcl_interfaces__msg__SetParametersResult)(goSlice[i].AsCStruct())
	}
}


