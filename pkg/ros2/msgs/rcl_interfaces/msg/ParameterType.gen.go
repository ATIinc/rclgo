/*
This file is part of rclgo

Copyright Â© 2021 Technology Innovation Institute, United Arab Emirates

Licensed under the Apache License, Version 2.0 (the "License");
	http://www.apache.org/licenses/LICENSE-2.0
*/

/*
THIS FILE IS AUTOGENERATED BY 'rclgo-gen generate'
*/

package rcl_interfaces
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/ros2/ros2types"
	"github.com/tiiuae/rclgo/pkg/ros2/ros2_type_dispatcher"
	
)
/*
#cgo LDFLAGS: -L/opt/ros/foxy/lib -Wl,-rpath=/opt/ros/foxy/lib -lrcl -lrosidl_runtime_c -lrosidl_typesupport_c -lrcutils -lrmw_implementation
#cgo LDFLAGS: -lrcl_interfaces__rosidl_typesupport_c -lrcl_interfaces__rosidl_generator_c

#cgo CFLAGS: -I/opt/ros/foxy/include

#include <rosidl_runtime_c/message_type_support_struct.h>
#include <rcl_interfaces/msg/parameter_type.h>
*/
import "C"

func init() {
	ros2_type_dispatcher.RegisterROS2MsgTypeNameAlias("rcl_interfaces/ParameterType", &ParameterType{})
}
const (
	ParameterType_PARAMETER_NOT_SET uint8 = 0// Default value, which implies this is not a valid parameter.
	ParameterType_PARAMETER_BOOL uint8 = 1
	ParameterType_PARAMETER_INTEGER uint8 = 2
	ParameterType_PARAMETER_DOUBLE uint8 = 3
	ParameterType_PARAMETER_STRING uint8 = 4
	ParameterType_PARAMETER_BYTE_ARRAY uint8 = 5
	ParameterType_PARAMETER_BOOL_ARRAY uint8 = 6
	ParameterType_PARAMETER_INTEGER_ARRAY uint8 = 7
	ParameterType_PARAMETER_DOUBLE_ARRAY uint8 = 8
	ParameterType_PARAMETER_STRING_ARRAY uint8 = 9
)

// Do not create instances of this type directly. Always use NewParameterType
// function instead.
type ParameterType struct {
}

// NewParameterType creates a new ParameterType with default values.
func NewParameterType() *ParameterType {
	self := ParameterType{}
	self.SetDefaults(nil)
	return &self
}

func (t *ParameterType) SetDefaults(d interface{}) ros2types.ROS2Msg {
	
	return t
}

func (t *ParameterType) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__msg__ParameterType())
}
func (t *ParameterType) PrepareMemory() unsafe.Pointer { //returns *C.rcl_interfaces__msg__ParameterType
	return (unsafe.Pointer)(C.rcl_interfaces__msg__ParameterType__create())
}
func (t *ParameterType) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.rcl_interfaces__msg__ParameterType__destroy((*C.rcl_interfaces__msg__ParameterType)(pointer_to_free))
}
func (t *ParameterType) AsCStruct() unsafe.Pointer {
	mem := (*C.rcl_interfaces__msg__ParameterType)(t.PrepareMemory())
	return unsafe.Pointer(mem)
}
func (t *ParameterType) AsGoStruct(ros2_message_buffer unsafe.Pointer) {
	
}
func (t *ParameterType) Clone() ros2types.ROS2Msg {
	clone := *t
	return &clone
}

type CParameterType = C.rcl_interfaces__msg__ParameterType
type CParameterType__Sequence = C.rcl_interfaces__msg__ParameterType__Sequence

func ParameterType__Sequence_to_Go(goSlice *[]ParameterType, cSlice CParameterType__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]ParameterType, int64(cSlice.size))
	for i := 0; i < int(cSlice.size); i++ {
		cIdx := (*C.rcl_interfaces__msg__ParameterType__Sequence)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_rcl_interfaces__msg__ParameterType * uintptr(i)),
		))
		(*goSlice)[i] = ParameterType{}
		(*goSlice)[i].AsGoStruct(unsafe.Pointer(cIdx))
	}
}
func ParameterType__Sequence_to_C(cSlice *CParameterType__Sequence, goSlice []ParameterType) {
	if len(goSlice) == 0 {
		return
	}
	cSlice.data = (*C.rcl_interfaces__msg__ParameterType)(C.malloc((C.size_t)(C.sizeof_struct_rcl_interfaces__msg__ParameterType * uintptr(len(goSlice)))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity

	for i, v := range goSlice {
		cIdx := (*C.rcl_interfaces__msg__ParameterType)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_rcl_interfaces__msg__ParameterType * uintptr(i)),
		))
		*cIdx = *(*C.rcl_interfaces__msg__ParameterType)(v.AsCStruct())
	}
}
func ParameterType__Array_to_Go(goSlice []ParameterType, cSlice []CParameterType) {
	for i := 0; i < len(cSlice); i++ {
		goSlice[i].AsGoStruct(unsafe.Pointer(&cSlice[i]))
	}
}
func ParameterType__Array_to_C(cSlice []CParameterType, goSlice []ParameterType) {
	for i := 0; i < len(goSlice); i++ {
		cSlice[i] = *(*C.rcl_interfaces__msg__ParameterType)(goSlice[i].AsCStruct())
	}
}


