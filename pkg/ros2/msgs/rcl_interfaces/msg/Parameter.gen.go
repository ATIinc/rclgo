/*
This file is part of rclgo

Copyright Â© 2021 Technology Innovation Institute, United Arab Emirates

Licensed under the Apache License, Version 2.0 (the "License");
	http://www.apache.org/licenses/LICENSE-2.0
*/

/*
THIS FILE IS AUTOGENERATED BY 'rclgo-gen generate'
*/

package rcl_interfaces
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/ros2/ros2types"
	"github.com/tiiuae/rclgo/pkg/ros2/ros2_type_dispatcher"
	rosidl_runtime_c "github.com/tiiuae/rclgo/pkg/ros2/rosidl_runtime_c"
	
)
/*
#cgo LDFLAGS: -L/opt/ros/foxy/lib -Wl,-rpath=/opt/ros/foxy/lib -lrcl -lrosidl_runtime_c -lrosidl_typesupport_c -lrcutils -lrmw_implementation
#cgo LDFLAGS: -lrcl_interfaces__rosidl_typesupport_c -lrcl_interfaces__rosidl_generator_c

#cgo CFLAGS: -I/opt/ros/foxy/include

#include <rosidl_runtime_c/message_type_support_struct.h>
#include <rcl_interfaces/msg/parameter.h>
*/
import "C"

func init() {
	ros2_type_dispatcher.RegisterROS2MsgTypeNameAlias("rcl_interfaces/Parameter", &Parameter{})
}

// Do not create instances of this type directly. Always use NewParameter
// function instead.
type Parameter struct {
	Name rosidl_runtime_c.String `yaml:"name"`// The full name of the parameter.
	Value ParameterValue `yaml:"value"`// The parameter's value which can be one of several types, see`ParameterValue.msg` and `ParameterType.msg`.
}

// NewParameter creates a new Parameter with default values.
func NewParameter() *Parameter {
	self := Parameter{}
	self.SetDefaults(nil)
	return &self
}

func (t *Parameter) SetDefaults(d interface{}) ros2types.ROS2Msg {
	t.Name.SetDefaults("")
	t.Value.SetDefaults(nil)
	
	return t
}

func (t *Parameter) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__msg__Parameter())
}
func (t *Parameter) PrepareMemory() unsafe.Pointer { //returns *C.rcl_interfaces__msg__Parameter
	return (unsafe.Pointer)(C.rcl_interfaces__msg__Parameter__create())
}
func (t *Parameter) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.rcl_interfaces__msg__Parameter__destroy((*C.rcl_interfaces__msg__Parameter)(pointer_to_free))
}
func (t *Parameter) AsCStruct() unsafe.Pointer {
	mem := (*C.rcl_interfaces__msg__Parameter)(t.PrepareMemory())
	mem.name = *(*C.rosidl_runtime_c__String)(t.Name.AsCStruct())
	mem.value = *(*C.rcl_interfaces__msg__ParameterValue)(t.Value.AsCStruct())
	return unsafe.Pointer(mem)
}
func (t *Parameter) AsGoStruct(ros2_message_buffer unsafe.Pointer) {
	mem := (*C.rcl_interfaces__msg__Parameter)(ros2_message_buffer)
	t.Name.AsGoStruct(unsafe.Pointer(&mem.name))
	t.Value.AsGoStruct(unsafe.Pointer(&mem.value))
}
func (t *Parameter) Clone() ros2types.ROS2Msg {
	clone := *t
	return &clone
}

type CParameter = C.rcl_interfaces__msg__Parameter
type CParameter__Sequence = C.rcl_interfaces__msg__Parameter__Sequence

func Parameter__Sequence_to_Go(goSlice *[]Parameter, cSlice CParameter__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]Parameter, int64(cSlice.size))
	for i := 0; i < int(cSlice.size); i++ {
		cIdx := (*C.rcl_interfaces__msg__Parameter__Sequence)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_rcl_interfaces__msg__Parameter * uintptr(i)),
		))
		(*goSlice)[i] = Parameter{}
		(*goSlice)[i].AsGoStruct(unsafe.Pointer(cIdx))
	}
}
func Parameter__Sequence_to_C(cSlice *CParameter__Sequence, goSlice []Parameter) {
	if len(goSlice) == 0 {
		return
	}
	cSlice.data = (*C.rcl_interfaces__msg__Parameter)(C.malloc((C.size_t)(C.sizeof_struct_rcl_interfaces__msg__Parameter * uintptr(len(goSlice)))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity

	for i, v := range goSlice {
		cIdx := (*C.rcl_interfaces__msg__Parameter)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_rcl_interfaces__msg__Parameter * uintptr(i)),
		))
		*cIdx = *(*C.rcl_interfaces__msg__Parameter)(v.AsCStruct())
	}
}
func Parameter__Array_to_Go(goSlice []Parameter, cSlice []CParameter) {
	for i := 0; i < len(cSlice); i++ {
		goSlice[i].AsGoStruct(unsafe.Pointer(&cSlice[i]))
	}
}
func Parameter__Array_to_C(cSlice []CParameter, goSlice []Parameter) {
	for i := 0; i < len(goSlice); i++ {
		cSlice[i] = *(*C.rcl_interfaces__msg__Parameter)(goSlice[i].AsCStruct())
	}
}


