/*
This file is part of rclgo

Copyright Â© 2021 Technology Innovation Institute, United Arab Emirates

Licensed under the Apache License, Version 2.0 (the "License");
	http://www.apache.org/licenses/LICENSE-2.0
*/

/*
THIS FILE IS AUTOGENERATED BY 'rclgo-gen generate'
*/

package rcl_interfaces_srv
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/ros2/ros2types"
	"github.com/tiiuae/rclgo/pkg/ros2/ros2_type_dispatcher"
	rosidl_runtime_c "github.com/tiiuae/rclgo/pkg/ros2/rosidl_runtime_c"
	
)
/*
#cgo LDFLAGS: -L/opt/ros/foxy/lib -Wl,-rpath=/opt/ros/foxy/lib -lrcl -lrosidl_runtime_c -lrosidl_typesupport_c -lrcutils -lrmw_implementation
#cgo LDFLAGS: -lrcl_interfaces__rosidl_typesupport_c -lrcl_interfaces__rosidl_generator_c

#cgo CFLAGS: -I/opt/ros/foxy/include

#include <rosidl_runtime_c/message_type_support_struct.h>

#include <rcl_interfaces/srv/describe_parameters.h>

*/
import "C"

func init() {
	ros2_type_dispatcher.RegisterROS2MsgTypeNameAlias("rcl_interfaces/DescribeParameters_Request", &DescribeParameters_Request{})
}

// Do not create instances of this type directly. Always use NewDescribeParameters_Request
// function instead.
type DescribeParameters_Request struct {
	Names []rosidl_runtime_c.String `yaml:"names"`// A list of parameters of which to get the descriptor.
}

// NewDescribeParameters_Request creates a new DescribeParameters_Request with default values.
func NewDescribeParameters_Request() *DescribeParameters_Request {
	self := DescribeParameters_Request{}
	self.SetDefaults(nil)
	return &self
}

func (t *DescribeParameters_Request) SetDefaults(d interface{}) ros2types.ROS2Msg {
	
	return t
}

func (t *DescribeParameters_Request) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__srv__DescribeParameters_Request())
}
func (t *DescribeParameters_Request) PrepareMemory() unsafe.Pointer { //returns *C.rcl_interfaces__srv__DescribeParameters_Request
	return (unsafe.Pointer)(C.rcl_interfaces__srv__DescribeParameters_Request__create())
}
func (t *DescribeParameters_Request) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.rcl_interfaces__srv__DescribeParameters_Request__destroy((*C.rcl_interfaces__srv__DescribeParameters_Request)(pointer_to_free))
}
func (t *DescribeParameters_Request) AsCStruct() unsafe.Pointer {
	mem := (*C.rcl_interfaces__srv__DescribeParameters_Request)(t.PrepareMemory())
	rosidl_runtime_c.String__Sequence_to_C((*rosidl_runtime_c.CString__Sequence)(unsafe.Pointer(&mem.names)), t.Names)
	return unsafe.Pointer(mem)
}
func (t *DescribeParameters_Request) AsGoStruct(ros2_message_buffer unsafe.Pointer) {
	mem := (*C.rcl_interfaces__srv__DescribeParameters_Request)(ros2_message_buffer)
	rosidl_runtime_c.String__Sequence_to_Go(&t.Names, *(*rosidl_runtime_c.CString__Sequence)(unsafe.Pointer(&mem.names)))
}
func (t *DescribeParameters_Request) Clone() ros2types.ROS2Msg {
	clone := *t
	return &clone
}

type CDescribeParameters_Request = C.rcl_interfaces__srv__DescribeParameters_Request
type CDescribeParameters_Request__Sequence = C.rcl_interfaces__srv__DescribeParameters_Request__Sequence

func DescribeParameters_Request__Sequence_to_Go(goSlice *[]DescribeParameters_Request, cSlice CDescribeParameters_Request__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]DescribeParameters_Request, int64(cSlice.size))
	for i := 0; i < int(cSlice.size); i++ {
		cIdx := (*C.rcl_interfaces__srv__DescribeParameters_Request__Sequence)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_rcl_interfaces__srv__DescribeParameters_Request * uintptr(i)),
		))
		(*goSlice)[i] = DescribeParameters_Request{}
		(*goSlice)[i].AsGoStruct(unsafe.Pointer(cIdx))
	}
}
func DescribeParameters_Request__Sequence_to_C(cSlice *CDescribeParameters_Request__Sequence, goSlice []DescribeParameters_Request) {
	if len(goSlice) == 0 {
		return
	}
	cSlice.data = (*C.rcl_interfaces__srv__DescribeParameters_Request)(C.malloc((C.size_t)(C.sizeof_struct_rcl_interfaces__srv__DescribeParameters_Request * uintptr(len(goSlice)))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity

	for i, v := range goSlice {
		cIdx := (*C.rcl_interfaces__srv__DescribeParameters_Request)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_rcl_interfaces__srv__DescribeParameters_Request * uintptr(i)),
		))
		*cIdx = *(*C.rcl_interfaces__srv__DescribeParameters_Request)(v.AsCStruct())
	}
}
func DescribeParameters_Request__Array_to_Go(goSlice []DescribeParameters_Request, cSlice []CDescribeParameters_Request) {
	for i := 0; i < len(cSlice); i++ {
		goSlice[i].AsGoStruct(unsafe.Pointer(&cSlice[i]))
	}
}
func DescribeParameters_Request__Array_to_C(cSlice []CDescribeParameters_Request, goSlice []DescribeParameters_Request) {
	for i := 0; i < len(goSlice); i++ {
		cSlice[i] = *(*C.rcl_interfaces__srv__DescribeParameters_Request)(goSlice[i].AsCStruct())
	}
}


