/*
This file is part of rclgo

Copyright Â© 2021 Technology Innovation Institute, United Arab Emirates

Licensed under the Apache License, Version 2.0 (the "License");
	http://www.apache.org/licenses/LICENSE-2.0
*/

/*
THIS FILE IS AUTOGENERATED BY 'rclgo-gen generate'
*/

package px4_msgs
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/ros2/ros2types"
	"github.com/tiiuae/rclgo/pkg/ros2/ros2_type_dispatcher"
	rosidl_runtime_c "github.com/tiiuae/rclgo/pkg/ros2/rosidl_runtime_c"
	
)
/*
#cgo LDFLAGS: -L/opt/ros/foxy/lib -Wl,-rpath=/opt/ros/foxy/lib -lrcl -lrosidl_runtime_c -lrosidl_typesupport_c -lrcutils -lrmw_implementation
#cgo LDFLAGS: -lpx4_msgs__rosidl_typesupport_c -lpx4_msgs__rosidl_generator_c

#cgo CFLAGS: -I/opt/ros/foxy/include

#include <rosidl_runtime_c/message_type_support_struct.h>
#include <px4_msgs/msg/satellite_info.h>
*/
import "C"

func init() {
	ros2_type_dispatcher.RegisterROS2MsgTypeNameAlias("px4_msgs/SatelliteInfo", &SatelliteInfo{})
}
const (
	SatelliteInfo_SAT_INFO_MAX_SATELLITES uint8 = 20
)

// Do not create instances of this type directly. Always use NewSatelliteInfo
// function instead.
type SatelliteInfo struct {
	Timestamp uint64 `yaml:"timestamp"`// time since system start (microseconds)
	Count uint8 `yaml:"count"`// Number of satellites visible to the receiver
	Svid [20]uint8 `yaml:"svid"`// Space vehicle ID [1..255], see scheme below
	Used [20]uint8 `yaml:"used"`// 0: Satellite not used, 1: used for navigation
	Elevation [20]uint8 `yaml:"elevation"`// Elevation (0: right on top of receiver, 90: on the horizon) of satellite
	Azimuth [20]uint8 `yaml:"azimuth"`// Direction of satellite, 0: 0 deg, 255: 360 deg.
	Snr [20]uint8 `yaml:"snr"`// dBHz, Signal to noise ratio of satellite C/N0, range 0..99, zero when not tracking this satellite.
	Prn [20]uint8 `yaml:"prn"`// Satellite PRN code assignment, (psuedorandom number SBAS, valid codes are 120-144)
}

// NewSatelliteInfo creates a new SatelliteInfo with default values.
func NewSatelliteInfo() *SatelliteInfo {
	self := SatelliteInfo{}
	self.SetDefaults(nil)
	return &self
}

func (t *SatelliteInfo) SetDefaults(d interface{}) ros2types.ROS2Msg {
	
	return t
}

func (t *SatelliteInfo) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__SatelliteInfo())
}
func (t *SatelliteInfo) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__SatelliteInfo
	return (unsafe.Pointer)(C.px4_msgs__msg__SatelliteInfo__create())
}
func (t *SatelliteInfo) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__SatelliteInfo__destroy((*C.px4_msgs__msg__SatelliteInfo)(pointer_to_free))
}
func (t *SatelliteInfo) AsCStruct() unsafe.Pointer {
	mem := (*C.px4_msgs__msg__SatelliteInfo)(t.PrepareMemory())
	mem.timestamp = C.uint64_t(t.Timestamp)
	mem.count = C.uint8_t(t.Count)
	cSlice_svid := mem.svid[:]
	rosidl_runtime_c.Uint8__Array_to_C(*(*[]rosidl_runtime_c.CUint8)(unsafe.Pointer(&cSlice_svid)), t.Svid[:])
	cSlice_used := mem.used[:]
	rosidl_runtime_c.Uint8__Array_to_C(*(*[]rosidl_runtime_c.CUint8)(unsafe.Pointer(&cSlice_used)), t.Used[:])
	cSlice_elevation := mem.elevation[:]
	rosidl_runtime_c.Uint8__Array_to_C(*(*[]rosidl_runtime_c.CUint8)(unsafe.Pointer(&cSlice_elevation)), t.Elevation[:])
	cSlice_azimuth := mem.azimuth[:]
	rosidl_runtime_c.Uint8__Array_to_C(*(*[]rosidl_runtime_c.CUint8)(unsafe.Pointer(&cSlice_azimuth)), t.Azimuth[:])
	cSlice_snr := mem.snr[:]
	rosidl_runtime_c.Uint8__Array_to_C(*(*[]rosidl_runtime_c.CUint8)(unsafe.Pointer(&cSlice_snr)), t.Snr[:])
	cSlice_prn := mem.prn[:]
	rosidl_runtime_c.Uint8__Array_to_C(*(*[]rosidl_runtime_c.CUint8)(unsafe.Pointer(&cSlice_prn)), t.Prn[:])
	return unsafe.Pointer(mem)
}
func (t *SatelliteInfo) AsGoStruct(ros2_message_buffer unsafe.Pointer) {
	mem := (*C.px4_msgs__msg__SatelliteInfo)(ros2_message_buffer)
	t.Timestamp = uint64(mem.timestamp)
	t.Count = uint8(mem.count)
	cSlice_svid := mem.svid[:]
	rosidl_runtime_c.Uint8__Array_to_Go(t.Svid[:], *(*[]rosidl_runtime_c.CUint8)(unsafe.Pointer(&cSlice_svid)))
	cSlice_used := mem.used[:]
	rosidl_runtime_c.Uint8__Array_to_Go(t.Used[:], *(*[]rosidl_runtime_c.CUint8)(unsafe.Pointer(&cSlice_used)))
	cSlice_elevation := mem.elevation[:]
	rosidl_runtime_c.Uint8__Array_to_Go(t.Elevation[:], *(*[]rosidl_runtime_c.CUint8)(unsafe.Pointer(&cSlice_elevation)))
	cSlice_azimuth := mem.azimuth[:]
	rosidl_runtime_c.Uint8__Array_to_Go(t.Azimuth[:], *(*[]rosidl_runtime_c.CUint8)(unsafe.Pointer(&cSlice_azimuth)))
	cSlice_snr := mem.snr[:]
	rosidl_runtime_c.Uint8__Array_to_Go(t.Snr[:], *(*[]rosidl_runtime_c.CUint8)(unsafe.Pointer(&cSlice_snr)))
	cSlice_prn := mem.prn[:]
	rosidl_runtime_c.Uint8__Array_to_Go(t.Prn[:], *(*[]rosidl_runtime_c.CUint8)(unsafe.Pointer(&cSlice_prn)))
}
func (t *SatelliteInfo) Clone() ros2types.ROS2Msg {
	clone := *t
	return &clone
}

type CSatelliteInfo = C.px4_msgs__msg__SatelliteInfo
type CSatelliteInfo__Sequence = C.px4_msgs__msg__SatelliteInfo__Sequence

func SatelliteInfo__Sequence_to_Go(goSlice *[]SatelliteInfo, cSlice CSatelliteInfo__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]SatelliteInfo, int64(cSlice.size))
	for i := 0; i < int(cSlice.size); i++ {
		cIdx := (*C.px4_msgs__msg__SatelliteInfo__Sequence)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_px4_msgs__msg__SatelliteInfo * uintptr(i)),
		))
		(*goSlice)[i] = SatelliteInfo{}
		(*goSlice)[i].AsGoStruct(unsafe.Pointer(cIdx))
	}
}
func SatelliteInfo__Sequence_to_C(cSlice *CSatelliteInfo__Sequence, goSlice []SatelliteInfo) {
	if len(goSlice) == 0 {
		return
	}
	cSlice.data = (*C.px4_msgs__msg__SatelliteInfo)(C.malloc((C.size_t)(C.sizeof_struct_px4_msgs__msg__SatelliteInfo * uintptr(len(goSlice)))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity

	for i, v := range goSlice {
		cIdx := (*C.px4_msgs__msg__SatelliteInfo)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_px4_msgs__msg__SatelliteInfo * uintptr(i)),
		))
		*cIdx = *(*C.px4_msgs__msg__SatelliteInfo)(v.AsCStruct())
	}
}
func SatelliteInfo__Array_to_Go(goSlice []SatelliteInfo, cSlice []CSatelliteInfo) {
	for i := 0; i < len(cSlice); i++ {
		goSlice[i].AsGoStruct(unsafe.Pointer(&cSlice[i]))
	}
}
func SatelliteInfo__Array_to_C(cSlice []CSatelliteInfo, goSlice []SatelliteInfo) {
	for i := 0; i < len(goSlice); i++ {
		cSlice[i] = *(*C.px4_msgs__msg__SatelliteInfo)(goSlice[i].AsCStruct())
	}
}


