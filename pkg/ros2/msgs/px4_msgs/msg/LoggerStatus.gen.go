/*
This file is part of rclgo

Copyright Â© 2021 Technology Innovation Institute, United Arab Emirates

Licensed under the Apache License, Version 2.0 (the "License");
	http://www.apache.org/licenses/LICENSE-2.0
*/

/*
THIS FILE IS AUTOGENERATED BY 'rclgo-gen generate'
*/

package px4_msgs
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/ros2/ros2types"
	"github.com/tiiuae/rclgo/pkg/ros2/ros2_type_dispatcher"
	
)
/*
#cgo LDFLAGS: -L/opt/ros/foxy/lib -Wl,-rpath=/opt/ros/foxy/lib -lrcl -lrosidl_runtime_c -lrosidl_typesupport_c -lrcutils -lrmw_implementation
#cgo LDFLAGS: -lpx4_msgs__rosidl_typesupport_c -lpx4_msgs__rosidl_generator_c

#cgo CFLAGS: -I/opt/ros/foxy/include

#include <rosidl_runtime_c/message_type_support_struct.h>
#include <px4_msgs/msg/logger_status.h>
*/
import "C"

func init() {
	ros2_type_dispatcher.RegisterROS2MsgTypeNameAlias("px4_msgs/LoggerStatus", &LoggerStatus{})
}
const (
	LoggerStatus_LOGGER_TYPE_FULL uint8 = 0// Normal, full size log
	LoggerStatus_LOGGER_TYPE_MISSION uint8 = 1// reduced mission log (e.g. for geotagging)
	LoggerStatus_BACKEND_FILE uint8 = 1
	LoggerStatus_BACKEND_MAVLINK uint8 = 2
	LoggerStatus_BACKEND_ALL uint8 = 3
)

// Do not create instances of this type directly. Always use NewLoggerStatus
// function instead.
type LoggerStatus struct {
	Timestamp uint64 `yaml:"timestamp"`// time since system start (microseconds)
	Type uint8 `yaml:"type"`
	Backend uint8 `yaml:"backend"`
	TotalWrittenKb float32 `yaml:"total_written_kb"`// total written to log in kiloBytes
	WriteRateKbS float32 `yaml:"write_rate_kb_s"`// write rate in kiloBytes/s
	Dropouts uint32 `yaml:"dropouts"`// number of failed buffer writes due to buffer overflow
	MessageGaps uint32 `yaml:"message_gaps"`// messages misssed
	BufferUsedBytes uint32 `yaml:"buffer_used_bytes"`// current buffer fill in Bytes
	BufferSizeBytes uint32 `yaml:"buffer_size_bytes"`// total buffer size in Bytes
	NumMessages uint8 `yaml:"num_messages"`
}

// NewLoggerStatus creates a new LoggerStatus with default values.
func NewLoggerStatus() *LoggerStatus {
	self := LoggerStatus{}
	self.SetDefaults(nil)
	return &self
}

func (t *LoggerStatus) SetDefaults(d interface{}) ros2types.ROS2Msg {
	
	return t
}

func (t *LoggerStatus) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__LoggerStatus())
}
func (t *LoggerStatus) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__LoggerStatus
	return (unsafe.Pointer)(C.px4_msgs__msg__LoggerStatus__create())
}
func (t *LoggerStatus) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__LoggerStatus__destroy((*C.px4_msgs__msg__LoggerStatus)(pointer_to_free))
}
func (t *LoggerStatus) AsCStruct() unsafe.Pointer {
	mem := (*C.px4_msgs__msg__LoggerStatus)(t.PrepareMemory())
	mem.timestamp = C.uint64_t(t.Timestamp)
	mem._type = C.uint8_t(t.Type)
	mem.backend = C.uint8_t(t.Backend)
	mem.total_written_kb = C.float(t.TotalWrittenKb)
	mem.write_rate_kb_s = C.float(t.WriteRateKbS)
	mem.dropouts = C.uint32_t(t.Dropouts)
	mem.message_gaps = C.uint32_t(t.MessageGaps)
	mem.buffer_used_bytes = C.uint32_t(t.BufferUsedBytes)
	mem.buffer_size_bytes = C.uint32_t(t.BufferSizeBytes)
	mem.num_messages = C.uint8_t(t.NumMessages)
	return unsafe.Pointer(mem)
}
func (t *LoggerStatus) AsGoStruct(ros2_message_buffer unsafe.Pointer) {
	mem := (*C.px4_msgs__msg__LoggerStatus)(ros2_message_buffer)
	t.Timestamp = uint64(mem.timestamp)
	t.Type = uint8(mem._type)
	t.Backend = uint8(mem.backend)
	t.TotalWrittenKb = float32(mem.total_written_kb)
	t.WriteRateKbS = float32(mem.write_rate_kb_s)
	t.Dropouts = uint32(mem.dropouts)
	t.MessageGaps = uint32(mem.message_gaps)
	t.BufferUsedBytes = uint32(mem.buffer_used_bytes)
	t.BufferSizeBytes = uint32(mem.buffer_size_bytes)
	t.NumMessages = uint8(mem.num_messages)
}
func (t *LoggerStatus) Clone() ros2types.ROS2Msg {
	clone := *t
	return &clone
}

type CLoggerStatus = C.px4_msgs__msg__LoggerStatus
type CLoggerStatus__Sequence = C.px4_msgs__msg__LoggerStatus__Sequence

func LoggerStatus__Sequence_to_Go(goSlice *[]LoggerStatus, cSlice CLoggerStatus__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]LoggerStatus, int64(cSlice.size))
	for i := 0; i < int(cSlice.size); i++ {
		cIdx := (*C.px4_msgs__msg__LoggerStatus__Sequence)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_px4_msgs__msg__LoggerStatus * uintptr(i)),
		))
		(*goSlice)[i] = LoggerStatus{}
		(*goSlice)[i].AsGoStruct(unsafe.Pointer(cIdx))
	}
}
func LoggerStatus__Sequence_to_C(cSlice *CLoggerStatus__Sequence, goSlice []LoggerStatus) {
	if len(goSlice) == 0 {
		return
	}
	cSlice.data = (*C.px4_msgs__msg__LoggerStatus)(C.malloc((C.size_t)(C.sizeof_struct_px4_msgs__msg__LoggerStatus * uintptr(len(goSlice)))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity

	for i, v := range goSlice {
		cIdx := (*C.px4_msgs__msg__LoggerStatus)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_px4_msgs__msg__LoggerStatus * uintptr(i)),
		))
		*cIdx = *(*C.px4_msgs__msg__LoggerStatus)(v.AsCStruct())
	}
}
func LoggerStatus__Array_to_Go(goSlice []LoggerStatus, cSlice []CLoggerStatus) {
	for i := 0; i < len(cSlice); i++ {
		goSlice[i].AsGoStruct(unsafe.Pointer(&cSlice[i]))
	}
}
func LoggerStatus__Array_to_C(cSlice []CLoggerStatus, goSlice []LoggerStatus) {
	for i := 0; i < len(goSlice); i++ {
		cSlice[i] = *(*C.px4_msgs__msg__LoggerStatus)(goSlice[i].AsCStruct())
	}
}


