/*
This file is part of rclgo

Copyright Â© 2021 Technology Innovation Institute, United Arab Emirates

Licensed under the Apache License, Version 2.0 (the "License");
	http://www.apache.org/licenses/LICENSE-2.0
*/

/*
THIS FILE IS AUTOGENERATED BY 'rclgo-gen generate'
*/

package px4_msgs
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/ros2/ros2types"
	"github.com/tiiuae/rclgo/pkg/ros2/ros2_type_dispatcher"
	rosidl_runtime_c "github.com/tiiuae/rclgo/pkg/ros2/rosidl_runtime_c"
	
)
/*
#cgo LDFLAGS: -L/opt/ros/foxy/lib -Wl,-rpath=/opt/ros/foxy/lib -lrcl -lrosidl_runtime_c -lrosidl_typesupport_c -lrcutils -lrmw_implementation
#cgo LDFLAGS: -lpx4_msgs__rosidl_typesupport_c -lpx4_msgs__rosidl_generator_c

#cgo CFLAGS: -I/opt/ros/foxy/include

#include <rosidl_runtime_c/message_type_support_struct.h>
#include <px4_msgs/msg/estimator_sensor_bias.h>
*/
import "C"

func init() {
	ros2_type_dispatcher.RegisterROS2MsgTypeNameAlias("px4_msgs/EstimatorSensorBias", &EstimatorSensorBias{})
}

// Do not create instances of this type directly. Always use NewEstimatorSensorBias
// function instead.
type EstimatorSensorBias struct {
	Timestamp uint64 `yaml:"timestamp"`// time since system start (microseconds)
	TimestampSample uint64 `yaml:"timestamp_sample"`// the timestamp of the raw data (microseconds)
	GyroDeviceId uint32 `yaml:"gyro_device_id"`// unique device ID for the sensor that does not change between power cycles
	GyroBias [3]float32 `yaml:"gyro_bias"`// gyroscope in-run bias in body frame (rad/s)
	GyroBiasLimit float32 `yaml:"gyro_bias_limit"`// magnitude of maximum gyroscope in-run bias in body frame (rad/s)
	GyroBiasVariance [3]float32 `yaml:"gyro_bias_variance"`
	GyroBiasValid bool `yaml:"gyro_bias_valid"`
	AccelDeviceId uint32 `yaml:"accel_device_id"`// unique device ID for the sensor that does not change between power cycles
	AccelBias [3]float32 `yaml:"accel_bias"`// accelerometer in-run bias in body frame (m/s^2)
	AccelBiasLimit float32 `yaml:"accel_bias_limit"`// magnitude of maximum accelerometer in-run bias in body frame (m/s^2)
	AccelBiasVariance [3]float32 `yaml:"accel_bias_variance"`
	AccelBiasValid bool `yaml:"accel_bias_valid"`
	MagDeviceId uint32 `yaml:"mag_device_id"`// unique device ID for the sensor that does not change between power cycles
	MagBias [3]float32 `yaml:"mag_bias"`// magnetometer in-run bias in body frame (Gauss)
	MagBiasLimit float32 `yaml:"mag_bias_limit"`// magnitude of maximum magnetometer in-run bias in body frame (Gauss)
	MagBiasVariance [3]float32 `yaml:"mag_bias_variance"`
	MagBiasValid bool `yaml:"mag_bias_valid"`
}

// NewEstimatorSensorBias creates a new EstimatorSensorBias with default values.
func NewEstimatorSensorBias() *EstimatorSensorBias {
	self := EstimatorSensorBias{}
	self.SetDefaults(nil)
	return &self
}

func (t *EstimatorSensorBias) SetDefaults(d interface{}) ros2types.ROS2Msg {
	
	return t
}

func (t *EstimatorSensorBias) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__EstimatorSensorBias())
}
func (t *EstimatorSensorBias) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__EstimatorSensorBias
	return (unsafe.Pointer)(C.px4_msgs__msg__EstimatorSensorBias__create())
}
func (t *EstimatorSensorBias) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__EstimatorSensorBias__destroy((*C.px4_msgs__msg__EstimatorSensorBias)(pointer_to_free))
}
func (t *EstimatorSensorBias) AsCStruct() unsafe.Pointer {
	mem := (*C.px4_msgs__msg__EstimatorSensorBias)(t.PrepareMemory())
	mem.timestamp = C.uint64_t(t.Timestamp)
	mem.timestamp_sample = C.uint64_t(t.TimestampSample)
	mem.gyro_device_id = C.uint32_t(t.GyroDeviceId)
	cSlice_gyro_bias := mem.gyro_bias[:]
	rosidl_runtime_c.Float32__Array_to_C(*(*[]rosidl_runtime_c.CFloat32)(unsafe.Pointer(&cSlice_gyro_bias)), t.GyroBias[:])
	mem.gyro_bias_limit = C.float(t.GyroBiasLimit)
	cSlice_gyro_bias_variance := mem.gyro_bias_variance[:]
	rosidl_runtime_c.Float32__Array_to_C(*(*[]rosidl_runtime_c.CFloat32)(unsafe.Pointer(&cSlice_gyro_bias_variance)), t.GyroBiasVariance[:])
	mem.gyro_bias_valid = C.bool(t.GyroBiasValid)
	mem.accel_device_id = C.uint32_t(t.AccelDeviceId)
	cSlice_accel_bias := mem.accel_bias[:]
	rosidl_runtime_c.Float32__Array_to_C(*(*[]rosidl_runtime_c.CFloat32)(unsafe.Pointer(&cSlice_accel_bias)), t.AccelBias[:])
	mem.accel_bias_limit = C.float(t.AccelBiasLimit)
	cSlice_accel_bias_variance := mem.accel_bias_variance[:]
	rosidl_runtime_c.Float32__Array_to_C(*(*[]rosidl_runtime_c.CFloat32)(unsafe.Pointer(&cSlice_accel_bias_variance)), t.AccelBiasVariance[:])
	mem.accel_bias_valid = C.bool(t.AccelBiasValid)
	mem.mag_device_id = C.uint32_t(t.MagDeviceId)
	cSlice_mag_bias := mem.mag_bias[:]
	rosidl_runtime_c.Float32__Array_to_C(*(*[]rosidl_runtime_c.CFloat32)(unsafe.Pointer(&cSlice_mag_bias)), t.MagBias[:])
	mem.mag_bias_limit = C.float(t.MagBiasLimit)
	cSlice_mag_bias_variance := mem.mag_bias_variance[:]
	rosidl_runtime_c.Float32__Array_to_C(*(*[]rosidl_runtime_c.CFloat32)(unsafe.Pointer(&cSlice_mag_bias_variance)), t.MagBiasVariance[:])
	mem.mag_bias_valid = C.bool(t.MagBiasValid)
	return unsafe.Pointer(mem)
}
func (t *EstimatorSensorBias) AsGoStruct(ros2_message_buffer unsafe.Pointer) {
	mem := (*C.px4_msgs__msg__EstimatorSensorBias)(ros2_message_buffer)
	t.Timestamp = uint64(mem.timestamp)
	t.TimestampSample = uint64(mem.timestamp_sample)
	t.GyroDeviceId = uint32(mem.gyro_device_id)
	cSlice_gyro_bias := mem.gyro_bias[:]
	rosidl_runtime_c.Float32__Array_to_Go(t.GyroBias[:], *(*[]rosidl_runtime_c.CFloat32)(unsafe.Pointer(&cSlice_gyro_bias)))
	t.GyroBiasLimit = float32(mem.gyro_bias_limit)
	cSlice_gyro_bias_variance := mem.gyro_bias_variance[:]
	rosidl_runtime_c.Float32__Array_to_Go(t.GyroBiasVariance[:], *(*[]rosidl_runtime_c.CFloat32)(unsafe.Pointer(&cSlice_gyro_bias_variance)))
	t.GyroBiasValid = bool(mem.gyro_bias_valid)
	t.AccelDeviceId = uint32(mem.accel_device_id)
	cSlice_accel_bias := mem.accel_bias[:]
	rosidl_runtime_c.Float32__Array_to_Go(t.AccelBias[:], *(*[]rosidl_runtime_c.CFloat32)(unsafe.Pointer(&cSlice_accel_bias)))
	t.AccelBiasLimit = float32(mem.accel_bias_limit)
	cSlice_accel_bias_variance := mem.accel_bias_variance[:]
	rosidl_runtime_c.Float32__Array_to_Go(t.AccelBiasVariance[:], *(*[]rosidl_runtime_c.CFloat32)(unsafe.Pointer(&cSlice_accel_bias_variance)))
	t.AccelBiasValid = bool(mem.accel_bias_valid)
	t.MagDeviceId = uint32(mem.mag_device_id)
	cSlice_mag_bias := mem.mag_bias[:]
	rosidl_runtime_c.Float32__Array_to_Go(t.MagBias[:], *(*[]rosidl_runtime_c.CFloat32)(unsafe.Pointer(&cSlice_mag_bias)))
	t.MagBiasLimit = float32(mem.mag_bias_limit)
	cSlice_mag_bias_variance := mem.mag_bias_variance[:]
	rosidl_runtime_c.Float32__Array_to_Go(t.MagBiasVariance[:], *(*[]rosidl_runtime_c.CFloat32)(unsafe.Pointer(&cSlice_mag_bias_variance)))
	t.MagBiasValid = bool(mem.mag_bias_valid)
}
func (t *EstimatorSensorBias) Clone() ros2types.ROS2Msg {
	clone := *t
	return &clone
}

type CEstimatorSensorBias = C.px4_msgs__msg__EstimatorSensorBias
type CEstimatorSensorBias__Sequence = C.px4_msgs__msg__EstimatorSensorBias__Sequence

func EstimatorSensorBias__Sequence_to_Go(goSlice *[]EstimatorSensorBias, cSlice CEstimatorSensorBias__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]EstimatorSensorBias, int64(cSlice.size))
	for i := 0; i < int(cSlice.size); i++ {
		cIdx := (*C.px4_msgs__msg__EstimatorSensorBias__Sequence)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_px4_msgs__msg__EstimatorSensorBias * uintptr(i)),
		))
		(*goSlice)[i] = EstimatorSensorBias{}
		(*goSlice)[i].AsGoStruct(unsafe.Pointer(cIdx))
	}
}
func EstimatorSensorBias__Sequence_to_C(cSlice *CEstimatorSensorBias__Sequence, goSlice []EstimatorSensorBias) {
	if len(goSlice) == 0 {
		return
	}
	cSlice.data = (*C.px4_msgs__msg__EstimatorSensorBias)(C.malloc((C.size_t)(C.sizeof_struct_px4_msgs__msg__EstimatorSensorBias * uintptr(len(goSlice)))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity

	for i, v := range goSlice {
		cIdx := (*C.px4_msgs__msg__EstimatorSensorBias)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_px4_msgs__msg__EstimatorSensorBias * uintptr(i)),
		))
		*cIdx = *(*C.px4_msgs__msg__EstimatorSensorBias)(v.AsCStruct())
	}
}
func EstimatorSensorBias__Array_to_Go(goSlice []EstimatorSensorBias, cSlice []CEstimatorSensorBias) {
	for i := 0; i < len(cSlice); i++ {
		goSlice[i].AsGoStruct(unsafe.Pointer(&cSlice[i]))
	}
}
func EstimatorSensorBias__Array_to_C(cSlice []CEstimatorSensorBias, goSlice []EstimatorSensorBias) {
	for i := 0; i < len(goSlice); i++ {
		cSlice[i] = *(*C.px4_msgs__msg__EstimatorSensorBias)(goSlice[i].AsCStruct())
	}
}


