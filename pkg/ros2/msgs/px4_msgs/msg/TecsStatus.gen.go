/*
This file is part of rclgo

Copyright Â© 2021 Technology Innovation Institute, United Arab Emirates

Licensed under the Apache License, Version 2.0 (the "License");
	http://www.apache.org/licenses/LICENSE-2.0
*/

/*
THIS FILE IS AUTOGENERATED BY 'rclgo-gen generate'
*/

package px4_msgs
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/ros2/ros2types"
	"github.com/tiiuae/rclgo/pkg/ros2/ros2_type_dispatcher"
	
)
/*
#cgo LDFLAGS: -L/opt/ros/foxy/lib -Wl,-rpath=/opt/ros/foxy/lib -lrcl -lrosidl_runtime_c -lrosidl_typesupport_c -lrcutils -lrmw_implementation
#cgo LDFLAGS: -lpx4_msgs__rosidl_typesupport_c -lpx4_msgs__rosidl_generator_c

#cgo CFLAGS: -I/opt/ros/foxy/include

#include <rosidl_runtime_c/message_type_support_struct.h>
#include <px4_msgs/msg/tecs_status.h>
*/
import "C"

func init() {
	ros2_type_dispatcher.RegisterROS2MsgTypeNameAlias("px4_msgs/TecsStatus", &TecsStatus{})
}
const (
	TecsStatus_TECS_MODE_NORMAL uint8 = 0
	TecsStatus_TECS_MODE_UNDERSPEED uint8 = 1
	TecsStatus_TECS_MODE_TAKEOFF uint8 = 2
	TecsStatus_TECS_MODE_LAND uint8 = 3
	TecsStatus_TECS_MODE_LAND_THROTTLELIM uint8 = 4
	TecsStatus_TECS_MODE_BAD_DESCENT uint8 = 5
	TecsStatus_TECS_MODE_CLIMBOUT uint8 = 6
)

// Do not create instances of this type directly. Always use NewTecsStatus
// function instead.
type TecsStatus struct {
	Timestamp uint64 `yaml:"timestamp"`// time since system start (microseconds)
	AltitudeSp float32 `yaml:"altitude_sp"`
	AltitudeFiltered float32 `yaml:"altitude_filtered"`
	HeightRateSetpoint float32 `yaml:"height_rate_setpoint"`
	HeightRate float32 `yaml:"height_rate"`
	EquivalentAirspeedSp float32 `yaml:"equivalent_airspeed_sp"`
	TrueAirspeedSp float32 `yaml:"true_airspeed_sp"`
	TrueAirspeedFiltered float32 `yaml:"true_airspeed_filtered"`
	TrueAirspeedDerivativeSp float32 `yaml:"true_airspeed_derivative_sp"`
	TrueAirspeedDerivative float32 `yaml:"true_airspeed_derivative"`
	TotalEnergyError float32 `yaml:"total_energy_error"`
	EnergyDistributionError float32 `yaml:"energy_distribution_error"`
	TotalEnergyRateError float32 `yaml:"total_energy_rate_error"`
	EnergyDistributionRateError float32 `yaml:"energy_distribution_rate_error"`
	TotalEnergy float32 `yaml:"total_energy"`
	TotalEnergyRate float32 `yaml:"total_energy_rate"`
	TotalEnergyBalance float32 `yaml:"total_energy_balance"`
	TotalEnergyBalanceRate float32 `yaml:"total_energy_balance_rate"`
	TotalEnergySp float32 `yaml:"total_energy_sp"`
	TotalEnergyRateSp float32 `yaml:"total_energy_rate_sp"`
	TotalEnergyBalanceSp float32 `yaml:"total_energy_balance_sp"`
	TotalEnergyBalanceRateSp float32 `yaml:"total_energy_balance_rate_sp"`
	ThrottleInteg float32 `yaml:"throttle_integ"`
	PitchInteg float32 `yaml:"pitch_integ"`
	ThrottleSp float32 `yaml:"throttle_sp"`
	Mode uint8 `yaml:"mode"`
}

// NewTecsStatus creates a new TecsStatus with default values.
func NewTecsStatus() *TecsStatus {
	self := TecsStatus{}
	self.SetDefaults(nil)
	return &self
}

func (t *TecsStatus) SetDefaults(d interface{}) ros2types.ROS2Msg {
	
	return t
}

func (t *TecsStatus) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__TecsStatus())
}
func (t *TecsStatus) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__TecsStatus
	return (unsafe.Pointer)(C.px4_msgs__msg__TecsStatus__create())
}
func (t *TecsStatus) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__TecsStatus__destroy((*C.px4_msgs__msg__TecsStatus)(pointer_to_free))
}
func (t *TecsStatus) AsCStruct() unsafe.Pointer {
	mem := (*C.px4_msgs__msg__TecsStatus)(t.PrepareMemory())
	mem.timestamp = C.uint64_t(t.Timestamp)
	mem.altitude_sp = C.float(t.AltitudeSp)
	mem.altitude_filtered = C.float(t.AltitudeFiltered)
	mem.height_rate_setpoint = C.float(t.HeightRateSetpoint)
	mem.height_rate = C.float(t.HeightRate)
	mem.equivalent_airspeed_sp = C.float(t.EquivalentAirspeedSp)
	mem.true_airspeed_sp = C.float(t.TrueAirspeedSp)
	mem.true_airspeed_filtered = C.float(t.TrueAirspeedFiltered)
	mem.true_airspeed_derivative_sp = C.float(t.TrueAirspeedDerivativeSp)
	mem.true_airspeed_derivative = C.float(t.TrueAirspeedDerivative)
	mem.total_energy_error = C.float(t.TotalEnergyError)
	mem.energy_distribution_error = C.float(t.EnergyDistributionError)
	mem.total_energy_rate_error = C.float(t.TotalEnergyRateError)
	mem.energy_distribution_rate_error = C.float(t.EnergyDistributionRateError)
	mem.total_energy = C.float(t.TotalEnergy)
	mem.total_energy_rate = C.float(t.TotalEnergyRate)
	mem.total_energy_balance = C.float(t.TotalEnergyBalance)
	mem.total_energy_balance_rate = C.float(t.TotalEnergyBalanceRate)
	mem.total_energy_sp = C.float(t.TotalEnergySp)
	mem.total_energy_rate_sp = C.float(t.TotalEnergyRateSp)
	mem.total_energy_balance_sp = C.float(t.TotalEnergyBalanceSp)
	mem.total_energy_balance_rate_sp = C.float(t.TotalEnergyBalanceRateSp)
	mem.throttle_integ = C.float(t.ThrottleInteg)
	mem.pitch_integ = C.float(t.PitchInteg)
	mem.throttle_sp = C.float(t.ThrottleSp)
	mem.mode = C.uint8_t(t.Mode)
	return unsafe.Pointer(mem)
}
func (t *TecsStatus) AsGoStruct(ros2_message_buffer unsafe.Pointer) {
	mem := (*C.px4_msgs__msg__TecsStatus)(ros2_message_buffer)
	t.Timestamp = uint64(mem.timestamp)
	t.AltitudeSp = float32(mem.altitude_sp)
	t.AltitudeFiltered = float32(mem.altitude_filtered)
	t.HeightRateSetpoint = float32(mem.height_rate_setpoint)
	t.HeightRate = float32(mem.height_rate)
	t.EquivalentAirspeedSp = float32(mem.equivalent_airspeed_sp)
	t.TrueAirspeedSp = float32(mem.true_airspeed_sp)
	t.TrueAirspeedFiltered = float32(mem.true_airspeed_filtered)
	t.TrueAirspeedDerivativeSp = float32(mem.true_airspeed_derivative_sp)
	t.TrueAirspeedDerivative = float32(mem.true_airspeed_derivative)
	t.TotalEnergyError = float32(mem.total_energy_error)
	t.EnergyDistributionError = float32(mem.energy_distribution_error)
	t.TotalEnergyRateError = float32(mem.total_energy_rate_error)
	t.EnergyDistributionRateError = float32(mem.energy_distribution_rate_error)
	t.TotalEnergy = float32(mem.total_energy)
	t.TotalEnergyRate = float32(mem.total_energy_rate)
	t.TotalEnergyBalance = float32(mem.total_energy_balance)
	t.TotalEnergyBalanceRate = float32(mem.total_energy_balance_rate)
	t.TotalEnergySp = float32(mem.total_energy_sp)
	t.TotalEnergyRateSp = float32(mem.total_energy_rate_sp)
	t.TotalEnergyBalanceSp = float32(mem.total_energy_balance_sp)
	t.TotalEnergyBalanceRateSp = float32(mem.total_energy_balance_rate_sp)
	t.ThrottleInteg = float32(mem.throttle_integ)
	t.PitchInteg = float32(mem.pitch_integ)
	t.ThrottleSp = float32(mem.throttle_sp)
	t.Mode = uint8(mem.mode)
}
func (t *TecsStatus) Clone() ros2types.ROS2Msg {
	clone := *t
	return &clone
}

type CTecsStatus = C.px4_msgs__msg__TecsStatus
type CTecsStatus__Sequence = C.px4_msgs__msg__TecsStatus__Sequence

func TecsStatus__Sequence_to_Go(goSlice *[]TecsStatus, cSlice CTecsStatus__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]TecsStatus, int64(cSlice.size))
	for i := 0; i < int(cSlice.size); i++ {
		cIdx := (*C.px4_msgs__msg__TecsStatus__Sequence)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_px4_msgs__msg__TecsStatus * uintptr(i)),
		))
		(*goSlice)[i] = TecsStatus{}
		(*goSlice)[i].AsGoStruct(unsafe.Pointer(cIdx))
	}
}
func TecsStatus__Sequence_to_C(cSlice *CTecsStatus__Sequence, goSlice []TecsStatus) {
	if len(goSlice) == 0 {
		return
	}
	cSlice.data = (*C.px4_msgs__msg__TecsStatus)(C.malloc((C.size_t)(C.sizeof_struct_px4_msgs__msg__TecsStatus * uintptr(len(goSlice)))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity

	for i, v := range goSlice {
		cIdx := (*C.px4_msgs__msg__TecsStatus)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_px4_msgs__msg__TecsStatus * uintptr(i)),
		))
		*cIdx = *(*C.px4_msgs__msg__TecsStatus)(v.AsCStruct())
	}
}
func TecsStatus__Array_to_Go(goSlice []TecsStatus, cSlice []CTecsStatus) {
	for i := 0; i < len(cSlice); i++ {
		goSlice[i].AsGoStruct(unsafe.Pointer(&cSlice[i]))
	}
}
func TecsStatus__Array_to_C(cSlice []CTecsStatus, goSlice []TecsStatus) {
	for i := 0; i < len(goSlice); i++ {
		cSlice[i] = *(*C.px4_msgs__msg__TecsStatus)(goSlice[i].AsCStruct())
	}
}


