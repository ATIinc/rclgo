/*
This file is part of rclgo

Copyright Â© 2021 Technology Innovation Institute, United Arab Emirates

Licensed under the Apache License, Version 2.0 (the "License");
	http://www.apache.org/licenses/LICENSE-2.0
*/

/*
THIS FILE IS AUTOGENERATED BY 'rclgo-gen generate'
*/

package px4_msgs_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/ros2/ros2types"
	"github.com/tiiuae/rclgo/pkg/ros2/ros2_type_dispatcher"
	
)
/*
#cgo LDFLAGS: -L/opt/ros/foxy/lib -Wl,-rpath=/opt/ros/foxy/lib -lrcl -lrosidl_runtime_c -lrosidl_typesupport_c -lrcutils -lrmw_implementation
#cgo LDFLAGS: -lpx4_msgs__rosidl_typesupport_c -lpx4_msgs__rosidl_generator_c

#cgo CFLAGS: -I/opt/ros/foxy/include

#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/navigator_mission_item.h>

*/
import "C"

func init() {
	ros2_type_dispatcher.RegisterROS2MsgTypeNameAlias("px4_msgs/NavigatorMissionItem", &NavigatorMissionItem{})
}

// Do not create instances of this type directly. Always use NewNavigatorMissionItem
// function instead.
type NavigatorMissionItem struct {
	Timestamp uint64 `yaml:"timestamp"`// time since system start (microseconds)
	InstanceCount uint32 `yaml:"instance_count"`// Instance count of this mission. Increments monotonically whenever the mission is modified
	SequenceCurrent uint16 `yaml:"sequence_current"`// Sequence of the current mission item
	NavCmd uint16 `yaml:"nav_cmd"`
	Latitude float32 `yaml:"latitude"`
	Longitude float32 `yaml:"longitude"`
	TimeInside float32 `yaml:"time_inside"`// time that the MAV should stay inside the radius before advancing in seconds
	AcceptanceRadius float32 `yaml:"acceptance_radius"`// default radius in which the mission is accepted as reached in meters
	LoiterRadius float32 `yaml:"loiter_radius"`// loiter radius in meters, 0 for a VTOL to hover, negative for counter-clockwise
	Yaw float32 `yaml:"yaw"`// in radians NED -PI..+PI, NAN means don't change yaw
	Altitude float32 `yaml:"altitude"`// altitude in meters (AMSL)
	Frame uint8 `yaml:"frame"`// mission frame
	Origin uint8 `yaml:"origin"`// mission item origin (onboard or mavlink)
	LoiterExitXtrack bool `yaml:"loiter_exit_xtrack"`// exit xtrack location: 0 for center of loiter wp, 1 for exit location
	ForceHeading bool `yaml:"force_heading"`// heading needs to be reached
	AltitudeIsRelative bool `yaml:"altitude_is_relative"`// true if altitude is relative from start point
	Autocontinue bool `yaml:"autocontinue"`// true if next waypoint should follow after this one
	VtolBackTransition bool `yaml:"vtol_back_transition"`// part of the vtol back transition sequence
}

// NewNavigatorMissionItem creates a new NavigatorMissionItem with default values.
func NewNavigatorMissionItem() *NavigatorMissionItem {
	self := NavigatorMissionItem{}
	self.SetDefaults(nil)
	return &self
}

func (t *NavigatorMissionItem) SetDefaults(d interface{}) ros2types.ROS2Msg {
	
	return t
}

func (t *NavigatorMissionItem) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__NavigatorMissionItem())
}
func (t *NavigatorMissionItem) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__NavigatorMissionItem
	return (unsafe.Pointer)(C.px4_msgs__msg__NavigatorMissionItem__create())
}
func (t *NavigatorMissionItem) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__NavigatorMissionItem__destroy((*C.px4_msgs__msg__NavigatorMissionItem)(pointer_to_free))
}
func (t *NavigatorMissionItem) AsCStruct() unsafe.Pointer {
	mem := (*C.px4_msgs__msg__NavigatorMissionItem)(t.PrepareMemory())
	mem.timestamp = C.uint64_t(t.Timestamp)
	mem.instance_count = C.uint32_t(t.InstanceCount)
	mem.sequence_current = C.uint16_t(t.SequenceCurrent)
	mem.nav_cmd = C.uint16_t(t.NavCmd)
	mem.latitude = C.float(t.Latitude)
	mem.longitude = C.float(t.Longitude)
	mem.time_inside = C.float(t.TimeInside)
	mem.acceptance_radius = C.float(t.AcceptanceRadius)
	mem.loiter_radius = C.float(t.LoiterRadius)
	mem.yaw = C.float(t.Yaw)
	mem.altitude = C.float(t.Altitude)
	mem.frame = C.uint8_t(t.Frame)
	mem.origin = C.uint8_t(t.Origin)
	mem.loiter_exit_xtrack = C.bool(t.LoiterExitXtrack)
	mem.force_heading = C.bool(t.ForceHeading)
	mem.altitude_is_relative = C.bool(t.AltitudeIsRelative)
	mem.autocontinue = C.bool(t.Autocontinue)
	mem.vtol_back_transition = C.bool(t.VtolBackTransition)
	return unsafe.Pointer(mem)
}
func (t *NavigatorMissionItem) AsGoStruct(ros2_message_buffer unsafe.Pointer) {
	mem := (*C.px4_msgs__msg__NavigatorMissionItem)(ros2_message_buffer)
	t.Timestamp = uint64(mem.timestamp)
	t.InstanceCount = uint32(mem.instance_count)
	t.SequenceCurrent = uint16(mem.sequence_current)
	t.NavCmd = uint16(mem.nav_cmd)
	t.Latitude = float32(mem.latitude)
	t.Longitude = float32(mem.longitude)
	t.TimeInside = float32(mem.time_inside)
	t.AcceptanceRadius = float32(mem.acceptance_radius)
	t.LoiterRadius = float32(mem.loiter_radius)
	t.Yaw = float32(mem.yaw)
	t.Altitude = float32(mem.altitude)
	t.Frame = uint8(mem.frame)
	t.Origin = uint8(mem.origin)
	t.LoiterExitXtrack = bool(mem.loiter_exit_xtrack)
	t.ForceHeading = bool(mem.force_heading)
	t.AltitudeIsRelative = bool(mem.altitude_is_relative)
	t.Autocontinue = bool(mem.autocontinue)
	t.VtolBackTransition = bool(mem.vtol_back_transition)
}
func (t *NavigatorMissionItem) Clone() ros2types.ROS2Msg {
	clone := *t
	return &clone
}

type CNavigatorMissionItem = C.px4_msgs__msg__NavigatorMissionItem
type CNavigatorMissionItem__Sequence = C.px4_msgs__msg__NavigatorMissionItem__Sequence

func NavigatorMissionItem__Sequence_to_Go(goSlice *[]NavigatorMissionItem, cSlice CNavigatorMissionItem__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]NavigatorMissionItem, int64(cSlice.size))
	for i := 0; i < int(cSlice.size); i++ {
		cIdx := (*C.px4_msgs__msg__NavigatorMissionItem__Sequence)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_px4_msgs__msg__NavigatorMissionItem * uintptr(i)),
		))
		(*goSlice)[i] = NavigatorMissionItem{}
		(*goSlice)[i].AsGoStruct(unsafe.Pointer(cIdx))
	}
}
func NavigatorMissionItem__Sequence_to_C(cSlice *CNavigatorMissionItem__Sequence, goSlice []NavigatorMissionItem) {
	if len(goSlice) == 0 {
		return
	}
	cSlice.data = (*C.px4_msgs__msg__NavigatorMissionItem)(C.malloc((C.size_t)(C.sizeof_struct_px4_msgs__msg__NavigatorMissionItem * uintptr(len(goSlice)))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity

	for i, v := range goSlice {
		cIdx := (*C.px4_msgs__msg__NavigatorMissionItem)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_px4_msgs__msg__NavigatorMissionItem * uintptr(i)),
		))
		*cIdx = *(*C.px4_msgs__msg__NavigatorMissionItem)(v.AsCStruct())
	}
}
func NavigatorMissionItem__Array_to_Go(goSlice []NavigatorMissionItem, cSlice []CNavigatorMissionItem) {
	for i := 0; i < len(cSlice); i++ {
		goSlice[i].AsGoStruct(unsafe.Pointer(&cSlice[i]))
	}
}
func NavigatorMissionItem__Array_to_C(cSlice []CNavigatorMissionItem, goSlice []NavigatorMissionItem) {
	for i := 0; i < len(goSlice); i++ {
		cSlice[i] = *(*C.px4_msgs__msg__NavigatorMissionItem)(goSlice[i].AsCStruct())
	}
}


