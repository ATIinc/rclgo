/*
This file is part of rclgo

Copyright Â© 2021 Technology Innovation Institute, United Arab Emirates

Licensed under the Apache License, Version 2.0 (the "License");
	http://www.apache.org/licenses/LICENSE-2.0
*/

/*
THIS FILE IS AUTOGENERATED BY 'rclgo-gen generate'
*/

package px4_msgs_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/ros2/ros2types"
	"github.com/tiiuae/rclgo/pkg/ros2/ros2_type_dispatcher"
	
)
/*
#cgo LDFLAGS: -L/opt/ros/foxy/lib -Wl,-rpath=/opt/ros/foxy/lib -lrcl -lrosidl_runtime_c -lrosidl_typesupport_c -lrcutils -lrmw_implementation
#cgo LDFLAGS: -lpx4_msgs__rosidl_typesupport_c -lpx4_msgs__rosidl_generator_c

#cgo CFLAGS: -I/opt/ros/foxy/include

#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/position_controller_landing_status.h>

*/
import "C"

func init() {
	ros2_type_dispatcher.RegisterROS2MsgTypeNameAlias("px4_msgs/PositionControllerLandingStatus", &PositionControllerLandingStatus{})
}

// Do not create instances of this type directly. Always use NewPositionControllerLandingStatus
// function instead.
type PositionControllerLandingStatus struct {
	Timestamp uint64 `yaml:"timestamp"`// time since system start (microseconds)
	HorizontalSlopeDisplacement float32 `yaml:"horizontal_slope_displacement"`
	SlopeAngleRad float32 `yaml:"slope_angle_rad"`
	FlareLength float32 `yaml:"flare_length"`
	AbortLanding bool `yaml:"abort_landing"`// true if landing should be aborted
}

// NewPositionControllerLandingStatus creates a new PositionControllerLandingStatus with default values.
func NewPositionControllerLandingStatus() *PositionControllerLandingStatus {
	self := PositionControllerLandingStatus{}
	self.SetDefaults(nil)
	return &self
}

func (t *PositionControllerLandingStatus) SetDefaults(d interface{}) ros2types.ROS2Msg {
	
	return t
}

func (t *PositionControllerLandingStatus) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__PositionControllerLandingStatus())
}
func (t *PositionControllerLandingStatus) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__PositionControllerLandingStatus
	return (unsafe.Pointer)(C.px4_msgs__msg__PositionControllerLandingStatus__create())
}
func (t *PositionControllerLandingStatus) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__PositionControllerLandingStatus__destroy((*C.px4_msgs__msg__PositionControllerLandingStatus)(pointer_to_free))
}
func (t *PositionControllerLandingStatus) AsCStruct() unsafe.Pointer {
	mem := (*C.px4_msgs__msg__PositionControllerLandingStatus)(t.PrepareMemory())
	mem.timestamp = C.uint64_t(t.Timestamp)
	mem.horizontal_slope_displacement = C.float(t.HorizontalSlopeDisplacement)
	mem.slope_angle_rad = C.float(t.SlopeAngleRad)
	mem.flare_length = C.float(t.FlareLength)
	mem.abort_landing = C.bool(t.AbortLanding)
	return unsafe.Pointer(mem)
}
func (t *PositionControllerLandingStatus) AsGoStruct(ros2_message_buffer unsafe.Pointer) {
	mem := (*C.px4_msgs__msg__PositionControllerLandingStatus)(ros2_message_buffer)
	t.Timestamp = uint64(mem.timestamp)
	t.HorizontalSlopeDisplacement = float32(mem.horizontal_slope_displacement)
	t.SlopeAngleRad = float32(mem.slope_angle_rad)
	t.FlareLength = float32(mem.flare_length)
	t.AbortLanding = bool(mem.abort_landing)
}
func (t *PositionControllerLandingStatus) Clone() ros2types.ROS2Msg {
	clone := *t
	return &clone
}

type CPositionControllerLandingStatus = C.px4_msgs__msg__PositionControllerLandingStatus
type CPositionControllerLandingStatus__Sequence = C.px4_msgs__msg__PositionControllerLandingStatus__Sequence

func PositionControllerLandingStatus__Sequence_to_Go(goSlice *[]PositionControllerLandingStatus, cSlice CPositionControllerLandingStatus__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]PositionControllerLandingStatus, int64(cSlice.size))
	for i := 0; i < int(cSlice.size); i++ {
		cIdx := (*C.px4_msgs__msg__PositionControllerLandingStatus__Sequence)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_px4_msgs__msg__PositionControllerLandingStatus * uintptr(i)),
		))
		(*goSlice)[i] = PositionControllerLandingStatus{}
		(*goSlice)[i].AsGoStruct(unsafe.Pointer(cIdx))
	}
}
func PositionControllerLandingStatus__Sequence_to_C(cSlice *CPositionControllerLandingStatus__Sequence, goSlice []PositionControllerLandingStatus) {
	if len(goSlice) == 0 {
		return
	}
	cSlice.data = (*C.px4_msgs__msg__PositionControllerLandingStatus)(C.malloc((C.size_t)(C.sizeof_struct_px4_msgs__msg__PositionControllerLandingStatus * uintptr(len(goSlice)))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity

	for i, v := range goSlice {
		cIdx := (*C.px4_msgs__msg__PositionControllerLandingStatus)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_px4_msgs__msg__PositionControllerLandingStatus * uintptr(i)),
		))
		*cIdx = *(*C.px4_msgs__msg__PositionControllerLandingStatus)(v.AsCStruct())
	}
}
func PositionControllerLandingStatus__Array_to_Go(goSlice []PositionControllerLandingStatus, cSlice []CPositionControllerLandingStatus) {
	for i := 0; i < len(cSlice); i++ {
		goSlice[i].AsGoStruct(unsafe.Pointer(&cSlice[i]))
	}
}
func PositionControllerLandingStatus__Array_to_C(cSlice []CPositionControllerLandingStatus, goSlice []PositionControllerLandingStatus) {
	for i := 0; i < len(goSlice); i++ {
		cSlice[i] = *(*C.px4_msgs__msg__PositionControllerLandingStatus)(goSlice[i].AsCStruct())
	}
}


