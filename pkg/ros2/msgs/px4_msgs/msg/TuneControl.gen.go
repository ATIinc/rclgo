/*
This file is part of rclgo

Copyright Â© 2021 Technology Innovation Institute, United Arab Emirates

Licensed under the Apache License, Version 2.0 (the "License");
	http://www.apache.org/licenses/LICENSE-2.0
*/

/*
THIS FILE IS AUTOGENERATED BY 'rclgo-gen generate'
*/

package px4_msgs_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/ros2/ros2types"
	"github.com/tiiuae/rclgo/pkg/ros2/ros2_type_dispatcher"
	
)
/*
#cgo LDFLAGS: -L/opt/ros/foxy/lib -Wl,-rpath=/opt/ros/foxy/lib -lrcl -lrosidl_runtime_c -lrosidl_typesupport_c -lrcutils -lrmw_implementation
#cgo LDFLAGS: -lpx4_msgs__rosidl_typesupport_c -lpx4_msgs__rosidl_generator_c

#cgo CFLAGS: -I/opt/ros/foxy/include

#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/tune_control.h>

*/
import "C"

func init() {
	ros2_type_dispatcher.RegisterROS2MsgTypeNameAlias("px4_msgs/TuneControl", &TuneControl{})
}
const (
	TuneControl_TUNE_ID_STOP uint8 = 0
	TuneControl_TUNE_ID_STARTUP uint8 = 1
	TuneControl_TUNE_ID_ERROR uint8 = 2
	TuneControl_TUNE_ID_NOTIFY_POSITIVE uint8 = 3
	TuneControl_TUNE_ID_NOTIFY_NEUTRAL uint8 = 4
	TuneControl_TUNE_ID_NOTIFY_NEGATIVE uint8 = 5
	TuneControl_TUNE_ID_ARMING_WARNING uint8 = 6
	TuneControl_TUNE_ID_BATTERY_WARNING_SLOW uint8 = 7
	TuneControl_TUNE_ID_BATTERY_WARNING_FAST uint8 = 8
	TuneControl_TUNE_ID_GPS_WARNING uint8 = 9
	TuneControl_TUNE_ID_ARMING_FAILURE uint8 = 10
	TuneControl_TUNE_ID_PARACHUTE_RELEASE uint8 = 11
	TuneControl_TUNE_ID_SINGLE_BEEP uint8 = 12
	TuneControl_TUNE_ID_HOME_SET uint8 = 13
	TuneControl_TUNE_ID_SD_INIT uint8 = 14
	TuneControl_TUNE_ID_SD_ERROR uint8 = 15
	TuneControl_TUNE_ID_PROG_PX4IO uint8 = 16
	TuneControl_TUNE_ID_PROG_PX4IO_OK uint8 = 17
	TuneControl_TUNE_ID_PROG_PX4IO_ERR uint8 = 18
	TuneControl_NUMBER_OF_TUNES uint8 = 19
	TuneControl_VOLUME_LEVEL_MIN uint8 = 0
	TuneControl_VOLUME_LEVEL_DEFAULT uint8 = 40
	TuneControl_VOLUME_LEVEL_MAX uint8 = 100
	TuneControl_ORB_QUEUE_LENGTH uint8 = 4
)

// Do not create instances of this type directly. Always use NewTuneControl
// function instead.
type TuneControl struct {
	Timestamp uint64 `yaml:"timestamp"`// time since system start (microseconds)
	TuneId uint8 `yaml:"tune_id"`// tune_id corresponding to TuneID::* from the tune_defaults.h in the tunes library
	TuneOverride bool `yaml:"tune_override"`// if true the tune which is playing will be stopped and the new started
	Frequency uint16 `yaml:"frequency"`// in Hz
	Duration uint32 `yaml:"duration"`// in us
	Silence uint32 `yaml:"silence"`// in us
	Volume uint8 `yaml:"volume"`// value between 0-100 if supported by backend
}

// NewTuneControl creates a new TuneControl with default values.
func NewTuneControl() *TuneControl {
	self := TuneControl{}
	self.SetDefaults(nil)
	return &self
}

func (t *TuneControl) SetDefaults(d interface{}) ros2types.ROS2Msg {
	
	return t
}

func (t *TuneControl) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__TuneControl())
}
func (t *TuneControl) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__TuneControl
	return (unsafe.Pointer)(C.px4_msgs__msg__TuneControl__create())
}
func (t *TuneControl) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__TuneControl__destroy((*C.px4_msgs__msg__TuneControl)(pointer_to_free))
}
func (t *TuneControl) AsCStruct() unsafe.Pointer {
	mem := (*C.px4_msgs__msg__TuneControl)(t.PrepareMemory())
	mem.timestamp = C.uint64_t(t.Timestamp)
	mem.tune_id = C.uint8_t(t.TuneId)
	mem.tune_override = C.bool(t.TuneOverride)
	mem.frequency = C.uint16_t(t.Frequency)
	mem.duration = C.uint32_t(t.Duration)
	mem.silence = C.uint32_t(t.Silence)
	mem.volume = C.uint8_t(t.Volume)
	return unsafe.Pointer(mem)
}
func (t *TuneControl) AsGoStruct(ros2_message_buffer unsafe.Pointer) {
	mem := (*C.px4_msgs__msg__TuneControl)(ros2_message_buffer)
	t.Timestamp = uint64(mem.timestamp)
	t.TuneId = uint8(mem.tune_id)
	t.TuneOverride = bool(mem.tune_override)
	t.Frequency = uint16(mem.frequency)
	t.Duration = uint32(mem.duration)
	t.Silence = uint32(mem.silence)
	t.Volume = uint8(mem.volume)
}
func (t *TuneControl) Clone() ros2types.ROS2Msg {
	clone := *t
	return &clone
}

type CTuneControl = C.px4_msgs__msg__TuneControl
type CTuneControl__Sequence = C.px4_msgs__msg__TuneControl__Sequence

func TuneControl__Sequence_to_Go(goSlice *[]TuneControl, cSlice CTuneControl__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]TuneControl, int64(cSlice.size))
	for i := 0; i < int(cSlice.size); i++ {
		cIdx := (*C.px4_msgs__msg__TuneControl__Sequence)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_px4_msgs__msg__TuneControl * uintptr(i)),
		))
		(*goSlice)[i] = TuneControl{}
		(*goSlice)[i].AsGoStruct(unsafe.Pointer(cIdx))
	}
}
func TuneControl__Sequence_to_C(cSlice *CTuneControl__Sequence, goSlice []TuneControl) {
	if len(goSlice) == 0 {
		return
	}
	cSlice.data = (*C.px4_msgs__msg__TuneControl)(C.malloc((C.size_t)(C.sizeof_struct_px4_msgs__msg__TuneControl * uintptr(len(goSlice)))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity

	for i, v := range goSlice {
		cIdx := (*C.px4_msgs__msg__TuneControl)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_px4_msgs__msg__TuneControl * uintptr(i)),
		))
		*cIdx = *(*C.px4_msgs__msg__TuneControl)(v.AsCStruct())
	}
}
func TuneControl__Array_to_Go(goSlice []TuneControl, cSlice []CTuneControl) {
	for i := 0; i < len(cSlice); i++ {
		goSlice[i].AsGoStruct(unsafe.Pointer(&cSlice[i]))
	}
}
func TuneControl__Array_to_C(cSlice []CTuneControl, goSlice []TuneControl) {
	for i := 0; i < len(goSlice); i++ {
		cSlice[i] = *(*C.px4_msgs__msg__TuneControl)(goSlice[i].AsCStruct())
	}
}


