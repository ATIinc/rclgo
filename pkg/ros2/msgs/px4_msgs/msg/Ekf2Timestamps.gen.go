/*
This file is part of rclgo

Copyright Â© 2021 Technology Innovation Institute, United Arab Emirates

Licensed under the Apache License, Version 2.0 (the "License");
	http://www.apache.org/licenses/LICENSE-2.0
*/

/*
THIS FILE IS AUTOGENERATED BY 'rclgo-gen generate'
*/

package px4_msgs_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/ros2/ros2types"
	"github.com/tiiuae/rclgo/pkg/ros2/ros2_type_dispatcher"
	
)
/*
#cgo LDFLAGS: -L/opt/ros/foxy/lib -Wl,-rpath=/opt/ros/foxy/lib -lrcl -lrosidl_runtime_c -lrosidl_typesupport_c -lrcutils -lrmw_implementation
#cgo LDFLAGS: -lpx4_msgs__rosidl_typesupport_c -lpx4_msgs__rosidl_generator_c

#cgo CFLAGS: -I/opt/ros/foxy/include

#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/ekf2_timestamps.h>

*/
import "C"

func init() {
	ros2_type_dispatcher.RegisterROS2MsgTypeNameAlias("px4_msgs/Ekf2Timestamps", &Ekf2Timestamps{})
}
const (
	Ekf2Timestamps_RELATIVE_TIMESTAMP_INVALID int16 = 32767// (0x7fff) If one of the relative timestamps
)

// Do not create instances of this type directly. Always use NewEkf2Timestamps
// function instead.
type Ekf2Timestamps struct {
	Timestamp uint64 `yaml:"timestamp"`// time since system start (microseconds)
	AirspeedTimestampRel int16 `yaml:"airspeed_timestamp_rel"`
	DistanceSensorTimestampRel int16 `yaml:"distance_sensor_timestamp_rel"`
	OpticalFlowTimestampRel int16 `yaml:"optical_flow_timestamp_rel"`
	VehicleAirDataTimestampRel int16 `yaml:"vehicle_air_data_timestamp_rel"`
	VehicleMagnetometerTimestampRel int16 `yaml:"vehicle_magnetometer_timestamp_rel"`
	VisualOdometryTimestampRel int16 `yaml:"visual_odometry_timestamp_rel"`
}

// NewEkf2Timestamps creates a new Ekf2Timestamps with default values.
func NewEkf2Timestamps() *Ekf2Timestamps {
	self := Ekf2Timestamps{}
	self.SetDefaults(nil)
	return &self
}

func (t *Ekf2Timestamps) SetDefaults(d interface{}) ros2types.ROS2Msg {
	
	return t
}

func (t *Ekf2Timestamps) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__Ekf2Timestamps())
}
func (t *Ekf2Timestamps) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__Ekf2Timestamps
	return (unsafe.Pointer)(C.px4_msgs__msg__Ekf2Timestamps__create())
}
func (t *Ekf2Timestamps) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__Ekf2Timestamps__destroy((*C.px4_msgs__msg__Ekf2Timestamps)(pointer_to_free))
}
func (t *Ekf2Timestamps) AsCStruct() unsafe.Pointer {
	mem := (*C.px4_msgs__msg__Ekf2Timestamps)(t.PrepareMemory())
	mem.timestamp = C.uint64_t(t.Timestamp)
	mem.airspeed_timestamp_rel = C.int16_t(t.AirspeedTimestampRel)
	mem.distance_sensor_timestamp_rel = C.int16_t(t.DistanceSensorTimestampRel)
	mem.optical_flow_timestamp_rel = C.int16_t(t.OpticalFlowTimestampRel)
	mem.vehicle_air_data_timestamp_rel = C.int16_t(t.VehicleAirDataTimestampRel)
	mem.vehicle_magnetometer_timestamp_rel = C.int16_t(t.VehicleMagnetometerTimestampRel)
	mem.visual_odometry_timestamp_rel = C.int16_t(t.VisualOdometryTimestampRel)
	return unsafe.Pointer(mem)
}
func (t *Ekf2Timestamps) AsGoStruct(ros2_message_buffer unsafe.Pointer) {
	mem := (*C.px4_msgs__msg__Ekf2Timestamps)(ros2_message_buffer)
	t.Timestamp = uint64(mem.timestamp)
	t.AirspeedTimestampRel = int16(mem.airspeed_timestamp_rel)
	t.DistanceSensorTimestampRel = int16(mem.distance_sensor_timestamp_rel)
	t.OpticalFlowTimestampRel = int16(mem.optical_flow_timestamp_rel)
	t.VehicleAirDataTimestampRel = int16(mem.vehicle_air_data_timestamp_rel)
	t.VehicleMagnetometerTimestampRel = int16(mem.vehicle_magnetometer_timestamp_rel)
	t.VisualOdometryTimestampRel = int16(mem.visual_odometry_timestamp_rel)
}
func (t *Ekf2Timestamps) Clone() ros2types.ROS2Msg {
	clone := *t
	return &clone
}

type CEkf2Timestamps = C.px4_msgs__msg__Ekf2Timestamps
type CEkf2Timestamps__Sequence = C.px4_msgs__msg__Ekf2Timestamps__Sequence

func Ekf2Timestamps__Sequence_to_Go(goSlice *[]Ekf2Timestamps, cSlice CEkf2Timestamps__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]Ekf2Timestamps, int64(cSlice.size))
	for i := 0; i < int(cSlice.size); i++ {
		cIdx := (*C.px4_msgs__msg__Ekf2Timestamps__Sequence)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_px4_msgs__msg__Ekf2Timestamps * uintptr(i)),
		))
		(*goSlice)[i] = Ekf2Timestamps{}
		(*goSlice)[i].AsGoStruct(unsafe.Pointer(cIdx))
	}
}
func Ekf2Timestamps__Sequence_to_C(cSlice *CEkf2Timestamps__Sequence, goSlice []Ekf2Timestamps) {
	if len(goSlice) == 0 {
		return
	}
	cSlice.data = (*C.px4_msgs__msg__Ekf2Timestamps)(C.malloc((C.size_t)(C.sizeof_struct_px4_msgs__msg__Ekf2Timestamps * uintptr(len(goSlice)))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity

	for i, v := range goSlice {
		cIdx := (*C.px4_msgs__msg__Ekf2Timestamps)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_px4_msgs__msg__Ekf2Timestamps * uintptr(i)),
		))
		*cIdx = *(*C.px4_msgs__msg__Ekf2Timestamps)(v.AsCStruct())
	}
}
func Ekf2Timestamps__Array_to_Go(goSlice []Ekf2Timestamps, cSlice []CEkf2Timestamps) {
	for i := 0; i < len(cSlice); i++ {
		goSlice[i].AsGoStruct(unsafe.Pointer(&cSlice[i]))
	}
}
func Ekf2Timestamps__Array_to_C(cSlice []CEkf2Timestamps, goSlice []Ekf2Timestamps) {
	for i := 0; i < len(goSlice); i++ {
		cSlice[i] = *(*C.px4_msgs__msg__Ekf2Timestamps)(goSlice[i].AsCStruct())
	}
}


