/*
This file is part of rclgo

Copyright Â© 2021 Technology Innovation Institute, United Arab Emirates

Licensed under the Apache License, Version 2.0 (the "License");
	http://www.apache.org/licenses/LICENSE-2.0
*/

/*
THIS FILE IS AUTOGENERATED BY 'rclgo-gen generate'
*/

package px4_msgs
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/ros2/ros2types"
	"github.com/tiiuae/rclgo/pkg/ros2/ros2_type_dispatcher"
	rosidl_runtime_c "github.com/tiiuae/rclgo/pkg/ros2/rosidl_runtime_c"
	
)
/*
#cgo LDFLAGS: -L/opt/ros/foxy/lib -Wl,-rpath=/opt/ros/foxy/lib -lrcl -lrosidl_runtime_c -lrosidl_typesupport_c -lrcutils -lrmw_implementation
#cgo LDFLAGS: -lpx4_msgs__rosidl_typesupport_c -lpx4_msgs__rosidl_generator_c

#cgo CFLAGS: -I/opt/ros/foxy/include

#include <rosidl_runtime_c/message_type_support_struct.h>
#include <px4_msgs/msg/sensors_status_imu.h>
*/
import "C"

func init() {
	ros2_type_dispatcher.RegisterROS2MsgTypeNameAlias("px4_msgs/SensorsStatusImu", &SensorsStatusImu{})
}

// Do not create instances of this type directly. Always use NewSensorsStatusImu
// function instead.
type SensorsStatusImu struct {
	Timestamp uint64 `yaml:"timestamp"`// time since system start (microseconds). Sensor check metrics. This will be zero for a sensor that's primary or unpopulated.
	AccelDeviceIdPrimary uint32 `yaml:"accel_device_id_primary"`// current primary accel device id for reference
	AccelDeviceIds [4]uint32 `yaml:"accel_device_ids"`
	AccelInconsistencyMSS [4]float32 `yaml:"accel_inconsistency_m_s_s"`// magnitude of acceleration difference between IMU instance and mean in m/s^2.
	AccelHealthy [4]bool `yaml:"accel_healthy"`
	GyroDeviceIdPrimary uint32 `yaml:"gyro_device_id_primary"`// current primary gyro device id for reference
	GyroDeviceIds [4]uint32 `yaml:"gyro_device_ids"`
	GyroInconsistencyRadS [4]float32 `yaml:"gyro_inconsistency_rad_s"`// magnitude of angular rate difference between IMU instance and mean in (rad/s).
	GyroHealthy [4]bool `yaml:"gyro_healthy"`
}

// NewSensorsStatusImu creates a new SensorsStatusImu with default values.
func NewSensorsStatusImu() *SensorsStatusImu {
	self := SensorsStatusImu{}
	self.SetDefaults(nil)
	return &self
}

func (t *SensorsStatusImu) SetDefaults(d interface{}) ros2types.ROS2Msg {
	
	return t
}

func (t *SensorsStatusImu) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__SensorsStatusImu())
}
func (t *SensorsStatusImu) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__SensorsStatusImu
	return (unsafe.Pointer)(C.px4_msgs__msg__SensorsStatusImu__create())
}
func (t *SensorsStatusImu) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__SensorsStatusImu__destroy((*C.px4_msgs__msg__SensorsStatusImu)(pointer_to_free))
}
func (t *SensorsStatusImu) AsCStruct() unsafe.Pointer {
	mem := (*C.px4_msgs__msg__SensorsStatusImu)(t.PrepareMemory())
	mem.timestamp = C.uint64_t(t.Timestamp)
	mem.accel_device_id_primary = C.uint32_t(t.AccelDeviceIdPrimary)
	cSlice_accel_device_ids := mem.accel_device_ids[:]
	rosidl_runtime_c.Uint32__Array_to_C(*(*[]rosidl_runtime_c.CUint32)(unsafe.Pointer(&cSlice_accel_device_ids)), t.AccelDeviceIds[:])
	cSlice_accel_inconsistency_m_s_s := mem.accel_inconsistency_m_s_s[:]
	rosidl_runtime_c.Float32__Array_to_C(*(*[]rosidl_runtime_c.CFloat32)(unsafe.Pointer(&cSlice_accel_inconsistency_m_s_s)), t.AccelInconsistencyMSS[:])
	cSlice_accel_healthy := mem.accel_healthy[:]
	rosidl_runtime_c.Bool__Array_to_C(*(*[]rosidl_runtime_c.CBool)(unsafe.Pointer(&cSlice_accel_healthy)), t.AccelHealthy[:])
	mem.gyro_device_id_primary = C.uint32_t(t.GyroDeviceIdPrimary)
	cSlice_gyro_device_ids := mem.gyro_device_ids[:]
	rosidl_runtime_c.Uint32__Array_to_C(*(*[]rosidl_runtime_c.CUint32)(unsafe.Pointer(&cSlice_gyro_device_ids)), t.GyroDeviceIds[:])
	cSlice_gyro_inconsistency_rad_s := mem.gyro_inconsistency_rad_s[:]
	rosidl_runtime_c.Float32__Array_to_C(*(*[]rosidl_runtime_c.CFloat32)(unsafe.Pointer(&cSlice_gyro_inconsistency_rad_s)), t.GyroInconsistencyRadS[:])
	cSlice_gyro_healthy := mem.gyro_healthy[:]
	rosidl_runtime_c.Bool__Array_to_C(*(*[]rosidl_runtime_c.CBool)(unsafe.Pointer(&cSlice_gyro_healthy)), t.GyroHealthy[:])
	return unsafe.Pointer(mem)
}
func (t *SensorsStatusImu) AsGoStruct(ros2_message_buffer unsafe.Pointer) {
	mem := (*C.px4_msgs__msg__SensorsStatusImu)(ros2_message_buffer)
	t.Timestamp = uint64(mem.timestamp)
	t.AccelDeviceIdPrimary = uint32(mem.accel_device_id_primary)
	cSlice_accel_device_ids := mem.accel_device_ids[:]
	rosidl_runtime_c.Uint32__Array_to_Go(t.AccelDeviceIds[:], *(*[]rosidl_runtime_c.CUint32)(unsafe.Pointer(&cSlice_accel_device_ids)))
	cSlice_accel_inconsistency_m_s_s := mem.accel_inconsistency_m_s_s[:]
	rosidl_runtime_c.Float32__Array_to_Go(t.AccelInconsistencyMSS[:], *(*[]rosidl_runtime_c.CFloat32)(unsafe.Pointer(&cSlice_accel_inconsistency_m_s_s)))
	cSlice_accel_healthy := mem.accel_healthy[:]
	rosidl_runtime_c.Bool__Array_to_Go(t.AccelHealthy[:], *(*[]rosidl_runtime_c.CBool)(unsafe.Pointer(&cSlice_accel_healthy)))
	t.GyroDeviceIdPrimary = uint32(mem.gyro_device_id_primary)
	cSlice_gyro_device_ids := mem.gyro_device_ids[:]
	rosidl_runtime_c.Uint32__Array_to_Go(t.GyroDeviceIds[:], *(*[]rosidl_runtime_c.CUint32)(unsafe.Pointer(&cSlice_gyro_device_ids)))
	cSlice_gyro_inconsistency_rad_s := mem.gyro_inconsistency_rad_s[:]
	rosidl_runtime_c.Float32__Array_to_Go(t.GyroInconsistencyRadS[:], *(*[]rosidl_runtime_c.CFloat32)(unsafe.Pointer(&cSlice_gyro_inconsistency_rad_s)))
	cSlice_gyro_healthy := mem.gyro_healthy[:]
	rosidl_runtime_c.Bool__Array_to_Go(t.GyroHealthy[:], *(*[]rosidl_runtime_c.CBool)(unsafe.Pointer(&cSlice_gyro_healthy)))
}
func (t *SensorsStatusImu) Clone() ros2types.ROS2Msg {
	clone := *t
	return &clone
}

type CSensorsStatusImu = C.px4_msgs__msg__SensorsStatusImu
type CSensorsStatusImu__Sequence = C.px4_msgs__msg__SensorsStatusImu__Sequence

func SensorsStatusImu__Sequence_to_Go(goSlice *[]SensorsStatusImu, cSlice CSensorsStatusImu__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]SensorsStatusImu, int64(cSlice.size))
	for i := 0; i < int(cSlice.size); i++ {
		cIdx := (*C.px4_msgs__msg__SensorsStatusImu__Sequence)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_px4_msgs__msg__SensorsStatusImu * uintptr(i)),
		))
		(*goSlice)[i] = SensorsStatusImu{}
		(*goSlice)[i].AsGoStruct(unsafe.Pointer(cIdx))
	}
}
func SensorsStatusImu__Sequence_to_C(cSlice *CSensorsStatusImu__Sequence, goSlice []SensorsStatusImu) {
	if len(goSlice) == 0 {
		return
	}
	cSlice.data = (*C.px4_msgs__msg__SensorsStatusImu)(C.malloc((C.size_t)(C.sizeof_struct_px4_msgs__msg__SensorsStatusImu * uintptr(len(goSlice)))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity

	for i, v := range goSlice {
		cIdx := (*C.px4_msgs__msg__SensorsStatusImu)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_px4_msgs__msg__SensorsStatusImu * uintptr(i)),
		))
		*cIdx = *(*C.px4_msgs__msg__SensorsStatusImu)(v.AsCStruct())
	}
}
func SensorsStatusImu__Array_to_Go(goSlice []SensorsStatusImu, cSlice []CSensorsStatusImu) {
	for i := 0; i < len(cSlice); i++ {
		goSlice[i].AsGoStruct(unsafe.Pointer(&cSlice[i]))
	}
}
func SensorsStatusImu__Array_to_C(cSlice []CSensorsStatusImu, goSlice []SensorsStatusImu) {
	for i := 0; i < len(goSlice); i++ {
		cSlice[i] = *(*C.px4_msgs__msg__SensorsStatusImu)(goSlice[i].AsCStruct())
	}
}


