/*
This file is part of rclgo

Copyright Â© 2021 Technology Innovation Institute, United Arab Emirates

Licensed under the Apache License, Version 2.0 (the "License");
	http://www.apache.org/licenses/LICENSE-2.0
*/

/*
THIS FILE IS AUTOGENERATED BY 'rclgo-gen generate'
*/

package px4_msgs
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/ros2/ros2types"
	"github.com/tiiuae/rclgo/pkg/ros2/ros2_type_dispatcher"
	
)
/*
#cgo LDFLAGS: -L/opt/ros/foxy/lib -Wl,-rpath=/opt/ros/foxy/lib -lrcl -lrosidl_runtime_c -lrosidl_typesupport_c -lrcutils -lrmw_implementation
#cgo LDFLAGS: -lpx4_msgs__rosidl_typesupport_c -lpx4_msgs__rosidl_generator_c

#cgo CFLAGS: -I/opt/ros/foxy/include

#include <rosidl_runtime_c/message_type_support_struct.h>
#include <px4_msgs/msg/timesync_status.h>
*/
import "C"

func init() {
	ros2_type_dispatcher.RegisterROS2MsgTypeNameAlias("px4_msgs/TimesyncStatus", &TimesyncStatus{})
}

// Do not create instances of this type directly. Always use NewTimesyncStatus
// function instead.
type TimesyncStatus struct {
	Timestamp uint64 `yaml:"timestamp"`// time since system start (microseconds)
	RemoteTimestamp uint64 `yaml:"remote_timestamp"`// remote system timestamp (microseconds)
	ObservedOffset int64 `yaml:"observed_offset"`// raw time offset directly observed from this timesync packet (microseconds)
	EstimatedOffset int64 `yaml:"estimated_offset"`// smoothed time offset between companion system and PX4 (microseconds)
	RoundTripTime uint32 `yaml:"round_trip_time"`// round trip time of this timesync packet (microseconds)
}

// NewTimesyncStatus creates a new TimesyncStatus with default values.
func NewTimesyncStatus() *TimesyncStatus {
	self := TimesyncStatus{}
	self.SetDefaults(nil)
	return &self
}

func (t *TimesyncStatus) SetDefaults(d interface{}) ros2types.ROS2Msg {
	
	return t
}

func (t *TimesyncStatus) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__TimesyncStatus())
}
func (t *TimesyncStatus) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__TimesyncStatus
	return (unsafe.Pointer)(C.px4_msgs__msg__TimesyncStatus__create())
}
func (t *TimesyncStatus) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__TimesyncStatus__destroy((*C.px4_msgs__msg__TimesyncStatus)(pointer_to_free))
}
func (t *TimesyncStatus) AsCStruct() unsafe.Pointer {
	mem := (*C.px4_msgs__msg__TimesyncStatus)(t.PrepareMemory())
	mem.timestamp = C.uint64_t(t.Timestamp)
	mem.remote_timestamp = C.uint64_t(t.RemoteTimestamp)
	mem.observed_offset = C.int64_t(t.ObservedOffset)
	mem.estimated_offset = C.int64_t(t.EstimatedOffset)
	mem.round_trip_time = C.uint32_t(t.RoundTripTime)
	return unsafe.Pointer(mem)
}
func (t *TimesyncStatus) AsGoStruct(ros2_message_buffer unsafe.Pointer) {
	mem := (*C.px4_msgs__msg__TimesyncStatus)(ros2_message_buffer)
	t.Timestamp = uint64(mem.timestamp)
	t.RemoteTimestamp = uint64(mem.remote_timestamp)
	t.ObservedOffset = int64(mem.observed_offset)
	t.EstimatedOffset = int64(mem.estimated_offset)
	t.RoundTripTime = uint32(mem.round_trip_time)
}
func (t *TimesyncStatus) Clone() ros2types.ROS2Msg {
	clone := *t
	return &clone
}

type CTimesyncStatus = C.px4_msgs__msg__TimesyncStatus
type CTimesyncStatus__Sequence = C.px4_msgs__msg__TimesyncStatus__Sequence

func TimesyncStatus__Sequence_to_Go(goSlice *[]TimesyncStatus, cSlice CTimesyncStatus__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]TimesyncStatus, int64(cSlice.size))
	for i := 0; i < int(cSlice.size); i++ {
		cIdx := (*C.px4_msgs__msg__TimesyncStatus__Sequence)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_px4_msgs__msg__TimesyncStatus * uintptr(i)),
		))
		(*goSlice)[i] = TimesyncStatus{}
		(*goSlice)[i].AsGoStruct(unsafe.Pointer(cIdx))
	}
}
func TimesyncStatus__Sequence_to_C(cSlice *CTimesyncStatus__Sequence, goSlice []TimesyncStatus) {
	if len(goSlice) == 0 {
		return
	}
	cSlice.data = (*C.px4_msgs__msg__TimesyncStatus)(C.malloc((C.size_t)(C.sizeof_struct_px4_msgs__msg__TimesyncStatus * uintptr(len(goSlice)))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity

	for i, v := range goSlice {
		cIdx := (*C.px4_msgs__msg__TimesyncStatus)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_px4_msgs__msg__TimesyncStatus * uintptr(i)),
		))
		*cIdx = *(*C.px4_msgs__msg__TimesyncStatus)(v.AsCStruct())
	}
}
func TimesyncStatus__Array_to_Go(goSlice []TimesyncStatus, cSlice []CTimesyncStatus) {
	for i := 0; i < len(cSlice); i++ {
		goSlice[i].AsGoStruct(unsafe.Pointer(&cSlice[i]))
	}
}
func TimesyncStatus__Array_to_C(cSlice []CTimesyncStatus, goSlice []TimesyncStatus) {
	for i := 0; i < len(goSlice); i++ {
		cSlice[i] = *(*C.px4_msgs__msg__TimesyncStatus)(goSlice[i].AsCStruct())
	}
}


