/*
This file is part of rclgo

Copyright Â© 2021 Technology Innovation Institute, United Arab Emirates

Licensed under the Apache License, Version 2.0 (the "License");
	http://www.apache.org/licenses/LICENSE-2.0
*/

/*
THIS FILE IS AUTOGENERATED BY 'rclgo-gen generate'
*/

package px4_msgs_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/ros2/ros2types"
	"github.com/tiiuae/rclgo/pkg/ros2/ros2_type_dispatcher"
	rosidl_runtime_c "github.com/tiiuae/rclgo/pkg/ros2/rosidl_runtime_c"
	
)
/*
#cgo LDFLAGS: -L/opt/ros/foxy/lib -Wl,-rpath=/opt/ros/foxy/lib -lrcl -lrosidl_runtime_c -lrosidl_typesupport_c -lrcutils -lrmw_implementation
#cgo LDFLAGS: -lpx4_msgs__rosidl_typesupport_c -lpx4_msgs__rosidl_generator_c

#cgo CFLAGS: -I/opt/ros/foxy/include

#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/gimbal_device_information.h>

*/
import "C"

func init() {
	ros2_type_dispatcher.RegisterROS2MsgTypeNameAlias("px4_msgs/GimbalDeviceInformation", &GimbalDeviceInformation{})
}
const (
	GimbalDeviceInformation_GIMBAL_DEVICE_CAP_FLAGS_HAS_RETRACT uint32 = 1
	GimbalDeviceInformation_GIMBAL_DEVICE_CAP_FLAGS_HAS_NEUTRAL uint32 = 2
	GimbalDeviceInformation_GIMBAL_DEVICE_CAP_FLAGS_HAS_ROLL_AXIS uint32 = 4
	GimbalDeviceInformation_GIMBAL_DEVICE_CAP_FLAGS_HAS_ROLL_FOLLOW uint32 = 8
	GimbalDeviceInformation_GIMBAL_DEVICE_CAP_FLAGS_HAS_ROLL_LOCK uint32 = 16
	GimbalDeviceInformation_GIMBAL_DEVICE_CAP_FLAGS_HAS_PITCH_AXIS uint32 = 32
	GimbalDeviceInformation_GIMBAL_DEVICE_CAP_FLAGS_HAS_PITCH_FOLLOW uint32 = 64
	GimbalDeviceInformation_GIMBAL_DEVICE_CAP_FLAGS_HAS_PITCH_LOCK uint32 = 128
	GimbalDeviceInformation_GIMBAL_DEVICE_CAP_FLAGS_HAS_YAW_AXIS uint32 = 256
	GimbalDeviceInformation_GIMBAL_DEVICE_CAP_FLAGS_HAS_YAW_FOLLOW uint32 = 512
	GimbalDeviceInformation_GIMBAL_DEVICE_CAP_FLAGS_HAS_YAW_LOCK uint32 = 1024
	GimbalDeviceInformation_GIMBAL_DEVICE_CAP_FLAGS_SUPPORTS_INFINITE_YAW uint32 = 2048
)

// Do not create instances of this type directly. Always use NewGimbalDeviceInformation
// function instead.
type GimbalDeviceInformation struct {
	Timestamp uint64 `yaml:"timestamp"`// time since system start (microseconds)
	VendorName [32]uint8 `yaml:"vendor_name"`
	ModelName [32]uint8 `yaml:"model_name"`
	CustomName [32]uint8 `yaml:"custom_name"`
	FirmwareVersion uint32 `yaml:"firmware_version"`
	HardwareVersion uint32 `yaml:"hardware_version"`
	Uid uint64 `yaml:"uid"`
	CapFlags uint16 `yaml:"cap_flags"`
	CustomCapFlags uint16 `yaml:"custom_cap_flags"`
	RollMin float32 `yaml:"roll_min"`// [rad]
	RollMax float32 `yaml:"roll_max"`// [rad]
	PitchMin float32 `yaml:"pitch_min"`// [rad]
	PitchMax float32 `yaml:"pitch_max"`// [rad]
	YawMin float32 `yaml:"yaw_min"`// [rad]
	YawMax float32 `yaml:"yaw_max"`// [rad]
	GimbalDeviceCompid uint8 `yaml:"gimbal_device_compid"`
}

// NewGimbalDeviceInformation creates a new GimbalDeviceInformation with default values.
func NewGimbalDeviceInformation() *GimbalDeviceInformation {
	self := GimbalDeviceInformation{}
	self.SetDefaults(nil)
	return &self
}

func (t *GimbalDeviceInformation) SetDefaults(d interface{}) ros2types.ROS2Msg {
	
	return t
}

func (t *GimbalDeviceInformation) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__GimbalDeviceInformation())
}
func (t *GimbalDeviceInformation) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__GimbalDeviceInformation
	return (unsafe.Pointer)(C.px4_msgs__msg__GimbalDeviceInformation__create())
}
func (t *GimbalDeviceInformation) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__GimbalDeviceInformation__destroy((*C.px4_msgs__msg__GimbalDeviceInformation)(pointer_to_free))
}
func (t *GimbalDeviceInformation) AsCStruct() unsafe.Pointer {
	mem := (*C.px4_msgs__msg__GimbalDeviceInformation)(t.PrepareMemory())
	mem.timestamp = C.uint64_t(t.Timestamp)
	cSlice_vendor_name := mem.vendor_name[:]
	rosidl_runtime_c.Uint8__Array_to_C(*(*[]rosidl_runtime_c.CUint8)(unsafe.Pointer(&cSlice_vendor_name)), t.VendorName[:])
	cSlice_model_name := mem.model_name[:]
	rosidl_runtime_c.Uint8__Array_to_C(*(*[]rosidl_runtime_c.CUint8)(unsafe.Pointer(&cSlice_model_name)), t.ModelName[:])
	cSlice_custom_name := mem.custom_name[:]
	rosidl_runtime_c.Uint8__Array_to_C(*(*[]rosidl_runtime_c.CUint8)(unsafe.Pointer(&cSlice_custom_name)), t.CustomName[:])
	mem.firmware_version = C.uint32_t(t.FirmwareVersion)
	mem.hardware_version = C.uint32_t(t.HardwareVersion)
	mem.uid = C.uint64_t(t.Uid)
	mem.cap_flags = C.uint16_t(t.CapFlags)
	mem.custom_cap_flags = C.uint16_t(t.CustomCapFlags)
	mem.roll_min = C.float(t.RollMin)
	mem.roll_max = C.float(t.RollMax)
	mem.pitch_min = C.float(t.PitchMin)
	mem.pitch_max = C.float(t.PitchMax)
	mem.yaw_min = C.float(t.YawMin)
	mem.yaw_max = C.float(t.YawMax)
	mem.gimbal_device_compid = C.uint8_t(t.GimbalDeviceCompid)
	return unsafe.Pointer(mem)
}
func (t *GimbalDeviceInformation) AsGoStruct(ros2_message_buffer unsafe.Pointer) {
	mem := (*C.px4_msgs__msg__GimbalDeviceInformation)(ros2_message_buffer)
	t.Timestamp = uint64(mem.timestamp)
	cSlice_vendor_name := mem.vendor_name[:]
	rosidl_runtime_c.Uint8__Array_to_Go(t.VendorName[:], *(*[]rosidl_runtime_c.CUint8)(unsafe.Pointer(&cSlice_vendor_name)))
	cSlice_model_name := mem.model_name[:]
	rosidl_runtime_c.Uint8__Array_to_Go(t.ModelName[:], *(*[]rosidl_runtime_c.CUint8)(unsafe.Pointer(&cSlice_model_name)))
	cSlice_custom_name := mem.custom_name[:]
	rosidl_runtime_c.Uint8__Array_to_Go(t.CustomName[:], *(*[]rosidl_runtime_c.CUint8)(unsafe.Pointer(&cSlice_custom_name)))
	t.FirmwareVersion = uint32(mem.firmware_version)
	t.HardwareVersion = uint32(mem.hardware_version)
	t.Uid = uint64(mem.uid)
	t.CapFlags = uint16(mem.cap_flags)
	t.CustomCapFlags = uint16(mem.custom_cap_flags)
	t.RollMin = float32(mem.roll_min)
	t.RollMax = float32(mem.roll_max)
	t.PitchMin = float32(mem.pitch_min)
	t.PitchMax = float32(mem.pitch_max)
	t.YawMin = float32(mem.yaw_min)
	t.YawMax = float32(mem.yaw_max)
	t.GimbalDeviceCompid = uint8(mem.gimbal_device_compid)
}
func (t *GimbalDeviceInformation) Clone() ros2types.ROS2Msg {
	clone := *t
	return &clone
}

type CGimbalDeviceInformation = C.px4_msgs__msg__GimbalDeviceInformation
type CGimbalDeviceInformation__Sequence = C.px4_msgs__msg__GimbalDeviceInformation__Sequence

func GimbalDeviceInformation__Sequence_to_Go(goSlice *[]GimbalDeviceInformation, cSlice CGimbalDeviceInformation__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]GimbalDeviceInformation, int64(cSlice.size))
	for i := 0; i < int(cSlice.size); i++ {
		cIdx := (*C.px4_msgs__msg__GimbalDeviceInformation__Sequence)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_px4_msgs__msg__GimbalDeviceInformation * uintptr(i)),
		))
		(*goSlice)[i] = GimbalDeviceInformation{}
		(*goSlice)[i].AsGoStruct(unsafe.Pointer(cIdx))
	}
}
func GimbalDeviceInformation__Sequence_to_C(cSlice *CGimbalDeviceInformation__Sequence, goSlice []GimbalDeviceInformation) {
	if len(goSlice) == 0 {
		return
	}
	cSlice.data = (*C.px4_msgs__msg__GimbalDeviceInformation)(C.malloc((C.size_t)(C.sizeof_struct_px4_msgs__msg__GimbalDeviceInformation * uintptr(len(goSlice)))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity

	for i, v := range goSlice {
		cIdx := (*C.px4_msgs__msg__GimbalDeviceInformation)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_px4_msgs__msg__GimbalDeviceInformation * uintptr(i)),
		))
		*cIdx = *(*C.px4_msgs__msg__GimbalDeviceInformation)(v.AsCStruct())
	}
}
func GimbalDeviceInformation__Array_to_Go(goSlice []GimbalDeviceInformation, cSlice []CGimbalDeviceInformation) {
	for i := 0; i < len(cSlice); i++ {
		goSlice[i].AsGoStruct(unsafe.Pointer(&cSlice[i]))
	}
}
func GimbalDeviceInformation__Array_to_C(cSlice []CGimbalDeviceInformation, goSlice []GimbalDeviceInformation) {
	for i := 0; i < len(goSlice); i++ {
		cSlice[i] = *(*C.px4_msgs__msg__GimbalDeviceInformation)(goSlice[i].AsCStruct())
	}
}


