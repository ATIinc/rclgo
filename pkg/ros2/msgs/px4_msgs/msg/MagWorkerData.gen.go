/*
This file is part of rclgo

Copyright Â© 2021 Technology Innovation Institute, United Arab Emirates

Licensed under the Apache License, Version 2.0 (the "License");
	http://www.apache.org/licenses/LICENSE-2.0
*/

/*
THIS FILE IS AUTOGENERATED BY 'rclgo-gen generate'
*/

package px4_msgs_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/ros2/ros2types"
	"github.com/tiiuae/rclgo/pkg/ros2/ros2_type_dispatcher"
	rosidl_runtime_c "github.com/tiiuae/rclgo/pkg/ros2/rosidl_runtime_c"
	
)
/*
#cgo LDFLAGS: -L/opt/ros/foxy/lib -Wl,-rpath=/opt/ros/foxy/lib -lrcl -lrosidl_runtime_c -lrosidl_typesupport_c -lrcutils -lrmw_implementation
#cgo LDFLAGS: -lpx4_msgs__rosidl_typesupport_c -lpx4_msgs__rosidl_generator_c

#cgo CFLAGS: -I/opt/ros/foxy/include

#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/mag_worker_data.h>

*/
import "C"

func init() {
	ros2_type_dispatcher.RegisterROS2MsgTypeNameAlias("px4_msgs/MagWorkerData", &MagWorkerData{})
}
const (
	MagWorkerData_MAX_MAGS uint8 = 4
)

// Do not create instances of this type directly. Always use NewMagWorkerData
// function instead.
type MagWorkerData struct {
	Timestamp uint64 `yaml:"timestamp"`// time since system start (microseconds)
	TimestampSample uint64 `yaml:"timestamp_sample"`
	DoneCount uint32 `yaml:"done_count"`
	CalibrationPointsPerside uint32 `yaml:"calibration_points_perside"`
	CalibrationIntervalPersideUs uint64 `yaml:"calibration_interval_perside_us"`
	CalibrationCounterTotal [4]uint32 `yaml:"calibration_counter_total"`
	SideDataCollected [4]bool `yaml:"side_data_collected"`
	X [4]float32 `yaml:"x"`
	Y [4]float32 `yaml:"y"`
	Z [4]float32 `yaml:"z"`
}

// NewMagWorkerData creates a new MagWorkerData with default values.
func NewMagWorkerData() *MagWorkerData {
	self := MagWorkerData{}
	self.SetDefaults(nil)
	return &self
}

func (t *MagWorkerData) SetDefaults(d interface{}) ros2types.ROS2Msg {
	
	return t
}

func (t *MagWorkerData) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__MagWorkerData())
}
func (t *MagWorkerData) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__MagWorkerData
	return (unsafe.Pointer)(C.px4_msgs__msg__MagWorkerData__create())
}
func (t *MagWorkerData) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__MagWorkerData__destroy((*C.px4_msgs__msg__MagWorkerData)(pointer_to_free))
}
func (t *MagWorkerData) AsCStruct() unsafe.Pointer {
	mem := (*C.px4_msgs__msg__MagWorkerData)(t.PrepareMemory())
	mem.timestamp = C.uint64_t(t.Timestamp)
	mem.timestamp_sample = C.uint64_t(t.TimestampSample)
	mem.done_count = C.uint32_t(t.DoneCount)
	mem.calibration_points_perside = C.uint32_t(t.CalibrationPointsPerside)
	mem.calibration_interval_perside_us = C.uint64_t(t.CalibrationIntervalPersideUs)
	cSlice_calibration_counter_total := mem.calibration_counter_total[:]
	rosidl_runtime_c.Uint32__Array_to_C(*(*[]rosidl_runtime_c.CUint32)(unsafe.Pointer(&cSlice_calibration_counter_total)), t.CalibrationCounterTotal[:])
	cSlice_side_data_collected := mem.side_data_collected[:]
	rosidl_runtime_c.Bool__Array_to_C(*(*[]rosidl_runtime_c.CBool)(unsafe.Pointer(&cSlice_side_data_collected)), t.SideDataCollected[:])
	cSlice_x := mem.x[:]
	rosidl_runtime_c.Float32__Array_to_C(*(*[]rosidl_runtime_c.CFloat32)(unsafe.Pointer(&cSlice_x)), t.X[:])
	cSlice_y := mem.y[:]
	rosidl_runtime_c.Float32__Array_to_C(*(*[]rosidl_runtime_c.CFloat32)(unsafe.Pointer(&cSlice_y)), t.Y[:])
	cSlice_z := mem.z[:]
	rosidl_runtime_c.Float32__Array_to_C(*(*[]rosidl_runtime_c.CFloat32)(unsafe.Pointer(&cSlice_z)), t.Z[:])
	return unsafe.Pointer(mem)
}
func (t *MagWorkerData) AsGoStruct(ros2_message_buffer unsafe.Pointer) {
	mem := (*C.px4_msgs__msg__MagWorkerData)(ros2_message_buffer)
	t.Timestamp = uint64(mem.timestamp)
	t.TimestampSample = uint64(mem.timestamp_sample)
	t.DoneCount = uint32(mem.done_count)
	t.CalibrationPointsPerside = uint32(mem.calibration_points_perside)
	t.CalibrationIntervalPersideUs = uint64(mem.calibration_interval_perside_us)
	cSlice_calibration_counter_total := mem.calibration_counter_total[:]
	rosidl_runtime_c.Uint32__Array_to_Go(t.CalibrationCounterTotal[:], *(*[]rosidl_runtime_c.CUint32)(unsafe.Pointer(&cSlice_calibration_counter_total)))
	cSlice_side_data_collected := mem.side_data_collected[:]
	rosidl_runtime_c.Bool__Array_to_Go(t.SideDataCollected[:], *(*[]rosidl_runtime_c.CBool)(unsafe.Pointer(&cSlice_side_data_collected)))
	cSlice_x := mem.x[:]
	rosidl_runtime_c.Float32__Array_to_Go(t.X[:], *(*[]rosidl_runtime_c.CFloat32)(unsafe.Pointer(&cSlice_x)))
	cSlice_y := mem.y[:]
	rosidl_runtime_c.Float32__Array_to_Go(t.Y[:], *(*[]rosidl_runtime_c.CFloat32)(unsafe.Pointer(&cSlice_y)))
	cSlice_z := mem.z[:]
	rosidl_runtime_c.Float32__Array_to_Go(t.Z[:], *(*[]rosidl_runtime_c.CFloat32)(unsafe.Pointer(&cSlice_z)))
}
func (t *MagWorkerData) Clone() ros2types.ROS2Msg {
	clone := *t
	return &clone
}

type CMagWorkerData = C.px4_msgs__msg__MagWorkerData
type CMagWorkerData__Sequence = C.px4_msgs__msg__MagWorkerData__Sequence

func MagWorkerData__Sequence_to_Go(goSlice *[]MagWorkerData, cSlice CMagWorkerData__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]MagWorkerData, int64(cSlice.size))
	for i := 0; i < int(cSlice.size); i++ {
		cIdx := (*C.px4_msgs__msg__MagWorkerData__Sequence)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_px4_msgs__msg__MagWorkerData * uintptr(i)),
		))
		(*goSlice)[i] = MagWorkerData{}
		(*goSlice)[i].AsGoStruct(unsafe.Pointer(cIdx))
	}
}
func MagWorkerData__Sequence_to_C(cSlice *CMagWorkerData__Sequence, goSlice []MagWorkerData) {
	if len(goSlice) == 0 {
		return
	}
	cSlice.data = (*C.px4_msgs__msg__MagWorkerData)(C.malloc((C.size_t)(C.sizeof_struct_px4_msgs__msg__MagWorkerData * uintptr(len(goSlice)))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity

	for i, v := range goSlice {
		cIdx := (*C.px4_msgs__msg__MagWorkerData)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_px4_msgs__msg__MagWorkerData * uintptr(i)),
		))
		*cIdx = *(*C.px4_msgs__msg__MagWorkerData)(v.AsCStruct())
	}
}
func MagWorkerData__Array_to_Go(goSlice []MagWorkerData, cSlice []CMagWorkerData) {
	for i := 0; i < len(cSlice); i++ {
		goSlice[i].AsGoStruct(unsafe.Pointer(&cSlice[i]))
	}
}
func MagWorkerData__Array_to_C(cSlice []CMagWorkerData, goSlice []MagWorkerData) {
	for i := 0; i < len(goSlice); i++ {
		cSlice[i] = *(*C.px4_msgs__msg__MagWorkerData)(goSlice[i].AsCStruct())
	}
}


