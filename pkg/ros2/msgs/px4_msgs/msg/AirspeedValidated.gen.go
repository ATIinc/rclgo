/*
This file is part of rclgo

Copyright Â© 2021 Technology Innovation Institute, United Arab Emirates

Licensed under the Apache License, Version 2.0 (the "License");
	http://www.apache.org/licenses/LICENSE-2.0
*/

/*
THIS FILE IS AUTOGENERATED BY 'rclgo-gen generate'
*/

package px4_msgs_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/ros2/ros2types"
	"github.com/tiiuae/rclgo/pkg/ros2/ros2_type_dispatcher"
	
)
/*
#cgo LDFLAGS: -L/opt/ros/foxy/lib -Wl,-rpath=/opt/ros/foxy/lib -lrcl -lrosidl_runtime_c -lrosidl_typesupport_c -lrcutils -lrmw_implementation
#cgo LDFLAGS: -lpx4_msgs__rosidl_typesupport_c -lpx4_msgs__rosidl_generator_c

#cgo CFLAGS: -I/opt/ros/foxy/include

#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/airspeed_validated.h>

*/
import "C"

func init() {
	ros2_type_dispatcher.RegisterROS2MsgTypeNameAlias("px4_msgs/AirspeedValidated", &AirspeedValidated{})
}

// Do not create instances of this type directly. Always use NewAirspeedValidated
// function instead.
type AirspeedValidated struct {
	Timestamp uint64 `yaml:"timestamp"`// time since system start (microseconds)
	IndicatedAirspeedMS float32 `yaml:"indicated_airspeed_m_s"`// indicated airspeed in m/s (IAS), set to NAN if invalid
	CalibratedAirspeedMS float32 `yaml:"calibrated_airspeed_m_s"`// calibrated airspeed in m/s (CAS, accounts for instrumentation errors), set to NAN if invalid
	TrueAirspeedMS float32 `yaml:"true_airspeed_m_s"`// true filtered airspeed in m/s (TAS), set to NAN if invalid
	CalibratedGroundMinusWindMS float32 `yaml:"calibrated_ground_minus_wind_m_s"`// CAS calculated from groundspeed - windspeed, where windspeed is estimated based on a zero-sideslip assumption, set to NAN if invalid
	TrueGroundMinusWindMS float32 `yaml:"true_ground_minus_wind_m_s"`// TAS calculated from groundspeed - windspeed, where windspeed is estimated based on a zero-sideslip assumption, set to NAN if invalid
	AirspeedSensorMeasurementValid bool `yaml:"airspeed_sensor_measurement_valid"`// True if data from at least one airspeed sensor is declared valid.
	SelectedAirspeedIndex int8 `yaml:"selected_airspeed_index"`// 1-3: airspeed sensor index, 0: groundspeed-windspeed, -1: airspeed invalid
}

// NewAirspeedValidated creates a new AirspeedValidated with default values.
func NewAirspeedValidated() *AirspeedValidated {
	self := AirspeedValidated{}
	self.SetDefaults(nil)
	return &self
}

func (t *AirspeedValidated) SetDefaults(d interface{}) ros2types.ROS2Msg {
	
	return t
}

func (t *AirspeedValidated) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__AirspeedValidated())
}
func (t *AirspeedValidated) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__AirspeedValidated
	return (unsafe.Pointer)(C.px4_msgs__msg__AirspeedValidated__create())
}
func (t *AirspeedValidated) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__AirspeedValidated__destroy((*C.px4_msgs__msg__AirspeedValidated)(pointer_to_free))
}
func (t *AirspeedValidated) AsCStruct() unsafe.Pointer {
	mem := (*C.px4_msgs__msg__AirspeedValidated)(t.PrepareMemory())
	mem.timestamp = C.uint64_t(t.Timestamp)
	mem.indicated_airspeed_m_s = C.float(t.IndicatedAirspeedMS)
	mem.calibrated_airspeed_m_s = C.float(t.CalibratedAirspeedMS)
	mem.true_airspeed_m_s = C.float(t.TrueAirspeedMS)
	mem.calibrated_ground_minus_wind_m_s = C.float(t.CalibratedGroundMinusWindMS)
	mem.true_ground_minus_wind_m_s = C.float(t.TrueGroundMinusWindMS)
	mem.airspeed_sensor_measurement_valid = C.bool(t.AirspeedSensorMeasurementValid)
	mem.selected_airspeed_index = C.int8_t(t.SelectedAirspeedIndex)
	return unsafe.Pointer(mem)
}
func (t *AirspeedValidated) AsGoStruct(ros2_message_buffer unsafe.Pointer) {
	mem := (*C.px4_msgs__msg__AirspeedValidated)(ros2_message_buffer)
	t.Timestamp = uint64(mem.timestamp)
	t.IndicatedAirspeedMS = float32(mem.indicated_airspeed_m_s)
	t.CalibratedAirspeedMS = float32(mem.calibrated_airspeed_m_s)
	t.TrueAirspeedMS = float32(mem.true_airspeed_m_s)
	t.CalibratedGroundMinusWindMS = float32(mem.calibrated_ground_minus_wind_m_s)
	t.TrueGroundMinusWindMS = float32(mem.true_ground_minus_wind_m_s)
	t.AirspeedSensorMeasurementValid = bool(mem.airspeed_sensor_measurement_valid)
	t.SelectedAirspeedIndex = int8(mem.selected_airspeed_index)
}
func (t *AirspeedValidated) Clone() ros2types.ROS2Msg {
	clone := *t
	return &clone
}

type CAirspeedValidated = C.px4_msgs__msg__AirspeedValidated
type CAirspeedValidated__Sequence = C.px4_msgs__msg__AirspeedValidated__Sequence

func AirspeedValidated__Sequence_to_Go(goSlice *[]AirspeedValidated, cSlice CAirspeedValidated__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]AirspeedValidated, int64(cSlice.size))
	for i := 0; i < int(cSlice.size); i++ {
		cIdx := (*C.px4_msgs__msg__AirspeedValidated__Sequence)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_px4_msgs__msg__AirspeedValidated * uintptr(i)),
		))
		(*goSlice)[i] = AirspeedValidated{}
		(*goSlice)[i].AsGoStruct(unsafe.Pointer(cIdx))
	}
}
func AirspeedValidated__Sequence_to_C(cSlice *CAirspeedValidated__Sequence, goSlice []AirspeedValidated) {
	if len(goSlice) == 0 {
		return
	}
	cSlice.data = (*C.px4_msgs__msg__AirspeedValidated)(C.malloc((C.size_t)(C.sizeof_struct_px4_msgs__msg__AirspeedValidated * uintptr(len(goSlice)))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity

	for i, v := range goSlice {
		cIdx := (*C.px4_msgs__msg__AirspeedValidated)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_px4_msgs__msg__AirspeedValidated * uintptr(i)),
		))
		*cIdx = *(*C.px4_msgs__msg__AirspeedValidated)(v.AsCStruct())
	}
}
func AirspeedValidated__Array_to_Go(goSlice []AirspeedValidated, cSlice []CAirspeedValidated) {
	for i := 0; i < len(cSlice); i++ {
		goSlice[i].AsGoStruct(unsafe.Pointer(&cSlice[i]))
	}
}
func AirspeedValidated__Array_to_C(cSlice []CAirspeedValidated, goSlice []AirspeedValidated) {
	for i := 0; i < len(goSlice); i++ {
		cSlice[i] = *(*C.px4_msgs__msg__AirspeedValidated)(goSlice[i].AsCStruct())
	}
}


