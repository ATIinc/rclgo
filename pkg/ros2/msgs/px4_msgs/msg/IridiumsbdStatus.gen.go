/*
This file is part of rclgo

Copyright Â© 2021 Technology Innovation Institute, United Arab Emirates

Licensed under the Apache License, Version 2.0 (the "License");
	http://www.apache.org/licenses/LICENSE-2.0
*/

/*
THIS FILE IS AUTOGENERATED BY 'rclgo-gen generate'
*/

package px4_msgs_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/ros2/ros2types"
	"github.com/tiiuae/rclgo/pkg/ros2/ros2_type_dispatcher"
	
)
/*
#cgo LDFLAGS: -L/opt/ros/foxy/lib -Wl,-rpath=/opt/ros/foxy/lib -lrcl -lrosidl_runtime_c -lrosidl_typesupport_c -lrcutils -lrmw_implementation
#cgo LDFLAGS: -lpx4_msgs__rosidl_typesupport_c -lpx4_msgs__rosidl_generator_c

#cgo CFLAGS: -I/opt/ros/foxy/include

#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/iridiumsbd_status.h>

*/
import "C"

func init() {
	ros2_type_dispatcher.RegisterROS2MsgTypeNameAlias("px4_msgs/IridiumsbdStatus", &IridiumsbdStatus{})
}

// Do not create instances of this type directly. Always use NewIridiumsbdStatus
// function instead.
type IridiumsbdStatus struct {
	Timestamp uint64 `yaml:"timestamp"`// time since system start (microseconds)
	LastHeartbeat uint64 `yaml:"last_heartbeat"`// timestamp of the last successful sbd session
	TxBufWriteIndex uint16 `yaml:"tx_buf_write_index"`// current size of the tx buffer
	RxBufReadIndex uint16 `yaml:"rx_buf_read_index"`// the rx buffer is parsed up to that index
	RxBufEndIndex uint16 `yaml:"rx_buf_end_index"`// current size of the rx buffer
	FailedSbdSessions uint16 `yaml:"failed_sbd_sessions"`// number of failed sbd sessions
	SuccessfulSbdSessions uint16 `yaml:"successful_sbd_sessions"`// number of successfull sbd sessions
	NumTxBufReset uint16 `yaml:"num_tx_buf_reset"`// number of times the tx buffer was reset
	SignalQuality uint8 `yaml:"signal_quality"`// current signal quality, 0 is no signal, 5 the best
	State uint8 `yaml:"state"`// current state of the driver, see the satcom_state of IridiumSBD.h for the definition
	RingPending bool `yaml:"ring_pending"`// indicates if a ring call is pending
	TxBufWritePending bool `yaml:"tx_buf_write_pending"`// indicates if a tx buffer write is pending
	TxSessionPending bool `yaml:"tx_session_pending"`// indicates if a tx session is pending
	RxReadPending bool `yaml:"rx_read_pending"`// indicates if a rx read is pending
	RxSessionPending bool `yaml:"rx_session_pending"`// indicates if a rx session is pending
}

// NewIridiumsbdStatus creates a new IridiumsbdStatus with default values.
func NewIridiumsbdStatus() *IridiumsbdStatus {
	self := IridiumsbdStatus{}
	self.SetDefaults(nil)
	return &self
}

func (t *IridiumsbdStatus) SetDefaults(d interface{}) ros2types.ROS2Msg {
	
	return t
}

func (t *IridiumsbdStatus) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__IridiumsbdStatus())
}
func (t *IridiumsbdStatus) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__IridiumsbdStatus
	return (unsafe.Pointer)(C.px4_msgs__msg__IridiumsbdStatus__create())
}
func (t *IridiumsbdStatus) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__IridiumsbdStatus__destroy((*C.px4_msgs__msg__IridiumsbdStatus)(pointer_to_free))
}
func (t *IridiumsbdStatus) AsCStruct() unsafe.Pointer {
	mem := (*C.px4_msgs__msg__IridiumsbdStatus)(t.PrepareMemory())
	mem.timestamp = C.uint64_t(t.Timestamp)
	mem.last_heartbeat = C.uint64_t(t.LastHeartbeat)
	mem.tx_buf_write_index = C.uint16_t(t.TxBufWriteIndex)
	mem.rx_buf_read_index = C.uint16_t(t.RxBufReadIndex)
	mem.rx_buf_end_index = C.uint16_t(t.RxBufEndIndex)
	mem.failed_sbd_sessions = C.uint16_t(t.FailedSbdSessions)
	mem.successful_sbd_sessions = C.uint16_t(t.SuccessfulSbdSessions)
	mem.num_tx_buf_reset = C.uint16_t(t.NumTxBufReset)
	mem.signal_quality = C.uint8_t(t.SignalQuality)
	mem.state = C.uint8_t(t.State)
	mem.ring_pending = C.bool(t.RingPending)
	mem.tx_buf_write_pending = C.bool(t.TxBufWritePending)
	mem.tx_session_pending = C.bool(t.TxSessionPending)
	mem.rx_read_pending = C.bool(t.RxReadPending)
	mem.rx_session_pending = C.bool(t.RxSessionPending)
	return unsafe.Pointer(mem)
}
func (t *IridiumsbdStatus) AsGoStruct(ros2_message_buffer unsafe.Pointer) {
	mem := (*C.px4_msgs__msg__IridiumsbdStatus)(ros2_message_buffer)
	t.Timestamp = uint64(mem.timestamp)
	t.LastHeartbeat = uint64(mem.last_heartbeat)
	t.TxBufWriteIndex = uint16(mem.tx_buf_write_index)
	t.RxBufReadIndex = uint16(mem.rx_buf_read_index)
	t.RxBufEndIndex = uint16(mem.rx_buf_end_index)
	t.FailedSbdSessions = uint16(mem.failed_sbd_sessions)
	t.SuccessfulSbdSessions = uint16(mem.successful_sbd_sessions)
	t.NumTxBufReset = uint16(mem.num_tx_buf_reset)
	t.SignalQuality = uint8(mem.signal_quality)
	t.State = uint8(mem.state)
	t.RingPending = bool(mem.ring_pending)
	t.TxBufWritePending = bool(mem.tx_buf_write_pending)
	t.TxSessionPending = bool(mem.tx_session_pending)
	t.RxReadPending = bool(mem.rx_read_pending)
	t.RxSessionPending = bool(mem.rx_session_pending)
}
func (t *IridiumsbdStatus) Clone() ros2types.ROS2Msg {
	clone := *t
	return &clone
}

type CIridiumsbdStatus = C.px4_msgs__msg__IridiumsbdStatus
type CIridiumsbdStatus__Sequence = C.px4_msgs__msg__IridiumsbdStatus__Sequence

func IridiumsbdStatus__Sequence_to_Go(goSlice *[]IridiumsbdStatus, cSlice CIridiumsbdStatus__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]IridiumsbdStatus, int64(cSlice.size))
	for i := 0; i < int(cSlice.size); i++ {
		cIdx := (*C.px4_msgs__msg__IridiumsbdStatus__Sequence)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_px4_msgs__msg__IridiumsbdStatus * uintptr(i)),
		))
		(*goSlice)[i] = IridiumsbdStatus{}
		(*goSlice)[i].AsGoStruct(unsafe.Pointer(cIdx))
	}
}
func IridiumsbdStatus__Sequence_to_C(cSlice *CIridiumsbdStatus__Sequence, goSlice []IridiumsbdStatus) {
	if len(goSlice) == 0 {
		return
	}
	cSlice.data = (*C.px4_msgs__msg__IridiumsbdStatus)(C.malloc((C.size_t)(C.sizeof_struct_px4_msgs__msg__IridiumsbdStatus * uintptr(len(goSlice)))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity

	for i, v := range goSlice {
		cIdx := (*C.px4_msgs__msg__IridiumsbdStatus)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_px4_msgs__msg__IridiumsbdStatus * uintptr(i)),
		))
		*cIdx = *(*C.px4_msgs__msg__IridiumsbdStatus)(v.AsCStruct())
	}
}
func IridiumsbdStatus__Array_to_Go(goSlice []IridiumsbdStatus, cSlice []CIridiumsbdStatus) {
	for i := 0; i < len(cSlice); i++ {
		goSlice[i].AsGoStruct(unsafe.Pointer(&cSlice[i]))
	}
}
func IridiumsbdStatus__Array_to_C(cSlice []CIridiumsbdStatus, goSlice []IridiumsbdStatus) {
	for i := 0; i < len(goSlice); i++ {
		cSlice[i] = *(*C.px4_msgs__msg__IridiumsbdStatus)(goSlice[i].AsCStruct())
	}
}


