/*
This file is part of rclgo

Copyright Â© 2021 Technology Innovation Institute, United Arab Emirates

Licensed under the Apache License, Version 2.0 (the "License");
	http://www.apache.org/licenses/LICENSE-2.0
*/

/*
THIS FILE IS AUTOGENERATED BY 'rclgo-gen generate'
*/

package px4_msgs
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/ros2/ros2types"
	"github.com/tiiuae/rclgo/pkg/ros2/ros2_type_dispatcher"
	
)
/*
#cgo LDFLAGS: -L/opt/ros/foxy/lib -Wl,-rpath=/opt/ros/foxy/lib -lrcl -lrosidl_runtime_c -lrosidl_typesupport_c -lrcutils -lrmw_implementation
#cgo LDFLAGS: -lpx4_msgs__rosidl_typesupport_c -lpx4_msgs__rosidl_generator_c

#cgo CFLAGS: -I/opt/ros/foxy/include

#include <rosidl_runtime_c/message_type_support_struct.h>
#include <px4_msgs/msg/sensor_baro.h>
*/
import "C"

func init() {
	ros2_type_dispatcher.RegisterROS2MsgTypeNameAlias("px4_msgs/SensorBaro", &SensorBaro{})
}

// Do not create instances of this type directly. Always use NewSensorBaro
// function instead.
type SensorBaro struct {
	Timestamp uint64 `yaml:"timestamp"`// time since system start (microseconds)
	TimestampSample uint64 `yaml:"timestamp_sample"`
	DeviceId uint32 `yaml:"device_id"`// unique device ID for the sensor that does not change between power cycles
	ErrorCount uint32 `yaml:"error_count"`
	Pressure float32 `yaml:"pressure"`// static pressure measurement in millibar
	Temperature float32 `yaml:"temperature"`// static temperature measurement in deg Celsius
}

// NewSensorBaro creates a new SensorBaro with default values.
func NewSensorBaro() *SensorBaro {
	self := SensorBaro{}
	self.SetDefaults(nil)
	return &self
}

func (t *SensorBaro) SetDefaults(d interface{}) ros2types.ROS2Msg {
	
	return t
}

func (t *SensorBaro) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__SensorBaro())
}
func (t *SensorBaro) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__SensorBaro
	return (unsafe.Pointer)(C.px4_msgs__msg__SensorBaro__create())
}
func (t *SensorBaro) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__SensorBaro__destroy((*C.px4_msgs__msg__SensorBaro)(pointer_to_free))
}
func (t *SensorBaro) AsCStruct() unsafe.Pointer {
	mem := (*C.px4_msgs__msg__SensorBaro)(t.PrepareMemory())
	mem.timestamp = C.uint64_t(t.Timestamp)
	mem.timestamp_sample = C.uint64_t(t.TimestampSample)
	mem.device_id = C.uint32_t(t.DeviceId)
	mem.error_count = C.uint32_t(t.ErrorCount)
	mem.pressure = C.float(t.Pressure)
	mem.temperature = C.float(t.Temperature)
	return unsafe.Pointer(mem)
}
func (t *SensorBaro) AsGoStruct(ros2_message_buffer unsafe.Pointer) {
	mem := (*C.px4_msgs__msg__SensorBaro)(ros2_message_buffer)
	t.Timestamp = uint64(mem.timestamp)
	t.TimestampSample = uint64(mem.timestamp_sample)
	t.DeviceId = uint32(mem.device_id)
	t.ErrorCount = uint32(mem.error_count)
	t.Pressure = float32(mem.pressure)
	t.Temperature = float32(mem.temperature)
}
func (t *SensorBaro) Clone() ros2types.ROS2Msg {
	clone := *t
	return &clone
}

type CSensorBaro = C.px4_msgs__msg__SensorBaro
type CSensorBaro__Sequence = C.px4_msgs__msg__SensorBaro__Sequence

func SensorBaro__Sequence_to_Go(goSlice *[]SensorBaro, cSlice CSensorBaro__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]SensorBaro, int64(cSlice.size))
	for i := 0; i < int(cSlice.size); i++ {
		cIdx := (*C.px4_msgs__msg__SensorBaro__Sequence)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_px4_msgs__msg__SensorBaro * uintptr(i)),
		))
		(*goSlice)[i] = SensorBaro{}
		(*goSlice)[i].AsGoStruct(unsafe.Pointer(cIdx))
	}
}
func SensorBaro__Sequence_to_C(cSlice *CSensorBaro__Sequence, goSlice []SensorBaro) {
	if len(goSlice) == 0 {
		return
	}
	cSlice.data = (*C.px4_msgs__msg__SensorBaro)(C.malloc((C.size_t)(C.sizeof_struct_px4_msgs__msg__SensorBaro * uintptr(len(goSlice)))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity

	for i, v := range goSlice {
		cIdx := (*C.px4_msgs__msg__SensorBaro)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_px4_msgs__msg__SensorBaro * uintptr(i)),
		))
		*cIdx = *(*C.px4_msgs__msg__SensorBaro)(v.AsCStruct())
	}
}
func SensorBaro__Array_to_Go(goSlice []SensorBaro, cSlice []CSensorBaro) {
	for i := 0; i < len(cSlice); i++ {
		goSlice[i].AsGoStruct(unsafe.Pointer(&cSlice[i]))
	}
}
func SensorBaro__Array_to_C(cSlice []CSensorBaro, goSlice []SensorBaro) {
	for i := 0; i < len(goSlice); i++ {
		cSlice[i] = *(*C.px4_msgs__msg__SensorBaro)(goSlice[i].AsCStruct())
	}
}


