/*
This file is part of rclgo

Copyright Â© 2021 Technology Innovation Institute, United Arab Emirates

Licensed under the Apache License, Version 2.0 (the "License");
	http://www.apache.org/licenses/LICENSE-2.0
*/

/*
THIS FILE IS AUTOGENERATED BY 'rclgo-gen generate'
*/

package px4_msgs_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/ros2/ros2types"
	"github.com/tiiuae/rclgo/pkg/ros2/ros2_type_dispatcher"
	rosidl_runtime_c "github.com/tiiuae/rclgo/pkg/ros2/rosidl_runtime_c"
	
)
/*
#cgo LDFLAGS: -L/opt/ros/foxy/lib -Wl,-rpath=/opt/ros/foxy/lib -lrcl -lrosidl_runtime_c -lrosidl_typesupport_c -lrcutils -lrmw_implementation
#cgo LDFLAGS: -lpx4_msgs__rosidl_typesupport_c -lpx4_msgs__rosidl_generator_c

#cgo CFLAGS: -I/opt/ros/foxy/include

#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/uavcan_parameter_value.h>

*/
import "C"

func init() {
	ros2_type_dispatcher.RegisterROS2MsgTypeNameAlias("px4_msgs/UavcanParameterValue", &UavcanParameterValue{})
}

// Do not create instances of this type directly. Always use NewUavcanParameterValue
// function instead.
type UavcanParameterValue struct {
	Timestamp uint64 `yaml:"timestamp"`// time since system start (microseconds). UAVCAN-MAVLink parameter bridge response type
	NodeId uint8 `yaml:"node_id"`// UAVCAN node ID mapped from MAVLink component ID. UAVCAN-MAVLink parameter bridge response type
	ParamId [17]byte `yaml:"param_id"`// MAVLink/UAVCAN parameter name. UAVCAN-MAVLink parameter bridge response type
	ParamIndex int16 `yaml:"param_index"`// parameter index, if known. UAVCAN-MAVLink parameter bridge response type
	ParamCount uint16 `yaml:"param_count"`// number of parameters exposed by the node. UAVCAN-MAVLink parameter bridge response type
	ParamType uint8 `yaml:"param_type"`// MAVLink parameter type. UAVCAN-MAVLink parameter bridge response type
	IntValue int64 `yaml:"int_value"`// current value if param_type is int-like. UAVCAN-MAVLink parameter bridge response type
	RealValue float32 `yaml:"real_value"`// current value if param_type is float-like. UAVCAN-MAVLink parameter bridge response type
}

// NewUavcanParameterValue creates a new UavcanParameterValue with default values.
func NewUavcanParameterValue() *UavcanParameterValue {
	self := UavcanParameterValue{}
	self.SetDefaults(nil)
	return &self
}

func (t *UavcanParameterValue) SetDefaults(d interface{}) ros2types.ROS2Msg {
	
	return t
}

func (t *UavcanParameterValue) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__UavcanParameterValue())
}
func (t *UavcanParameterValue) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__UavcanParameterValue
	return (unsafe.Pointer)(C.px4_msgs__msg__UavcanParameterValue__create())
}
func (t *UavcanParameterValue) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__UavcanParameterValue__destroy((*C.px4_msgs__msg__UavcanParameterValue)(pointer_to_free))
}
func (t *UavcanParameterValue) AsCStruct() unsafe.Pointer {
	mem := (*C.px4_msgs__msg__UavcanParameterValue)(t.PrepareMemory())
	mem.timestamp = C.uint64_t(t.Timestamp)
	mem.node_id = C.uint8_t(t.NodeId)
	cSlice_param_id := mem.param_id[:]
	rosidl_runtime_c.Char__Array_to_C(*(*[]rosidl_runtime_c.CChar)(unsafe.Pointer(&cSlice_param_id)), t.ParamId[:])
	mem.param_index = C.int16_t(t.ParamIndex)
	mem.param_count = C.uint16_t(t.ParamCount)
	mem.param_type = C.uint8_t(t.ParamType)
	mem.int_value = C.int64_t(t.IntValue)
	mem.real_value = C.float(t.RealValue)
	return unsafe.Pointer(mem)
}
func (t *UavcanParameterValue) AsGoStruct(ros2_message_buffer unsafe.Pointer) {
	mem := (*C.px4_msgs__msg__UavcanParameterValue)(ros2_message_buffer)
	t.Timestamp = uint64(mem.timestamp)
	t.NodeId = uint8(mem.node_id)
	cSlice_param_id := mem.param_id[:]
	rosidl_runtime_c.Char__Array_to_Go(t.ParamId[:], *(*[]rosidl_runtime_c.CChar)(unsafe.Pointer(&cSlice_param_id)))
	t.ParamIndex = int16(mem.param_index)
	t.ParamCount = uint16(mem.param_count)
	t.ParamType = uint8(mem.param_type)
	t.IntValue = int64(mem.int_value)
	t.RealValue = float32(mem.real_value)
}
func (t *UavcanParameterValue) Clone() ros2types.ROS2Msg {
	clone := *t
	return &clone
}

type CUavcanParameterValue = C.px4_msgs__msg__UavcanParameterValue
type CUavcanParameterValue__Sequence = C.px4_msgs__msg__UavcanParameterValue__Sequence

func UavcanParameterValue__Sequence_to_Go(goSlice *[]UavcanParameterValue, cSlice CUavcanParameterValue__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]UavcanParameterValue, int64(cSlice.size))
	for i := 0; i < int(cSlice.size); i++ {
		cIdx := (*C.px4_msgs__msg__UavcanParameterValue__Sequence)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_px4_msgs__msg__UavcanParameterValue * uintptr(i)),
		))
		(*goSlice)[i] = UavcanParameterValue{}
		(*goSlice)[i].AsGoStruct(unsafe.Pointer(cIdx))
	}
}
func UavcanParameterValue__Sequence_to_C(cSlice *CUavcanParameterValue__Sequence, goSlice []UavcanParameterValue) {
	if len(goSlice) == 0 {
		return
	}
	cSlice.data = (*C.px4_msgs__msg__UavcanParameterValue)(C.malloc((C.size_t)(C.sizeof_struct_px4_msgs__msg__UavcanParameterValue * uintptr(len(goSlice)))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity

	for i, v := range goSlice {
		cIdx := (*C.px4_msgs__msg__UavcanParameterValue)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_px4_msgs__msg__UavcanParameterValue * uintptr(i)),
		))
		*cIdx = *(*C.px4_msgs__msg__UavcanParameterValue)(v.AsCStruct())
	}
}
func UavcanParameterValue__Array_to_Go(goSlice []UavcanParameterValue, cSlice []CUavcanParameterValue) {
	for i := 0; i < len(cSlice); i++ {
		goSlice[i].AsGoStruct(unsafe.Pointer(&cSlice[i]))
	}
}
func UavcanParameterValue__Array_to_C(cSlice []CUavcanParameterValue, goSlice []UavcanParameterValue) {
	for i := 0; i < len(goSlice); i++ {
		cSlice[i] = *(*C.px4_msgs__msg__UavcanParameterValue)(goSlice[i].AsCStruct())
	}
}


