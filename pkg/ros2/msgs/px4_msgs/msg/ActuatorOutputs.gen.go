/*
This file is part of rclgo

Copyright Â© 2021 Technology Innovation Institute, United Arab Emirates

Licensed under the Apache License, Version 2.0 (the "License");
	http://www.apache.org/licenses/LICENSE-2.0
*/

/*
THIS FILE IS AUTOGENERATED BY 'rclgo-gen generate'
*/

package px4_msgs
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/ros2/ros2types"
	"github.com/tiiuae/rclgo/pkg/ros2/ros2_type_dispatcher"
	rosidl_runtime_c "github.com/tiiuae/rclgo/pkg/ros2/rosidl_runtime_c"
	
)
/*
#cgo LDFLAGS: -L/opt/ros/foxy/lib -Wl,-rpath=/opt/ros/foxy/lib -lrcl -lrosidl_runtime_c -lrosidl_typesupport_c -lrcutils -lrmw_implementation
#cgo LDFLAGS: -lpx4_msgs__rosidl_typesupport_c -lpx4_msgs__rosidl_generator_c

#cgo CFLAGS: -I/opt/ros/foxy/include

#include <rosidl_runtime_c/message_type_support_struct.h>
#include <px4_msgs/msg/actuator_outputs.h>
*/
import "C"

func init() {
	ros2_type_dispatcher.RegisterROS2MsgTypeNameAlias("px4_msgs/ActuatorOutputs", &ActuatorOutputs{})
}
const (
	ActuatorOutputs_NUM_ACTUATOR_OUTPUTS uint8 = 16
	ActuatorOutputs_NUM_ACTUATOR_OUTPUT_GROUPS uint8 = 4// for sanity checking
)

// Do not create instances of this type directly. Always use NewActuatorOutputs
// function instead.
type ActuatorOutputs struct {
	Timestamp uint64 `yaml:"timestamp"`// time since system start (microseconds)
	Noutputs uint32 `yaml:"noutputs"`// valid outputs
	Output [16]float32 `yaml:"output"`// output data, in natural output units
}

// NewActuatorOutputs creates a new ActuatorOutputs with default values.
func NewActuatorOutputs() *ActuatorOutputs {
	self := ActuatorOutputs{}
	self.SetDefaults(nil)
	return &self
}

func (t *ActuatorOutputs) SetDefaults(d interface{}) ros2types.ROS2Msg {
	
	return t
}

func (t *ActuatorOutputs) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__ActuatorOutputs())
}
func (t *ActuatorOutputs) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__ActuatorOutputs
	return (unsafe.Pointer)(C.px4_msgs__msg__ActuatorOutputs__create())
}
func (t *ActuatorOutputs) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__ActuatorOutputs__destroy((*C.px4_msgs__msg__ActuatorOutputs)(pointer_to_free))
}
func (t *ActuatorOutputs) AsCStruct() unsafe.Pointer {
	mem := (*C.px4_msgs__msg__ActuatorOutputs)(t.PrepareMemory())
	mem.timestamp = C.uint64_t(t.Timestamp)
	mem.noutputs = C.uint32_t(t.Noutputs)
	cSlice_output := mem.output[:]
	rosidl_runtime_c.Float32__Array_to_C(*(*[]rosidl_runtime_c.CFloat32)(unsafe.Pointer(&cSlice_output)), t.Output[:])
	return unsafe.Pointer(mem)
}
func (t *ActuatorOutputs) AsGoStruct(ros2_message_buffer unsafe.Pointer) {
	mem := (*C.px4_msgs__msg__ActuatorOutputs)(ros2_message_buffer)
	t.Timestamp = uint64(mem.timestamp)
	t.Noutputs = uint32(mem.noutputs)
	cSlice_output := mem.output[:]
	rosidl_runtime_c.Float32__Array_to_Go(t.Output[:], *(*[]rosidl_runtime_c.CFloat32)(unsafe.Pointer(&cSlice_output)))
}
func (t *ActuatorOutputs) Clone() ros2types.ROS2Msg {
	clone := *t
	return &clone
}

type CActuatorOutputs = C.px4_msgs__msg__ActuatorOutputs
type CActuatorOutputs__Sequence = C.px4_msgs__msg__ActuatorOutputs__Sequence

func ActuatorOutputs__Sequence_to_Go(goSlice *[]ActuatorOutputs, cSlice CActuatorOutputs__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]ActuatorOutputs, int64(cSlice.size))
	for i := 0; i < int(cSlice.size); i++ {
		cIdx := (*C.px4_msgs__msg__ActuatorOutputs__Sequence)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_px4_msgs__msg__ActuatorOutputs * uintptr(i)),
		))
		(*goSlice)[i] = ActuatorOutputs{}
		(*goSlice)[i].AsGoStruct(unsafe.Pointer(cIdx))
	}
}
func ActuatorOutputs__Sequence_to_C(cSlice *CActuatorOutputs__Sequence, goSlice []ActuatorOutputs) {
	if len(goSlice) == 0 {
		return
	}
	cSlice.data = (*C.px4_msgs__msg__ActuatorOutputs)(C.malloc((C.size_t)(C.sizeof_struct_px4_msgs__msg__ActuatorOutputs * uintptr(len(goSlice)))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity

	for i, v := range goSlice {
		cIdx := (*C.px4_msgs__msg__ActuatorOutputs)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_px4_msgs__msg__ActuatorOutputs * uintptr(i)),
		))
		*cIdx = *(*C.px4_msgs__msg__ActuatorOutputs)(v.AsCStruct())
	}
}
func ActuatorOutputs__Array_to_Go(goSlice []ActuatorOutputs, cSlice []CActuatorOutputs) {
	for i := 0; i < len(cSlice); i++ {
		goSlice[i].AsGoStruct(unsafe.Pointer(&cSlice[i]))
	}
}
func ActuatorOutputs__Array_to_C(cSlice []CActuatorOutputs, goSlice []ActuatorOutputs) {
	for i := 0; i < len(goSlice); i++ {
		cSlice[i] = *(*C.px4_msgs__msg__ActuatorOutputs)(goSlice[i].AsCStruct())
	}
}


