/*
This file is part of rclgo

Copyright Â© 2021 Technology Innovation Institute, United Arab Emirates

Licensed under the Apache License, Version 2.0 (the "License");
	http://www.apache.org/licenses/LICENSE-2.0
*/

/*
THIS FILE IS AUTOGENERATED BY 'rclgo-gen generate'
*/

package px4_msgs
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/ros2/ros2types"
	"github.com/tiiuae/rclgo/pkg/ros2/ros2_type_dispatcher"
	rosidl_runtime_c "github.com/tiiuae/rclgo/pkg/ros2/rosidl_runtime_c"
	
)
/*
#cgo LDFLAGS: -L/opt/ros/foxy/lib -Wl,-rpath=/opt/ros/foxy/lib -lrcl -lrosidl_runtime_c -lrosidl_typesupport_c -lrcutils -lrmw_implementation
#cgo LDFLAGS: -lpx4_msgs__rosidl_typesupport_c -lpx4_msgs__rosidl_generator_c

#cgo CFLAGS: -I/opt/ros/foxy/include

#include <rosidl_runtime_c/message_type_support_struct.h>
#include <px4_msgs/msg/trajectory_waypoint.h>
*/
import "C"

func init() {
	ros2_type_dispatcher.RegisterROS2MsgTypeNameAlias("px4_msgs/TrajectoryWaypoint", &TrajectoryWaypoint{})
}

// Do not create instances of this type directly. Always use NewTrajectoryWaypoint
// function instead.
type TrajectoryWaypoint struct {
	Timestamp uint64 `yaml:"timestamp"`// time since system start (microseconds)
	Position [3]float32 `yaml:"position"`
	Velocity [3]float32 `yaml:"velocity"`
	Acceleration [3]float32 `yaml:"acceleration"`
	Yaw float32 `yaml:"yaw"`
	YawSpeed float32 `yaml:"yaw_speed"`
	PointValid bool `yaml:"point_valid"`
	Type uint8 `yaml:"type"`
}

// NewTrajectoryWaypoint creates a new TrajectoryWaypoint with default values.
func NewTrajectoryWaypoint() *TrajectoryWaypoint {
	self := TrajectoryWaypoint{}
	self.SetDefaults(nil)
	return &self
}

func (t *TrajectoryWaypoint) SetDefaults(d interface{}) ros2types.ROS2Msg {
	
	return t
}

func (t *TrajectoryWaypoint) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__TrajectoryWaypoint())
}
func (t *TrajectoryWaypoint) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__TrajectoryWaypoint
	return (unsafe.Pointer)(C.px4_msgs__msg__TrajectoryWaypoint__create())
}
func (t *TrajectoryWaypoint) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__TrajectoryWaypoint__destroy((*C.px4_msgs__msg__TrajectoryWaypoint)(pointer_to_free))
}
func (t *TrajectoryWaypoint) AsCStruct() unsafe.Pointer {
	mem := (*C.px4_msgs__msg__TrajectoryWaypoint)(t.PrepareMemory())
	mem.timestamp = C.uint64_t(t.Timestamp)
	cSlice_position := mem.position[:]
	rosidl_runtime_c.Float32__Array_to_C(*(*[]rosidl_runtime_c.CFloat32)(unsafe.Pointer(&cSlice_position)), t.Position[:])
	cSlice_velocity := mem.velocity[:]
	rosidl_runtime_c.Float32__Array_to_C(*(*[]rosidl_runtime_c.CFloat32)(unsafe.Pointer(&cSlice_velocity)), t.Velocity[:])
	cSlice_acceleration := mem.acceleration[:]
	rosidl_runtime_c.Float32__Array_to_C(*(*[]rosidl_runtime_c.CFloat32)(unsafe.Pointer(&cSlice_acceleration)), t.Acceleration[:])
	mem.yaw = C.float(t.Yaw)
	mem.yaw_speed = C.float(t.YawSpeed)
	mem.point_valid = C.bool(t.PointValid)
	mem._type = C.uint8_t(t.Type)
	return unsafe.Pointer(mem)
}
func (t *TrajectoryWaypoint) AsGoStruct(ros2_message_buffer unsafe.Pointer) {
	mem := (*C.px4_msgs__msg__TrajectoryWaypoint)(ros2_message_buffer)
	t.Timestamp = uint64(mem.timestamp)
	cSlice_position := mem.position[:]
	rosidl_runtime_c.Float32__Array_to_Go(t.Position[:], *(*[]rosidl_runtime_c.CFloat32)(unsafe.Pointer(&cSlice_position)))
	cSlice_velocity := mem.velocity[:]
	rosidl_runtime_c.Float32__Array_to_Go(t.Velocity[:], *(*[]rosidl_runtime_c.CFloat32)(unsafe.Pointer(&cSlice_velocity)))
	cSlice_acceleration := mem.acceleration[:]
	rosidl_runtime_c.Float32__Array_to_Go(t.Acceleration[:], *(*[]rosidl_runtime_c.CFloat32)(unsafe.Pointer(&cSlice_acceleration)))
	t.Yaw = float32(mem.yaw)
	t.YawSpeed = float32(mem.yaw_speed)
	t.PointValid = bool(mem.point_valid)
	t.Type = uint8(mem._type)
}
func (t *TrajectoryWaypoint) Clone() ros2types.ROS2Msg {
	clone := *t
	return &clone
}

type CTrajectoryWaypoint = C.px4_msgs__msg__TrajectoryWaypoint
type CTrajectoryWaypoint__Sequence = C.px4_msgs__msg__TrajectoryWaypoint__Sequence

func TrajectoryWaypoint__Sequence_to_Go(goSlice *[]TrajectoryWaypoint, cSlice CTrajectoryWaypoint__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]TrajectoryWaypoint, int64(cSlice.size))
	for i := 0; i < int(cSlice.size); i++ {
		cIdx := (*C.px4_msgs__msg__TrajectoryWaypoint__Sequence)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_px4_msgs__msg__TrajectoryWaypoint * uintptr(i)),
		))
		(*goSlice)[i] = TrajectoryWaypoint{}
		(*goSlice)[i].AsGoStruct(unsafe.Pointer(cIdx))
	}
}
func TrajectoryWaypoint__Sequence_to_C(cSlice *CTrajectoryWaypoint__Sequence, goSlice []TrajectoryWaypoint) {
	if len(goSlice) == 0 {
		return
	}
	cSlice.data = (*C.px4_msgs__msg__TrajectoryWaypoint)(C.malloc((C.size_t)(C.sizeof_struct_px4_msgs__msg__TrajectoryWaypoint * uintptr(len(goSlice)))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity

	for i, v := range goSlice {
		cIdx := (*C.px4_msgs__msg__TrajectoryWaypoint)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_px4_msgs__msg__TrajectoryWaypoint * uintptr(i)),
		))
		*cIdx = *(*C.px4_msgs__msg__TrajectoryWaypoint)(v.AsCStruct())
	}
}
func TrajectoryWaypoint__Array_to_Go(goSlice []TrajectoryWaypoint, cSlice []CTrajectoryWaypoint) {
	for i := 0; i < len(cSlice); i++ {
		goSlice[i].AsGoStruct(unsafe.Pointer(&cSlice[i]))
	}
}
func TrajectoryWaypoint__Array_to_C(cSlice []CTrajectoryWaypoint, goSlice []TrajectoryWaypoint) {
	for i := 0; i < len(goSlice); i++ {
		cSlice[i] = *(*C.px4_msgs__msg__TrajectoryWaypoint)(goSlice[i].AsCStruct())
	}
}


