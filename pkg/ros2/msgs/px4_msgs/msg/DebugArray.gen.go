/*
This file is part of rclgo

Copyright Â© 2021 Technology Innovation Institute, United Arab Emirates

Licensed under the Apache License, Version 2.0 (the "License");
	http://www.apache.org/licenses/LICENSE-2.0
*/

/*
THIS FILE IS AUTOGENERATED BY 'rclgo-gen generate'
*/

package px4_msgs_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/ros2/ros2types"
	"github.com/tiiuae/rclgo/pkg/ros2/ros2_type_dispatcher"
	rosidl_runtime_c "github.com/tiiuae/rclgo/pkg/ros2/rosidl_runtime_c"
	
)
/*
#cgo LDFLAGS: -L/opt/ros/foxy/lib -Wl,-rpath=/opt/ros/foxy/lib -lrcl -lrosidl_runtime_c -lrosidl_typesupport_c -lrcutils -lrmw_implementation
#cgo LDFLAGS: -lpx4_msgs__rosidl_typesupport_c -lpx4_msgs__rosidl_generator_c

#cgo CFLAGS: -I/opt/ros/foxy/include

#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/debug_array.h>

*/
import "C"

func init() {
	ros2_type_dispatcher.RegisterROS2MsgTypeNameAlias("px4_msgs/DebugArray", &DebugArray{})
}
const (
	DebugArray_ARRAY_SIZE uint8 = 58
)

// Do not create instances of this type directly. Always use NewDebugArray
// function instead.
type DebugArray struct {
	Timestamp uint64 `yaml:"timestamp"`// time since system start (microseconds)
	Id uint16 `yaml:"id"`// unique ID of debug array, used to discriminate between arrays
	Name [10]byte `yaml:"name"`// name of the debug array (max. 10 characters)
	Data [58]float32 `yaml:"data"`// data
}

// NewDebugArray creates a new DebugArray with default values.
func NewDebugArray() *DebugArray {
	self := DebugArray{}
	self.SetDefaults(nil)
	return &self
}

func (t *DebugArray) SetDefaults(d interface{}) ros2types.ROS2Msg {
	
	return t
}

func (t *DebugArray) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__DebugArray())
}
func (t *DebugArray) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__DebugArray
	return (unsafe.Pointer)(C.px4_msgs__msg__DebugArray__create())
}
func (t *DebugArray) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__DebugArray__destroy((*C.px4_msgs__msg__DebugArray)(pointer_to_free))
}
func (t *DebugArray) AsCStruct() unsafe.Pointer {
	mem := (*C.px4_msgs__msg__DebugArray)(t.PrepareMemory())
	mem.timestamp = C.uint64_t(t.Timestamp)
	mem.id = C.uint16_t(t.Id)
	cSlice_name := mem.name[:]
	rosidl_runtime_c.Char__Array_to_C(*(*[]rosidl_runtime_c.CChar)(unsafe.Pointer(&cSlice_name)), t.Name[:])
	cSlice_data := mem.data[:]
	rosidl_runtime_c.Float32__Array_to_C(*(*[]rosidl_runtime_c.CFloat32)(unsafe.Pointer(&cSlice_data)), t.Data[:])
	return unsafe.Pointer(mem)
}
func (t *DebugArray) AsGoStruct(ros2_message_buffer unsafe.Pointer) {
	mem := (*C.px4_msgs__msg__DebugArray)(ros2_message_buffer)
	t.Timestamp = uint64(mem.timestamp)
	t.Id = uint16(mem.id)
	cSlice_name := mem.name[:]
	rosidl_runtime_c.Char__Array_to_Go(t.Name[:], *(*[]rosidl_runtime_c.CChar)(unsafe.Pointer(&cSlice_name)))
	cSlice_data := mem.data[:]
	rosidl_runtime_c.Float32__Array_to_Go(t.Data[:], *(*[]rosidl_runtime_c.CFloat32)(unsafe.Pointer(&cSlice_data)))
}
func (t *DebugArray) Clone() ros2types.ROS2Msg {
	clone := *t
	return &clone
}

type CDebugArray = C.px4_msgs__msg__DebugArray
type CDebugArray__Sequence = C.px4_msgs__msg__DebugArray__Sequence

func DebugArray__Sequence_to_Go(goSlice *[]DebugArray, cSlice CDebugArray__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]DebugArray, int64(cSlice.size))
	for i := 0; i < int(cSlice.size); i++ {
		cIdx := (*C.px4_msgs__msg__DebugArray__Sequence)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_px4_msgs__msg__DebugArray * uintptr(i)),
		))
		(*goSlice)[i] = DebugArray{}
		(*goSlice)[i].AsGoStruct(unsafe.Pointer(cIdx))
	}
}
func DebugArray__Sequence_to_C(cSlice *CDebugArray__Sequence, goSlice []DebugArray) {
	if len(goSlice) == 0 {
		return
	}
	cSlice.data = (*C.px4_msgs__msg__DebugArray)(C.malloc((C.size_t)(C.sizeof_struct_px4_msgs__msg__DebugArray * uintptr(len(goSlice)))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity

	for i, v := range goSlice {
		cIdx := (*C.px4_msgs__msg__DebugArray)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_px4_msgs__msg__DebugArray * uintptr(i)),
		))
		*cIdx = *(*C.px4_msgs__msg__DebugArray)(v.AsCStruct())
	}
}
func DebugArray__Array_to_Go(goSlice []DebugArray, cSlice []CDebugArray) {
	for i := 0; i < len(cSlice); i++ {
		goSlice[i].AsGoStruct(unsafe.Pointer(&cSlice[i]))
	}
}
func DebugArray__Array_to_C(cSlice []CDebugArray, goSlice []DebugArray) {
	for i := 0; i < len(goSlice); i++ {
		cSlice[i] = *(*C.px4_msgs__msg__DebugArray)(goSlice[i].AsCStruct())
	}
}


