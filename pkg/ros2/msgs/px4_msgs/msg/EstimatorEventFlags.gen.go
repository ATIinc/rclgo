/*
This file is part of rclgo

Copyright Â© 2021 Technology Innovation Institute, United Arab Emirates

Licensed under the Apache License, Version 2.0 (the "License");
	http://www.apache.org/licenses/LICENSE-2.0
*/

/*
THIS FILE IS AUTOGENERATED BY 'rclgo-gen generate'
*/

package px4_msgs_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/ros2/ros2types"
	"github.com/tiiuae/rclgo/pkg/ros2/ros2_type_dispatcher"
	
)
/*
#cgo LDFLAGS: -L/opt/ros/foxy/lib -Wl,-rpath=/opt/ros/foxy/lib -lrcl -lrosidl_runtime_c -lrosidl_typesupport_c -lrcutils -lrmw_implementation
#cgo LDFLAGS: -lpx4_msgs__rosidl_typesupport_c -lpx4_msgs__rosidl_generator_c

#cgo CFLAGS: -I/opt/ros/foxy/include

#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/estimator_event_flags.h>

*/
import "C"

func init() {
	ros2_type_dispatcher.RegisterROS2MsgTypeNameAlias("px4_msgs/EstimatorEventFlags", &EstimatorEventFlags{})
}

// Do not create instances of this type directly. Always use NewEstimatorEventFlags
// function instead.
type EstimatorEventFlags struct {
	Timestamp uint64 `yaml:"timestamp"`// time since system start (microseconds)
	TimestampSample uint64 `yaml:"timestamp_sample"`// the timestamp of the raw data (microseconds)
	InformationEventChanges uint32 `yaml:"information_event_changes"`// number of information event changes. information events
	GpsChecksPassed bool `yaml:"gps_checks_passed"`// 0 - true when gps quality checks are passing passed. information events
	ResetVelToGps bool `yaml:"reset_vel_to_gps"`// 1 - true when the velocity states are reset to the gps measurement. information events
	ResetVelToFlow bool `yaml:"reset_vel_to_flow"`// 2 - true when the velocity states are reset using the optical flow measurement. information events
	ResetVelToVision bool `yaml:"reset_vel_to_vision"`// 3 - true when the velocity states are reset to the vision system measurement. information events
	ResetVelToZero bool `yaml:"reset_vel_to_zero"`// 4 - true when the velocity states are reset to zero. information events
	ResetPosToLastKnown bool `yaml:"reset_pos_to_last_known"`// 5 - true when the position states are reset to the last known position. information events
	ResetPosToGps bool `yaml:"reset_pos_to_gps"`// 6 - true when the position states are reset to the gps measurement. information events
	ResetPosToVision bool `yaml:"reset_pos_to_vision"`// 7 - true when the position states are reset to the vision system measurement. information events
	StartingGpsFusion bool `yaml:"starting_gps_fusion"`// 8 - true when the filter starts using gps measurements to correct the state estimates. information events
	StartingVisionPosFusion bool `yaml:"starting_vision_pos_fusion"`// 9 - true when the filter starts using vision system position measurements to correct the state estimates. information events
	StartingVisionVelFusion bool `yaml:"starting_vision_vel_fusion"`// 10 - true when the filter starts using vision system velocity measurements to correct the state estimates. information events
	StartingVisionYawFusion bool `yaml:"starting_vision_yaw_fusion"`// 11 - true when the filter starts using vision system yaw  measurements to correct the state estimates. information events
	YawAlignedToImuGps bool `yaml:"yaw_aligned_to_imu_gps"`// 12 - true when the filter resets the yaw to an estimate derived from IMU and GPS data. information events
	WarningEventChanges uint32 `yaml:"warning_event_changes"`// number of warning event changes. warning events
	GpsQualityPoor bool `yaml:"gps_quality_poor"`// 0 - true when the gps is failing quality checks. warning events
	GpsFusionTimout bool `yaml:"gps_fusion_timout"`// 1 - true when the gps data has not been used to correct the state estimates for a significant time period. warning events
	GpsDataStopped bool `yaml:"gps_data_stopped"`// 2 - true when the gps data has stopped for a significant time period. warning events
	GpsDataStoppedUsingAlternate bool `yaml:"gps_data_stopped_using_alternate"`// 3 - true when the gps data has stopped for a significant time period but the filter is able to use other sources of data to maintain navigation. warning events
	HeightSensorTimeout bool `yaml:"height_sensor_timeout"`// 4 - true when the height sensor has not been used to correct the state estimates for a significant time period. warning events
	StoppingNavigation bool `yaml:"stopping_navigation"`// 5 - true when the filter has insufficient data to estimate velocity and position and is falling back to an attitude, height and height rate mode of operation. warning events
	InvalidAccelBiasCovReset bool `yaml:"invalid_accel_bias_cov_reset"`// 6 - true when the filter has detected bad acceerometer bias state esitmstes and has reset the corresponding covariance matrix elements. warning events
	BadYawUsingGpsCourse bool `yaml:"bad_yaw_using_gps_course"`// 7 - true when the fiter has detected an invalid yaw esitmate and has reset the yaw angle to the GPS ground course. warning events
	StoppingMagUse bool `yaml:"stopping_mag_use"`// 8 - true when the filter has detected bad magnetometer data and is stopping further use of the magnetomer data. warning events
	VisionDataStopped bool `yaml:"vision_data_stopped"`// 9 - true when the vision system data has stopped for a significant time period. warning events
	EmergencyYawResetMagStopped bool `yaml:"emergency_yaw_reset_mag_stopped"`// 10 - true when the filter has detected bad magnetometer data, has reset the yaw to anothter source of data and has stopped further use of the magnetomer data. warning events
}

// NewEstimatorEventFlags creates a new EstimatorEventFlags with default values.
func NewEstimatorEventFlags() *EstimatorEventFlags {
	self := EstimatorEventFlags{}
	self.SetDefaults(nil)
	return &self
}

func (t *EstimatorEventFlags) SetDefaults(d interface{}) ros2types.ROS2Msg {
	
	return t
}

func (t *EstimatorEventFlags) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__EstimatorEventFlags())
}
func (t *EstimatorEventFlags) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__EstimatorEventFlags
	return (unsafe.Pointer)(C.px4_msgs__msg__EstimatorEventFlags__create())
}
func (t *EstimatorEventFlags) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__EstimatorEventFlags__destroy((*C.px4_msgs__msg__EstimatorEventFlags)(pointer_to_free))
}
func (t *EstimatorEventFlags) AsCStruct() unsafe.Pointer {
	mem := (*C.px4_msgs__msg__EstimatorEventFlags)(t.PrepareMemory())
	mem.timestamp = C.uint64_t(t.Timestamp)
	mem.timestamp_sample = C.uint64_t(t.TimestampSample)
	mem.information_event_changes = C.uint32_t(t.InformationEventChanges)
	mem.gps_checks_passed = C.bool(t.GpsChecksPassed)
	mem.reset_vel_to_gps = C.bool(t.ResetVelToGps)
	mem.reset_vel_to_flow = C.bool(t.ResetVelToFlow)
	mem.reset_vel_to_vision = C.bool(t.ResetVelToVision)
	mem.reset_vel_to_zero = C.bool(t.ResetVelToZero)
	mem.reset_pos_to_last_known = C.bool(t.ResetPosToLastKnown)
	mem.reset_pos_to_gps = C.bool(t.ResetPosToGps)
	mem.reset_pos_to_vision = C.bool(t.ResetPosToVision)
	mem.starting_gps_fusion = C.bool(t.StartingGpsFusion)
	mem.starting_vision_pos_fusion = C.bool(t.StartingVisionPosFusion)
	mem.starting_vision_vel_fusion = C.bool(t.StartingVisionVelFusion)
	mem.starting_vision_yaw_fusion = C.bool(t.StartingVisionYawFusion)
	mem.yaw_aligned_to_imu_gps = C.bool(t.YawAlignedToImuGps)
	mem.warning_event_changes = C.uint32_t(t.WarningEventChanges)
	mem.gps_quality_poor = C.bool(t.GpsQualityPoor)
	mem.gps_fusion_timout = C.bool(t.GpsFusionTimout)
	mem.gps_data_stopped = C.bool(t.GpsDataStopped)
	mem.gps_data_stopped_using_alternate = C.bool(t.GpsDataStoppedUsingAlternate)
	mem.height_sensor_timeout = C.bool(t.HeightSensorTimeout)
	mem.stopping_navigation = C.bool(t.StoppingNavigation)
	mem.invalid_accel_bias_cov_reset = C.bool(t.InvalidAccelBiasCovReset)
	mem.bad_yaw_using_gps_course = C.bool(t.BadYawUsingGpsCourse)
	mem.stopping_mag_use = C.bool(t.StoppingMagUse)
	mem.vision_data_stopped = C.bool(t.VisionDataStopped)
	mem.emergency_yaw_reset_mag_stopped = C.bool(t.EmergencyYawResetMagStopped)
	return unsafe.Pointer(mem)
}
func (t *EstimatorEventFlags) AsGoStruct(ros2_message_buffer unsafe.Pointer) {
	mem := (*C.px4_msgs__msg__EstimatorEventFlags)(ros2_message_buffer)
	t.Timestamp = uint64(mem.timestamp)
	t.TimestampSample = uint64(mem.timestamp_sample)
	t.InformationEventChanges = uint32(mem.information_event_changes)
	t.GpsChecksPassed = bool(mem.gps_checks_passed)
	t.ResetVelToGps = bool(mem.reset_vel_to_gps)
	t.ResetVelToFlow = bool(mem.reset_vel_to_flow)
	t.ResetVelToVision = bool(mem.reset_vel_to_vision)
	t.ResetVelToZero = bool(mem.reset_vel_to_zero)
	t.ResetPosToLastKnown = bool(mem.reset_pos_to_last_known)
	t.ResetPosToGps = bool(mem.reset_pos_to_gps)
	t.ResetPosToVision = bool(mem.reset_pos_to_vision)
	t.StartingGpsFusion = bool(mem.starting_gps_fusion)
	t.StartingVisionPosFusion = bool(mem.starting_vision_pos_fusion)
	t.StartingVisionVelFusion = bool(mem.starting_vision_vel_fusion)
	t.StartingVisionYawFusion = bool(mem.starting_vision_yaw_fusion)
	t.YawAlignedToImuGps = bool(mem.yaw_aligned_to_imu_gps)
	t.WarningEventChanges = uint32(mem.warning_event_changes)
	t.GpsQualityPoor = bool(mem.gps_quality_poor)
	t.GpsFusionTimout = bool(mem.gps_fusion_timout)
	t.GpsDataStopped = bool(mem.gps_data_stopped)
	t.GpsDataStoppedUsingAlternate = bool(mem.gps_data_stopped_using_alternate)
	t.HeightSensorTimeout = bool(mem.height_sensor_timeout)
	t.StoppingNavigation = bool(mem.stopping_navigation)
	t.InvalidAccelBiasCovReset = bool(mem.invalid_accel_bias_cov_reset)
	t.BadYawUsingGpsCourse = bool(mem.bad_yaw_using_gps_course)
	t.StoppingMagUse = bool(mem.stopping_mag_use)
	t.VisionDataStopped = bool(mem.vision_data_stopped)
	t.EmergencyYawResetMagStopped = bool(mem.emergency_yaw_reset_mag_stopped)
}
func (t *EstimatorEventFlags) Clone() ros2types.ROS2Msg {
	clone := *t
	return &clone
}

type CEstimatorEventFlags = C.px4_msgs__msg__EstimatorEventFlags
type CEstimatorEventFlags__Sequence = C.px4_msgs__msg__EstimatorEventFlags__Sequence

func EstimatorEventFlags__Sequence_to_Go(goSlice *[]EstimatorEventFlags, cSlice CEstimatorEventFlags__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]EstimatorEventFlags, int64(cSlice.size))
	for i := 0; i < int(cSlice.size); i++ {
		cIdx := (*C.px4_msgs__msg__EstimatorEventFlags__Sequence)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_px4_msgs__msg__EstimatorEventFlags * uintptr(i)),
		))
		(*goSlice)[i] = EstimatorEventFlags{}
		(*goSlice)[i].AsGoStruct(unsafe.Pointer(cIdx))
	}
}
func EstimatorEventFlags__Sequence_to_C(cSlice *CEstimatorEventFlags__Sequence, goSlice []EstimatorEventFlags) {
	if len(goSlice) == 0 {
		return
	}
	cSlice.data = (*C.px4_msgs__msg__EstimatorEventFlags)(C.malloc((C.size_t)(C.sizeof_struct_px4_msgs__msg__EstimatorEventFlags * uintptr(len(goSlice)))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity

	for i, v := range goSlice {
		cIdx := (*C.px4_msgs__msg__EstimatorEventFlags)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_px4_msgs__msg__EstimatorEventFlags * uintptr(i)),
		))
		*cIdx = *(*C.px4_msgs__msg__EstimatorEventFlags)(v.AsCStruct())
	}
}
func EstimatorEventFlags__Array_to_Go(goSlice []EstimatorEventFlags, cSlice []CEstimatorEventFlags) {
	for i := 0; i < len(cSlice); i++ {
		goSlice[i].AsGoStruct(unsafe.Pointer(&cSlice[i]))
	}
}
func EstimatorEventFlags__Array_to_C(cSlice []CEstimatorEventFlags, goSlice []EstimatorEventFlags) {
	for i := 0; i < len(goSlice); i++ {
		cSlice[i] = *(*C.px4_msgs__msg__EstimatorEventFlags)(goSlice[i].AsCStruct())
	}
}


