/*
This file is part of rclgo

Copyright Â© 2021 Technology Innovation Institute, United Arab Emirates

Licensed under the Apache License, Version 2.0 (the "License");
	http://www.apache.org/licenses/LICENSE-2.0
*/

/*
THIS FILE IS AUTOGENERATED BY 'rclgo-gen generate'
*/

package px4_msgs_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/ros2/ros2types"
	"github.com/tiiuae/rclgo/pkg/ros2/ros2_type_dispatcher"
	
)
/*
#cgo LDFLAGS: -L/opt/ros/foxy/lib -Wl,-rpath=/opt/ros/foxy/lib -lrcl -lrosidl_runtime_c -lrosidl_typesupport_c -lrcutils -lrmw_implementation
#cgo LDFLAGS: -lpx4_msgs__rosidl_typesupport_c -lpx4_msgs__rosidl_generator_c

#cgo CFLAGS: -I/opt/ros/foxy/include

#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/vehicle_status_flags.h>

*/
import "C"

func init() {
	ros2_type_dispatcher.RegisterROS2MsgTypeNameAlias("px4_msgs/VehicleStatusFlags", &VehicleStatusFlags{})
}

// Do not create instances of this type directly. Always use NewVehicleStatusFlags
// function instead.
type VehicleStatusFlags struct {
	Timestamp uint64 `yaml:"timestamp"`// time since system start (microseconds)
	ConditionCalibrationEnabled bool `yaml:"condition_calibration_enabled"`
	ConditionSystemSensorsInitialized bool `yaml:"condition_system_sensors_initialized"`
	ConditionSystemHotplugTimeout bool `yaml:"condition_system_hotplug_timeout"`// true if the hotplug sensor search is over
	ConditionSystemReturnedToHome bool `yaml:"condition_system_returned_to_home"`
	ConditionAutoMissionAvailable bool `yaml:"condition_auto_mission_available"`
	ConditionAngularVelocityValid bool `yaml:"condition_angular_velocity_valid"`
	ConditionAttitudeValid bool `yaml:"condition_attitude_valid"`
	ConditionLocalAltitudeValid bool `yaml:"condition_local_altitude_valid"`
	ConditionLocalPositionValid bool `yaml:"condition_local_position_valid"`// set to true by the commander app if the quality of the local position estimate is good enough to use for navigation
	ConditionLocalVelocityValid bool `yaml:"condition_local_velocity_valid"`// set to true by the commander app if the quality of the local horizontal velocity data is good enough to use for navigation
	ConditionGlobalPositionValid bool `yaml:"condition_global_position_valid"`// set to true by the commander app if the quality of the global position estimate is good enough to use for navigation
	ConditionHomePositionValid bool `yaml:"condition_home_position_valid"`// indicates a valid home position (a valid home position is not always a valid launch)
	ConditionPowerInputValid bool `yaml:"condition_power_input_valid"`// set if input power is valid
	ConditionBatteryHealthy bool `yaml:"condition_battery_healthy"`// set if battery is available and not low
	ConditionEscsError bool `yaml:"condition_escs_error"`// set to true if one or more ESCs reporting esc_status are offline
	CircuitBreakerEngagedPowerCheck bool `yaml:"circuit_breaker_engaged_power_check"`
	CircuitBreakerEngagedAirspdCheck bool `yaml:"circuit_breaker_engaged_airspd_check"`
	CircuitBreakerEngagedEnginefailureCheck bool `yaml:"circuit_breaker_engaged_enginefailure_check"`
	CircuitBreakerFlightTerminationDisabled bool `yaml:"circuit_breaker_flight_termination_disabled"`
	CircuitBreakerEngagedUsbCheck bool `yaml:"circuit_breaker_engaged_usb_check"`
	CircuitBreakerEngagedPosfailureCheck bool `yaml:"circuit_breaker_engaged_posfailure_check"`// set to true when the position valid checks have been disabled
	CircuitBreakerVtolFwArmingCheck bool `yaml:"circuit_breaker_vtol_fw_arming_check"`// set to true if for VTOLs arming in fixed-wing mode should be allowed
	OffboardControlSignalFoundOnce bool `yaml:"offboard_control_signal_found_once"`
	OffboardControlSignalLost bool `yaml:"offboard_control_signal_lost"`
	RcSignalFoundOnce bool `yaml:"rc_signal_found_once"`
	RcInputBlocked bool `yaml:"rc_input_blocked"`// set if RC input should be ignored temporarily
	RcCalibrationValid bool `yaml:"rc_calibration_valid"`// set if RC calibration is valid
	VtolTransitionFailure bool `yaml:"vtol_transition_failure"`// Set to true if vtol transition failed
	UsbConnected bool `yaml:"usb_connected"`// status of the USB power supply
	AvoidanceSystemRequired bool `yaml:"avoidance_system_required"`// Set to true if avoidance system is enabled via COM_OBS_AVOID parameter
	AvoidanceSystemValid bool `yaml:"avoidance_system_valid"`// Status of the obstacle avoidance system
}

// NewVehicleStatusFlags creates a new VehicleStatusFlags with default values.
func NewVehicleStatusFlags() *VehicleStatusFlags {
	self := VehicleStatusFlags{}
	self.SetDefaults(nil)
	return &self
}

func (t *VehicleStatusFlags) SetDefaults(d interface{}) ros2types.ROS2Msg {
	
	return t
}

func (t *VehicleStatusFlags) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__VehicleStatusFlags())
}
func (t *VehicleStatusFlags) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__VehicleStatusFlags
	return (unsafe.Pointer)(C.px4_msgs__msg__VehicleStatusFlags__create())
}
func (t *VehicleStatusFlags) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__VehicleStatusFlags__destroy((*C.px4_msgs__msg__VehicleStatusFlags)(pointer_to_free))
}
func (t *VehicleStatusFlags) AsCStruct() unsafe.Pointer {
	mem := (*C.px4_msgs__msg__VehicleStatusFlags)(t.PrepareMemory())
	mem.timestamp = C.uint64_t(t.Timestamp)
	mem.condition_calibration_enabled = C.bool(t.ConditionCalibrationEnabled)
	mem.condition_system_sensors_initialized = C.bool(t.ConditionSystemSensorsInitialized)
	mem.condition_system_hotplug_timeout = C.bool(t.ConditionSystemHotplugTimeout)
	mem.condition_system_returned_to_home = C.bool(t.ConditionSystemReturnedToHome)
	mem.condition_auto_mission_available = C.bool(t.ConditionAutoMissionAvailable)
	mem.condition_angular_velocity_valid = C.bool(t.ConditionAngularVelocityValid)
	mem.condition_attitude_valid = C.bool(t.ConditionAttitudeValid)
	mem.condition_local_altitude_valid = C.bool(t.ConditionLocalAltitudeValid)
	mem.condition_local_position_valid = C.bool(t.ConditionLocalPositionValid)
	mem.condition_local_velocity_valid = C.bool(t.ConditionLocalVelocityValid)
	mem.condition_global_position_valid = C.bool(t.ConditionGlobalPositionValid)
	mem.condition_home_position_valid = C.bool(t.ConditionHomePositionValid)
	mem.condition_power_input_valid = C.bool(t.ConditionPowerInputValid)
	mem.condition_battery_healthy = C.bool(t.ConditionBatteryHealthy)
	mem.condition_escs_error = C.bool(t.ConditionEscsError)
	mem.circuit_breaker_engaged_power_check = C.bool(t.CircuitBreakerEngagedPowerCheck)
	mem.circuit_breaker_engaged_airspd_check = C.bool(t.CircuitBreakerEngagedAirspdCheck)
	mem.circuit_breaker_engaged_enginefailure_check = C.bool(t.CircuitBreakerEngagedEnginefailureCheck)
	mem.circuit_breaker_flight_termination_disabled = C.bool(t.CircuitBreakerFlightTerminationDisabled)
	mem.circuit_breaker_engaged_usb_check = C.bool(t.CircuitBreakerEngagedUsbCheck)
	mem.circuit_breaker_engaged_posfailure_check = C.bool(t.CircuitBreakerEngagedPosfailureCheck)
	mem.circuit_breaker_vtol_fw_arming_check = C.bool(t.CircuitBreakerVtolFwArmingCheck)
	mem.offboard_control_signal_found_once = C.bool(t.OffboardControlSignalFoundOnce)
	mem.offboard_control_signal_lost = C.bool(t.OffboardControlSignalLost)
	mem.rc_signal_found_once = C.bool(t.RcSignalFoundOnce)
	mem.rc_input_blocked = C.bool(t.RcInputBlocked)
	mem.rc_calibration_valid = C.bool(t.RcCalibrationValid)
	mem.vtol_transition_failure = C.bool(t.VtolTransitionFailure)
	mem.usb_connected = C.bool(t.UsbConnected)
	mem.avoidance_system_required = C.bool(t.AvoidanceSystemRequired)
	mem.avoidance_system_valid = C.bool(t.AvoidanceSystemValid)
	return unsafe.Pointer(mem)
}
func (t *VehicleStatusFlags) AsGoStruct(ros2_message_buffer unsafe.Pointer) {
	mem := (*C.px4_msgs__msg__VehicleStatusFlags)(ros2_message_buffer)
	t.Timestamp = uint64(mem.timestamp)
	t.ConditionCalibrationEnabled = bool(mem.condition_calibration_enabled)
	t.ConditionSystemSensorsInitialized = bool(mem.condition_system_sensors_initialized)
	t.ConditionSystemHotplugTimeout = bool(mem.condition_system_hotplug_timeout)
	t.ConditionSystemReturnedToHome = bool(mem.condition_system_returned_to_home)
	t.ConditionAutoMissionAvailable = bool(mem.condition_auto_mission_available)
	t.ConditionAngularVelocityValid = bool(mem.condition_angular_velocity_valid)
	t.ConditionAttitudeValid = bool(mem.condition_attitude_valid)
	t.ConditionLocalAltitudeValid = bool(mem.condition_local_altitude_valid)
	t.ConditionLocalPositionValid = bool(mem.condition_local_position_valid)
	t.ConditionLocalVelocityValid = bool(mem.condition_local_velocity_valid)
	t.ConditionGlobalPositionValid = bool(mem.condition_global_position_valid)
	t.ConditionHomePositionValid = bool(mem.condition_home_position_valid)
	t.ConditionPowerInputValid = bool(mem.condition_power_input_valid)
	t.ConditionBatteryHealthy = bool(mem.condition_battery_healthy)
	t.ConditionEscsError = bool(mem.condition_escs_error)
	t.CircuitBreakerEngagedPowerCheck = bool(mem.circuit_breaker_engaged_power_check)
	t.CircuitBreakerEngagedAirspdCheck = bool(mem.circuit_breaker_engaged_airspd_check)
	t.CircuitBreakerEngagedEnginefailureCheck = bool(mem.circuit_breaker_engaged_enginefailure_check)
	t.CircuitBreakerFlightTerminationDisabled = bool(mem.circuit_breaker_flight_termination_disabled)
	t.CircuitBreakerEngagedUsbCheck = bool(mem.circuit_breaker_engaged_usb_check)
	t.CircuitBreakerEngagedPosfailureCheck = bool(mem.circuit_breaker_engaged_posfailure_check)
	t.CircuitBreakerVtolFwArmingCheck = bool(mem.circuit_breaker_vtol_fw_arming_check)
	t.OffboardControlSignalFoundOnce = bool(mem.offboard_control_signal_found_once)
	t.OffboardControlSignalLost = bool(mem.offboard_control_signal_lost)
	t.RcSignalFoundOnce = bool(mem.rc_signal_found_once)
	t.RcInputBlocked = bool(mem.rc_input_blocked)
	t.RcCalibrationValid = bool(mem.rc_calibration_valid)
	t.VtolTransitionFailure = bool(mem.vtol_transition_failure)
	t.UsbConnected = bool(mem.usb_connected)
	t.AvoidanceSystemRequired = bool(mem.avoidance_system_required)
	t.AvoidanceSystemValid = bool(mem.avoidance_system_valid)
}
func (t *VehicleStatusFlags) Clone() ros2types.ROS2Msg {
	clone := *t
	return &clone
}

type CVehicleStatusFlags = C.px4_msgs__msg__VehicleStatusFlags
type CVehicleStatusFlags__Sequence = C.px4_msgs__msg__VehicleStatusFlags__Sequence

func VehicleStatusFlags__Sequence_to_Go(goSlice *[]VehicleStatusFlags, cSlice CVehicleStatusFlags__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]VehicleStatusFlags, int64(cSlice.size))
	for i := 0; i < int(cSlice.size); i++ {
		cIdx := (*C.px4_msgs__msg__VehicleStatusFlags__Sequence)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_px4_msgs__msg__VehicleStatusFlags * uintptr(i)),
		))
		(*goSlice)[i] = VehicleStatusFlags{}
		(*goSlice)[i].AsGoStruct(unsafe.Pointer(cIdx))
	}
}
func VehicleStatusFlags__Sequence_to_C(cSlice *CVehicleStatusFlags__Sequence, goSlice []VehicleStatusFlags) {
	if len(goSlice) == 0 {
		return
	}
	cSlice.data = (*C.px4_msgs__msg__VehicleStatusFlags)(C.malloc((C.size_t)(C.sizeof_struct_px4_msgs__msg__VehicleStatusFlags * uintptr(len(goSlice)))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity

	for i, v := range goSlice {
		cIdx := (*C.px4_msgs__msg__VehicleStatusFlags)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_px4_msgs__msg__VehicleStatusFlags * uintptr(i)),
		))
		*cIdx = *(*C.px4_msgs__msg__VehicleStatusFlags)(v.AsCStruct())
	}
}
func VehicleStatusFlags__Array_to_Go(goSlice []VehicleStatusFlags, cSlice []CVehicleStatusFlags) {
	for i := 0; i < len(cSlice); i++ {
		goSlice[i].AsGoStruct(unsafe.Pointer(&cSlice[i]))
	}
}
func VehicleStatusFlags__Array_to_C(cSlice []CVehicleStatusFlags, goSlice []VehicleStatusFlags) {
	for i := 0; i < len(goSlice); i++ {
		cSlice[i] = *(*C.px4_msgs__msg__VehicleStatusFlags)(goSlice[i].AsCStruct())
	}
}


