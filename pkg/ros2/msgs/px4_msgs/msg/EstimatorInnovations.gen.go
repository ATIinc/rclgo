/*
This file is part of rclgo

Copyright Â© 2021 Technology Innovation Institute, United Arab Emirates

Licensed under the Apache License, Version 2.0 (the "License");
	http://www.apache.org/licenses/LICENSE-2.0
*/

/*
THIS FILE IS AUTOGENERATED BY 'rclgo-gen generate'
*/

package px4_msgs_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/ros2/ros2types"
	"github.com/tiiuae/rclgo/pkg/ros2/ros2_type_dispatcher"
	rosidl_runtime_c "github.com/tiiuae/rclgo/pkg/ros2/rosidl_runtime_c"
	
)
/*
#cgo LDFLAGS: -L/opt/ros/foxy/lib -Wl,-rpath=/opt/ros/foxy/lib -lrcl -lrosidl_runtime_c -lrosidl_typesupport_c -lrcutils -lrmw_implementation
#cgo LDFLAGS: -lpx4_msgs__rosidl_typesupport_c -lpx4_msgs__rosidl_generator_c

#cgo CFLAGS: -I/opt/ros/foxy/include

#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/estimator_innovations.h>

*/
import "C"

func init() {
	ros2_type_dispatcher.RegisterROS2MsgTypeNameAlias("px4_msgs/EstimatorInnovations", &EstimatorInnovations{})
}

// Do not create instances of this type directly. Always use NewEstimatorInnovations
// function instead.
type EstimatorInnovations struct {
	Timestamp uint64 `yaml:"timestamp"`// time since system start (microseconds)
	TimestampSample uint64 `yaml:"timestamp_sample"`// the timestamp of the raw data (microseconds)
	GpsHvel [2]float32 `yaml:"gps_hvel"`// horizontal GPS velocity innovation (m/sec) and innovation variance ((m/sec)**2). GPS
	GpsVvel float32 `yaml:"gps_vvel"`// vertical GPS velocity innovation (m/sec) and innovation variance ((m/sec)**2). GPS
	GpsHpos [2]float32 `yaml:"gps_hpos"`// horizontal GPS position innovation (m) and innovation variance (m**2). GPS
	GpsVpos float32 `yaml:"gps_vpos"`// vertical GPS position innovation (m) and innovation variance (m**2). GPS
	EvHvel [2]float32 `yaml:"ev_hvel"`// horizontal external vision velocity innovation (m/sec) and innovation variance ((m/sec)**2). External Vision
	EvVvel float32 `yaml:"ev_vvel"`// vertical external vision velocity innovation (m/sec) and innovation variance ((m/sec)**2). External Vision
	EvHpos [2]float32 `yaml:"ev_hpos"`// horizontal external vision position innovation (m) and innovation variance (m**2). External Vision
	EvVpos float32 `yaml:"ev_vpos"`// vertical external vision position innovation (m) and innovation variance (m**2). External Vision
	RngVpos float32 `yaml:"rng_vpos"`// range sensor height innovation (m) and innovation variance (m**2). Height sensors
	BaroVpos float32 `yaml:"baro_vpos"`// barometer height innovation (m) and innovation variance (m**2). Height sensors
	AuxHvel [2]float32 `yaml:"aux_hvel"`// horizontal auxiliar velocity innovation from landing target measurement (m/sec) and innovation variance ((m/sec)**2). Auxiliary velocity
	AuxVvel float32 `yaml:"aux_vvel"`// vertical auxiliar velocity innovation from landing target measurement (m/sec) and innovation variance ((m/sec)**2). Auxiliary velocity
	Flow [2]float32 `yaml:"flow"`// flow innvoation (rad/sec) and innovation variance ((rad/sec)**2). Optical flow
	Heading float32 `yaml:"heading"`// heading innovation (rad) and innovation variance (rad**2). Various
	MagField [3]float32 `yaml:"mag_field"`// earth magnetic field innovation (Gauss) and innovation variance (Gauss**2). Various
	Drag [2]float32 `yaml:"drag"`// drag specific force innovation (m/sec**2) and innovation variance ((m/sec)**2). Various
	Airspeed float32 `yaml:"airspeed"`// airspeed innovation (m/sec) and innovation variance ((m/sec)**2). Various
	Beta float32 `yaml:"beta"`// synthetic sideslip innovation (rad) and innovation variance (rad**2). Various
	Hagl float32 `yaml:"hagl"`// height of ground innovation (m) and innovation variance (m**2). Various
}

// NewEstimatorInnovations creates a new EstimatorInnovations with default values.
func NewEstimatorInnovations() *EstimatorInnovations {
	self := EstimatorInnovations{}
	self.SetDefaults(nil)
	return &self
}

func (t *EstimatorInnovations) SetDefaults(d interface{}) ros2types.ROS2Msg {
	
	return t
}

func (t *EstimatorInnovations) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__EstimatorInnovations())
}
func (t *EstimatorInnovations) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__EstimatorInnovations
	return (unsafe.Pointer)(C.px4_msgs__msg__EstimatorInnovations__create())
}
func (t *EstimatorInnovations) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__EstimatorInnovations__destroy((*C.px4_msgs__msg__EstimatorInnovations)(pointer_to_free))
}
func (t *EstimatorInnovations) AsCStruct() unsafe.Pointer {
	mem := (*C.px4_msgs__msg__EstimatorInnovations)(t.PrepareMemory())
	mem.timestamp = C.uint64_t(t.Timestamp)
	mem.timestamp_sample = C.uint64_t(t.TimestampSample)
	cSlice_gps_hvel := mem.gps_hvel[:]
	rosidl_runtime_c.Float32__Array_to_C(*(*[]rosidl_runtime_c.CFloat32)(unsafe.Pointer(&cSlice_gps_hvel)), t.GpsHvel[:])
	mem.gps_vvel = C.float(t.GpsVvel)
	cSlice_gps_hpos := mem.gps_hpos[:]
	rosidl_runtime_c.Float32__Array_to_C(*(*[]rosidl_runtime_c.CFloat32)(unsafe.Pointer(&cSlice_gps_hpos)), t.GpsHpos[:])
	mem.gps_vpos = C.float(t.GpsVpos)
	cSlice_ev_hvel := mem.ev_hvel[:]
	rosidl_runtime_c.Float32__Array_to_C(*(*[]rosidl_runtime_c.CFloat32)(unsafe.Pointer(&cSlice_ev_hvel)), t.EvHvel[:])
	mem.ev_vvel = C.float(t.EvVvel)
	cSlice_ev_hpos := mem.ev_hpos[:]
	rosidl_runtime_c.Float32__Array_to_C(*(*[]rosidl_runtime_c.CFloat32)(unsafe.Pointer(&cSlice_ev_hpos)), t.EvHpos[:])
	mem.ev_vpos = C.float(t.EvVpos)
	mem.rng_vpos = C.float(t.RngVpos)
	mem.baro_vpos = C.float(t.BaroVpos)
	cSlice_aux_hvel := mem.aux_hvel[:]
	rosidl_runtime_c.Float32__Array_to_C(*(*[]rosidl_runtime_c.CFloat32)(unsafe.Pointer(&cSlice_aux_hvel)), t.AuxHvel[:])
	mem.aux_vvel = C.float(t.AuxVvel)
	cSlice_flow := mem.flow[:]
	rosidl_runtime_c.Float32__Array_to_C(*(*[]rosidl_runtime_c.CFloat32)(unsafe.Pointer(&cSlice_flow)), t.Flow[:])
	mem.heading = C.float(t.Heading)
	cSlice_mag_field := mem.mag_field[:]
	rosidl_runtime_c.Float32__Array_to_C(*(*[]rosidl_runtime_c.CFloat32)(unsafe.Pointer(&cSlice_mag_field)), t.MagField[:])
	cSlice_drag := mem.drag[:]
	rosidl_runtime_c.Float32__Array_to_C(*(*[]rosidl_runtime_c.CFloat32)(unsafe.Pointer(&cSlice_drag)), t.Drag[:])
	mem.airspeed = C.float(t.Airspeed)
	mem.beta = C.float(t.Beta)
	mem.hagl = C.float(t.Hagl)
	return unsafe.Pointer(mem)
}
func (t *EstimatorInnovations) AsGoStruct(ros2_message_buffer unsafe.Pointer) {
	mem := (*C.px4_msgs__msg__EstimatorInnovations)(ros2_message_buffer)
	t.Timestamp = uint64(mem.timestamp)
	t.TimestampSample = uint64(mem.timestamp_sample)
	cSlice_gps_hvel := mem.gps_hvel[:]
	rosidl_runtime_c.Float32__Array_to_Go(t.GpsHvel[:], *(*[]rosidl_runtime_c.CFloat32)(unsafe.Pointer(&cSlice_gps_hvel)))
	t.GpsVvel = float32(mem.gps_vvel)
	cSlice_gps_hpos := mem.gps_hpos[:]
	rosidl_runtime_c.Float32__Array_to_Go(t.GpsHpos[:], *(*[]rosidl_runtime_c.CFloat32)(unsafe.Pointer(&cSlice_gps_hpos)))
	t.GpsVpos = float32(mem.gps_vpos)
	cSlice_ev_hvel := mem.ev_hvel[:]
	rosidl_runtime_c.Float32__Array_to_Go(t.EvHvel[:], *(*[]rosidl_runtime_c.CFloat32)(unsafe.Pointer(&cSlice_ev_hvel)))
	t.EvVvel = float32(mem.ev_vvel)
	cSlice_ev_hpos := mem.ev_hpos[:]
	rosidl_runtime_c.Float32__Array_to_Go(t.EvHpos[:], *(*[]rosidl_runtime_c.CFloat32)(unsafe.Pointer(&cSlice_ev_hpos)))
	t.EvVpos = float32(mem.ev_vpos)
	t.RngVpos = float32(mem.rng_vpos)
	t.BaroVpos = float32(mem.baro_vpos)
	cSlice_aux_hvel := mem.aux_hvel[:]
	rosidl_runtime_c.Float32__Array_to_Go(t.AuxHvel[:], *(*[]rosidl_runtime_c.CFloat32)(unsafe.Pointer(&cSlice_aux_hvel)))
	t.AuxVvel = float32(mem.aux_vvel)
	cSlice_flow := mem.flow[:]
	rosidl_runtime_c.Float32__Array_to_Go(t.Flow[:], *(*[]rosidl_runtime_c.CFloat32)(unsafe.Pointer(&cSlice_flow)))
	t.Heading = float32(mem.heading)
	cSlice_mag_field := mem.mag_field[:]
	rosidl_runtime_c.Float32__Array_to_Go(t.MagField[:], *(*[]rosidl_runtime_c.CFloat32)(unsafe.Pointer(&cSlice_mag_field)))
	cSlice_drag := mem.drag[:]
	rosidl_runtime_c.Float32__Array_to_Go(t.Drag[:], *(*[]rosidl_runtime_c.CFloat32)(unsafe.Pointer(&cSlice_drag)))
	t.Airspeed = float32(mem.airspeed)
	t.Beta = float32(mem.beta)
	t.Hagl = float32(mem.hagl)
}
func (t *EstimatorInnovations) Clone() ros2types.ROS2Msg {
	clone := *t
	return &clone
}

type CEstimatorInnovations = C.px4_msgs__msg__EstimatorInnovations
type CEstimatorInnovations__Sequence = C.px4_msgs__msg__EstimatorInnovations__Sequence

func EstimatorInnovations__Sequence_to_Go(goSlice *[]EstimatorInnovations, cSlice CEstimatorInnovations__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]EstimatorInnovations, int64(cSlice.size))
	for i := 0; i < int(cSlice.size); i++ {
		cIdx := (*C.px4_msgs__msg__EstimatorInnovations__Sequence)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_px4_msgs__msg__EstimatorInnovations * uintptr(i)),
		))
		(*goSlice)[i] = EstimatorInnovations{}
		(*goSlice)[i].AsGoStruct(unsafe.Pointer(cIdx))
	}
}
func EstimatorInnovations__Sequence_to_C(cSlice *CEstimatorInnovations__Sequence, goSlice []EstimatorInnovations) {
	if len(goSlice) == 0 {
		return
	}
	cSlice.data = (*C.px4_msgs__msg__EstimatorInnovations)(C.malloc((C.size_t)(C.sizeof_struct_px4_msgs__msg__EstimatorInnovations * uintptr(len(goSlice)))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity

	for i, v := range goSlice {
		cIdx := (*C.px4_msgs__msg__EstimatorInnovations)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_px4_msgs__msg__EstimatorInnovations * uintptr(i)),
		))
		*cIdx = *(*C.px4_msgs__msg__EstimatorInnovations)(v.AsCStruct())
	}
}
func EstimatorInnovations__Array_to_Go(goSlice []EstimatorInnovations, cSlice []CEstimatorInnovations) {
	for i := 0; i < len(cSlice); i++ {
		goSlice[i].AsGoStruct(unsafe.Pointer(&cSlice[i]))
	}
}
func EstimatorInnovations__Array_to_C(cSlice []CEstimatorInnovations, goSlice []EstimatorInnovations) {
	for i := 0; i < len(goSlice); i++ {
		cSlice[i] = *(*C.px4_msgs__msg__EstimatorInnovations)(goSlice[i].AsCStruct())
	}
}


