/*
This file is part of rclgo

Copyright Â© 2021 Technology Innovation Institute, United Arab Emirates

Licensed under the Apache License, Version 2.0 (the "License");
	http://www.apache.org/licenses/LICENSE-2.0
*/

/*
THIS FILE IS AUTOGENERATED BY 'rclgo-gen generate'
*/

package px4_msgs
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/ros2/ros2types"
	"github.com/tiiuae/rclgo/pkg/ros2/ros2_type_dispatcher"
	rosidl_runtime_c "github.com/tiiuae/rclgo/pkg/ros2/rosidl_runtime_c"
	
)
/*
#cgo LDFLAGS: -L/opt/ros/foxy/lib -Wl,-rpath=/opt/ros/foxy/lib -lrcl -lrosidl_runtime_c -lrosidl_typesupport_c -lrcutils -lrmw_implementation
#cgo LDFLAGS: -lpx4_msgs__rosidl_typesupport_c -lpx4_msgs__rosidl_generator_c

#cgo CFLAGS: -I/opt/ros/foxy/include

#include <rosidl_runtime_c/message_type_support_struct.h>
#include <px4_msgs/msg/adc_report.h>
*/
import "C"

func init() {
	ros2_type_dispatcher.RegisterROS2MsgTypeNameAlias("px4_msgs/AdcReport", &AdcReport{})
}

// Do not create instances of this type directly. Always use NewAdcReport
// function instead.
type AdcReport struct {
	Timestamp uint64 `yaml:"timestamp"`// time since system start (microseconds)
	DeviceId uint32 `yaml:"device_id"`// unique device ID for the sensor that does not change between power cycles
	ChannelId [12]int16 `yaml:"channel_id"`// ADC channel IDs, negative for non-existent, TODO: should be kept same as array index
	RawData [12]int32 `yaml:"raw_data"`// ADC channel raw value, accept negative value, valid if channel ID is positive
	Resolution uint32 `yaml:"resolution"`// ADC channel resolution
	VRef float32 `yaml:"v_ref"`// ADC channel voltage reference, use to calculate LSB voltage(lsb=scale/resolution)
}

// NewAdcReport creates a new AdcReport with default values.
func NewAdcReport() *AdcReport {
	self := AdcReport{}
	self.SetDefaults(nil)
	return &self
}

func (t *AdcReport) SetDefaults(d interface{}) ros2types.ROS2Msg {
	
	return t
}

func (t *AdcReport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__AdcReport())
}
func (t *AdcReport) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__AdcReport
	return (unsafe.Pointer)(C.px4_msgs__msg__AdcReport__create())
}
func (t *AdcReport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__AdcReport__destroy((*C.px4_msgs__msg__AdcReport)(pointer_to_free))
}
func (t *AdcReport) AsCStruct() unsafe.Pointer {
	mem := (*C.px4_msgs__msg__AdcReport)(t.PrepareMemory())
	mem.timestamp = C.uint64_t(t.Timestamp)
	mem.device_id = C.uint32_t(t.DeviceId)
	cSlice_channel_id := mem.channel_id[:]
	rosidl_runtime_c.Int16__Array_to_C(*(*[]rosidl_runtime_c.CInt16)(unsafe.Pointer(&cSlice_channel_id)), t.ChannelId[:])
	cSlice_raw_data := mem.raw_data[:]
	rosidl_runtime_c.Int32__Array_to_C(*(*[]rosidl_runtime_c.CInt32)(unsafe.Pointer(&cSlice_raw_data)), t.RawData[:])
	mem.resolution = C.uint32_t(t.Resolution)
	mem.v_ref = C.float(t.VRef)
	return unsafe.Pointer(mem)
}
func (t *AdcReport) AsGoStruct(ros2_message_buffer unsafe.Pointer) {
	mem := (*C.px4_msgs__msg__AdcReport)(ros2_message_buffer)
	t.Timestamp = uint64(mem.timestamp)
	t.DeviceId = uint32(mem.device_id)
	cSlice_channel_id := mem.channel_id[:]
	rosidl_runtime_c.Int16__Array_to_Go(t.ChannelId[:], *(*[]rosidl_runtime_c.CInt16)(unsafe.Pointer(&cSlice_channel_id)))
	cSlice_raw_data := mem.raw_data[:]
	rosidl_runtime_c.Int32__Array_to_Go(t.RawData[:], *(*[]rosidl_runtime_c.CInt32)(unsafe.Pointer(&cSlice_raw_data)))
	t.Resolution = uint32(mem.resolution)
	t.VRef = float32(mem.v_ref)
}
func (t *AdcReport) Clone() ros2types.ROS2Msg {
	clone := *t
	return &clone
}

type CAdcReport = C.px4_msgs__msg__AdcReport
type CAdcReport__Sequence = C.px4_msgs__msg__AdcReport__Sequence

func AdcReport__Sequence_to_Go(goSlice *[]AdcReport, cSlice CAdcReport__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]AdcReport, int64(cSlice.size))
	for i := 0; i < int(cSlice.size); i++ {
		cIdx := (*C.px4_msgs__msg__AdcReport__Sequence)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_px4_msgs__msg__AdcReport * uintptr(i)),
		))
		(*goSlice)[i] = AdcReport{}
		(*goSlice)[i].AsGoStruct(unsafe.Pointer(cIdx))
	}
}
func AdcReport__Sequence_to_C(cSlice *CAdcReport__Sequence, goSlice []AdcReport) {
	if len(goSlice) == 0 {
		return
	}
	cSlice.data = (*C.px4_msgs__msg__AdcReport)(C.malloc((C.size_t)(C.sizeof_struct_px4_msgs__msg__AdcReport * uintptr(len(goSlice)))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity

	for i, v := range goSlice {
		cIdx := (*C.px4_msgs__msg__AdcReport)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_px4_msgs__msg__AdcReport * uintptr(i)),
		))
		*cIdx = *(*C.px4_msgs__msg__AdcReport)(v.AsCStruct())
	}
}
func AdcReport__Array_to_Go(goSlice []AdcReport, cSlice []CAdcReport) {
	for i := 0; i < len(cSlice); i++ {
		goSlice[i].AsGoStruct(unsafe.Pointer(&cSlice[i]))
	}
}
func AdcReport__Array_to_C(cSlice []CAdcReport, goSlice []AdcReport) {
	for i := 0; i < len(goSlice); i++ {
		cSlice[i] = *(*C.px4_msgs__msg__AdcReport)(goSlice[i].AsCStruct())
	}
}


