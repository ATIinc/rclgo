/*
This file is part of rclgo

Copyright Â© 2021 Technology Innovation Institute, United Arab Emirates

Licensed under the Apache License, Version 2.0 (the "License");
	http://www.apache.org/licenses/LICENSE-2.0
*/

/*
THIS FILE IS AUTOGENERATED BY 'rclgo-gen generate'
*/

package px4_msgs
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/ros2/ros2types"
	"github.com/tiiuae/rclgo/pkg/ros2/ros2_type_dispatcher"
	
)
/*
#cgo LDFLAGS: -L/opt/ros/foxy/lib -Wl,-rpath=/opt/ros/foxy/lib -lrcl -lrosidl_runtime_c -lrosidl_typesupport_c -lrcutils -lrmw_implementation
#cgo LDFLAGS: -lpx4_msgs__rosidl_typesupport_c -lpx4_msgs__rosidl_generator_c

#cgo CFLAGS: -I/opt/ros/foxy/include

#include <rosidl_runtime_c/message_type_support_struct.h>
#include <px4_msgs/msg/landing_target_pose.h>
*/
import "C"

func init() {
	ros2_type_dispatcher.RegisterROS2MsgTypeNameAlias("px4_msgs/LandingTargetPose", &LandingTargetPose{})
}

// Do not create instances of this type directly. Always use NewLandingTargetPose
// function instead.
type LandingTargetPose struct {
	Timestamp uint64 `yaml:"timestamp"`// time since system start (microseconds)
	IsStatic bool `yaml:"is_static"`// Flag indicating whether the landing target is static or moving with respect to the ground
	RelPosValid bool `yaml:"rel_pos_valid"`// Flag showing whether relative position is valid
	RelVelValid bool `yaml:"rel_vel_valid"`// Flag showing whether relative velocity is valid
	XRel float32 `yaml:"x_rel"`// X/north position of target, relative to vehicle (navigation frame) [meters]
	YRel float32 `yaml:"y_rel"`// Y/east position of target, relative to vehicle (navigation frame) [meters]
	ZRel float32 `yaml:"z_rel"`// Z/down position of target, relative to vehicle (navigation frame) [meters]
	VxRel float32 `yaml:"vx_rel"`// X/north velocity  of target, relative to vehicle (navigation frame) [meters/second]
	VyRel float32 `yaml:"vy_rel"`// Y/east velocity of target, relative to vehicle (navigation frame) [meters/second]
	CovXRel float32 `yaml:"cov_x_rel"`// X/north position variance [meters^2]
	CovYRel float32 `yaml:"cov_y_rel"`// Y/east position variance [meters^2]
	CovVxRel float32 `yaml:"cov_vx_rel"`// X/north velocity variance [(meters/second)^2]
	CovVyRel float32 `yaml:"cov_vy_rel"`// Y/east velocity variance [(meters/second)^2]
	AbsPosValid bool `yaml:"abs_pos_valid"`// Flag showing whether absolute position is valid
	XAbs float32 `yaml:"x_abs"`// X/north position of target, relative to origin (navigation frame) [meters]
	YAbs float32 `yaml:"y_abs"`// Y/east position of target, relative to origin (navigation frame) [meters]
	ZAbs float32 `yaml:"z_abs"`// Z/down position of target, relative to origin (navigation frame) [meters]
}

// NewLandingTargetPose creates a new LandingTargetPose with default values.
func NewLandingTargetPose() *LandingTargetPose {
	self := LandingTargetPose{}
	self.SetDefaults(nil)
	return &self
}

func (t *LandingTargetPose) SetDefaults(d interface{}) ros2types.ROS2Msg {
	
	return t
}

func (t *LandingTargetPose) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__LandingTargetPose())
}
func (t *LandingTargetPose) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__LandingTargetPose
	return (unsafe.Pointer)(C.px4_msgs__msg__LandingTargetPose__create())
}
func (t *LandingTargetPose) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__LandingTargetPose__destroy((*C.px4_msgs__msg__LandingTargetPose)(pointer_to_free))
}
func (t *LandingTargetPose) AsCStruct() unsafe.Pointer {
	mem := (*C.px4_msgs__msg__LandingTargetPose)(t.PrepareMemory())
	mem.timestamp = C.uint64_t(t.Timestamp)
	mem.is_static = C.bool(t.IsStatic)
	mem.rel_pos_valid = C.bool(t.RelPosValid)
	mem.rel_vel_valid = C.bool(t.RelVelValid)
	mem.x_rel = C.float(t.XRel)
	mem.y_rel = C.float(t.YRel)
	mem.z_rel = C.float(t.ZRel)
	mem.vx_rel = C.float(t.VxRel)
	mem.vy_rel = C.float(t.VyRel)
	mem.cov_x_rel = C.float(t.CovXRel)
	mem.cov_y_rel = C.float(t.CovYRel)
	mem.cov_vx_rel = C.float(t.CovVxRel)
	mem.cov_vy_rel = C.float(t.CovVyRel)
	mem.abs_pos_valid = C.bool(t.AbsPosValid)
	mem.x_abs = C.float(t.XAbs)
	mem.y_abs = C.float(t.YAbs)
	mem.z_abs = C.float(t.ZAbs)
	return unsafe.Pointer(mem)
}
func (t *LandingTargetPose) AsGoStruct(ros2_message_buffer unsafe.Pointer) {
	mem := (*C.px4_msgs__msg__LandingTargetPose)(ros2_message_buffer)
	t.Timestamp = uint64(mem.timestamp)
	t.IsStatic = bool(mem.is_static)
	t.RelPosValid = bool(mem.rel_pos_valid)
	t.RelVelValid = bool(mem.rel_vel_valid)
	t.XRel = float32(mem.x_rel)
	t.YRel = float32(mem.y_rel)
	t.ZRel = float32(mem.z_rel)
	t.VxRel = float32(mem.vx_rel)
	t.VyRel = float32(mem.vy_rel)
	t.CovXRel = float32(mem.cov_x_rel)
	t.CovYRel = float32(mem.cov_y_rel)
	t.CovVxRel = float32(mem.cov_vx_rel)
	t.CovVyRel = float32(mem.cov_vy_rel)
	t.AbsPosValid = bool(mem.abs_pos_valid)
	t.XAbs = float32(mem.x_abs)
	t.YAbs = float32(mem.y_abs)
	t.ZAbs = float32(mem.z_abs)
}
func (t *LandingTargetPose) Clone() ros2types.ROS2Msg {
	clone := *t
	return &clone
}

type CLandingTargetPose = C.px4_msgs__msg__LandingTargetPose
type CLandingTargetPose__Sequence = C.px4_msgs__msg__LandingTargetPose__Sequence

func LandingTargetPose__Sequence_to_Go(goSlice *[]LandingTargetPose, cSlice CLandingTargetPose__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]LandingTargetPose, int64(cSlice.size))
	for i := 0; i < int(cSlice.size); i++ {
		cIdx := (*C.px4_msgs__msg__LandingTargetPose__Sequence)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_px4_msgs__msg__LandingTargetPose * uintptr(i)),
		))
		(*goSlice)[i] = LandingTargetPose{}
		(*goSlice)[i].AsGoStruct(unsafe.Pointer(cIdx))
	}
}
func LandingTargetPose__Sequence_to_C(cSlice *CLandingTargetPose__Sequence, goSlice []LandingTargetPose) {
	if len(goSlice) == 0 {
		return
	}
	cSlice.data = (*C.px4_msgs__msg__LandingTargetPose)(C.malloc((C.size_t)(C.sizeof_struct_px4_msgs__msg__LandingTargetPose * uintptr(len(goSlice)))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity

	for i, v := range goSlice {
		cIdx := (*C.px4_msgs__msg__LandingTargetPose)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_px4_msgs__msg__LandingTargetPose * uintptr(i)),
		))
		*cIdx = *(*C.px4_msgs__msg__LandingTargetPose)(v.AsCStruct())
	}
}
func LandingTargetPose__Array_to_Go(goSlice []LandingTargetPose, cSlice []CLandingTargetPose) {
	for i := 0; i < len(cSlice); i++ {
		goSlice[i].AsGoStruct(unsafe.Pointer(&cSlice[i]))
	}
}
func LandingTargetPose__Array_to_C(cSlice []CLandingTargetPose, goSlice []LandingTargetPose) {
	for i := 0; i < len(goSlice); i++ {
		cSlice[i] = *(*C.px4_msgs__msg__LandingTargetPose)(goSlice[i].AsCStruct())
	}
}


