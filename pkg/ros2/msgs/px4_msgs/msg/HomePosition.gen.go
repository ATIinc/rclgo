/*
This file is part of rclgo

Copyright Â© 2021 Technology Innovation Institute, United Arab Emirates

Licensed under the Apache License, Version 2.0 (the "License");
	http://www.apache.org/licenses/LICENSE-2.0
*/

/*
THIS FILE IS AUTOGENERATED BY 'rclgo-gen generate'
*/

package px4_msgs_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/ros2/ros2types"
	"github.com/tiiuae/rclgo/pkg/ros2/ros2_type_dispatcher"
	
)
/*
#cgo LDFLAGS: -L/opt/ros/foxy/lib -Wl,-rpath=/opt/ros/foxy/lib -lrcl -lrosidl_runtime_c -lrosidl_typesupport_c -lrcutils -lrmw_implementation
#cgo LDFLAGS: -lpx4_msgs__rosidl_typesupport_c -lpx4_msgs__rosidl_generator_c

#cgo CFLAGS: -I/opt/ros/foxy/include

#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/home_position.h>

*/
import "C"

func init() {
	ros2_type_dispatcher.RegisterROS2MsgTypeNameAlias("px4_msgs/HomePosition", &HomePosition{})
}

// Do not create instances of this type directly. Always use NewHomePosition
// function instead.
type HomePosition struct {
	Timestamp uint64 `yaml:"timestamp"`// time since system start (microseconds)
	Lat float64 `yaml:"lat"`// Latitude in degrees
	Lon float64 `yaml:"lon"`// Longitude in degrees
	Alt float32 `yaml:"alt"`// Altitude in meters (AMSL)
	X float32 `yaml:"x"`// X coordinate in meters
	Y float32 `yaml:"y"`// Y coordinate in meters
	Z float32 `yaml:"z"`// Z coordinate in meters
	Yaw float32 `yaml:"yaw"`// Yaw angle in radians
	ValidAlt bool `yaml:"valid_alt"`// true when the altitude has been set
	ValidHpos bool `yaml:"valid_hpos"`// true when the latitude and longitude have been set
	ValidLpos bool `yaml:"valid_lpos"`// true when the local position (xyz) has been set
	ManualHome bool `yaml:"manual_home"`// true when home position was set manually
}

// NewHomePosition creates a new HomePosition with default values.
func NewHomePosition() *HomePosition {
	self := HomePosition{}
	self.SetDefaults(nil)
	return &self
}

func (t *HomePosition) SetDefaults(d interface{}) ros2types.ROS2Msg {
	
	return t
}

func (t *HomePosition) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__HomePosition())
}
func (t *HomePosition) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__HomePosition
	return (unsafe.Pointer)(C.px4_msgs__msg__HomePosition__create())
}
func (t *HomePosition) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__HomePosition__destroy((*C.px4_msgs__msg__HomePosition)(pointer_to_free))
}
func (t *HomePosition) AsCStruct() unsafe.Pointer {
	mem := (*C.px4_msgs__msg__HomePosition)(t.PrepareMemory())
	mem.timestamp = C.uint64_t(t.Timestamp)
	mem.lat = C.double(t.Lat)
	mem.lon = C.double(t.Lon)
	mem.alt = C.float(t.Alt)
	mem.x = C.float(t.X)
	mem.y = C.float(t.Y)
	mem.z = C.float(t.Z)
	mem.yaw = C.float(t.Yaw)
	mem.valid_alt = C.bool(t.ValidAlt)
	mem.valid_hpos = C.bool(t.ValidHpos)
	mem.valid_lpos = C.bool(t.ValidLpos)
	mem.manual_home = C.bool(t.ManualHome)
	return unsafe.Pointer(mem)
}
func (t *HomePosition) AsGoStruct(ros2_message_buffer unsafe.Pointer) {
	mem := (*C.px4_msgs__msg__HomePosition)(ros2_message_buffer)
	t.Timestamp = uint64(mem.timestamp)
	t.Lat = float64(mem.lat)
	t.Lon = float64(mem.lon)
	t.Alt = float32(mem.alt)
	t.X = float32(mem.x)
	t.Y = float32(mem.y)
	t.Z = float32(mem.z)
	t.Yaw = float32(mem.yaw)
	t.ValidAlt = bool(mem.valid_alt)
	t.ValidHpos = bool(mem.valid_hpos)
	t.ValidLpos = bool(mem.valid_lpos)
	t.ManualHome = bool(mem.manual_home)
}
func (t *HomePosition) Clone() ros2types.ROS2Msg {
	clone := *t
	return &clone
}

type CHomePosition = C.px4_msgs__msg__HomePosition
type CHomePosition__Sequence = C.px4_msgs__msg__HomePosition__Sequence

func HomePosition__Sequence_to_Go(goSlice *[]HomePosition, cSlice CHomePosition__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]HomePosition, int64(cSlice.size))
	for i := 0; i < int(cSlice.size); i++ {
		cIdx := (*C.px4_msgs__msg__HomePosition__Sequence)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_px4_msgs__msg__HomePosition * uintptr(i)),
		))
		(*goSlice)[i] = HomePosition{}
		(*goSlice)[i].AsGoStruct(unsafe.Pointer(cIdx))
	}
}
func HomePosition__Sequence_to_C(cSlice *CHomePosition__Sequence, goSlice []HomePosition) {
	if len(goSlice) == 0 {
		return
	}
	cSlice.data = (*C.px4_msgs__msg__HomePosition)(C.malloc((C.size_t)(C.sizeof_struct_px4_msgs__msg__HomePosition * uintptr(len(goSlice)))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity

	for i, v := range goSlice {
		cIdx := (*C.px4_msgs__msg__HomePosition)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_px4_msgs__msg__HomePosition * uintptr(i)),
		))
		*cIdx = *(*C.px4_msgs__msg__HomePosition)(v.AsCStruct())
	}
}
func HomePosition__Array_to_Go(goSlice []HomePosition, cSlice []CHomePosition) {
	for i := 0; i < len(cSlice); i++ {
		goSlice[i].AsGoStruct(unsafe.Pointer(&cSlice[i]))
	}
}
func HomePosition__Array_to_C(cSlice []CHomePosition, goSlice []HomePosition) {
	for i := 0; i < len(goSlice); i++ {
		cSlice[i] = *(*C.px4_msgs__msg__HomePosition)(goSlice[i].AsCStruct())
	}
}


