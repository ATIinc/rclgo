/*
This file is part of rclgo

Copyright Â© 2021 Technology Innovation Institute, United Arab Emirates

Licensed under the Apache License, Version 2.0 (the "License");
	http://www.apache.org/licenses/LICENSE-2.0
*/

/*
THIS FILE IS AUTOGENERATED BY 'rclgo-gen generate'
*/

package px4_msgs_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/ros2/ros2types"
	"github.com/tiiuae/rclgo/pkg/ros2/ros2_type_dispatcher"
	rosidl_runtime_c "github.com/tiiuae/rclgo/pkg/ros2/rosidl_runtime_c"
	
)
/*
#cgo LDFLAGS: -L/opt/ros/foxy/lib -Wl,-rpath=/opt/ros/foxy/lib -lrcl -lrosidl_runtime_c -lrosidl_typesupport_c -lrcutils -lrmw_implementation
#cgo LDFLAGS: -lpx4_msgs__rosidl_typesupport_c -lpx4_msgs__rosidl_generator_c

#cgo CFLAGS: -I/opt/ros/foxy/include

#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/gps_inject_data.h>

*/
import "C"

func init() {
	ros2_type_dispatcher.RegisterROS2MsgTypeNameAlias("px4_msgs/GpsInjectData", &GpsInjectData{})
}
const (
	GpsInjectData_ORB_QUEUE_LENGTH uint8 = 8
)

// Do not create instances of this type directly. Always use NewGpsInjectData
// function instead.
type GpsInjectData struct {
	Timestamp uint64 `yaml:"timestamp"`// time since system start (microseconds)
	Len uint8 `yaml:"len"`// length of data
	Flags uint8 `yaml:"flags"`// LSB: 1=fragmented
	Data [182]uint8 `yaml:"data"`// data to write to GPS device (RTCM message)
}

// NewGpsInjectData creates a new GpsInjectData with default values.
func NewGpsInjectData() *GpsInjectData {
	self := GpsInjectData{}
	self.SetDefaults(nil)
	return &self
}

func (t *GpsInjectData) SetDefaults(d interface{}) ros2types.ROS2Msg {
	
	return t
}

func (t *GpsInjectData) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__GpsInjectData())
}
func (t *GpsInjectData) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__GpsInjectData
	return (unsafe.Pointer)(C.px4_msgs__msg__GpsInjectData__create())
}
func (t *GpsInjectData) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__GpsInjectData__destroy((*C.px4_msgs__msg__GpsInjectData)(pointer_to_free))
}
func (t *GpsInjectData) AsCStruct() unsafe.Pointer {
	mem := (*C.px4_msgs__msg__GpsInjectData)(t.PrepareMemory())
	mem.timestamp = C.uint64_t(t.Timestamp)
	mem.len = C.uint8_t(t.Len)
	mem.flags = C.uint8_t(t.Flags)
	cSlice_data := mem.data[:]
	rosidl_runtime_c.Uint8__Array_to_C(*(*[]rosidl_runtime_c.CUint8)(unsafe.Pointer(&cSlice_data)), t.Data[:])
	return unsafe.Pointer(mem)
}
func (t *GpsInjectData) AsGoStruct(ros2_message_buffer unsafe.Pointer) {
	mem := (*C.px4_msgs__msg__GpsInjectData)(ros2_message_buffer)
	t.Timestamp = uint64(mem.timestamp)
	t.Len = uint8(mem.len)
	t.Flags = uint8(mem.flags)
	cSlice_data := mem.data[:]
	rosidl_runtime_c.Uint8__Array_to_Go(t.Data[:], *(*[]rosidl_runtime_c.CUint8)(unsafe.Pointer(&cSlice_data)))
}
func (t *GpsInjectData) Clone() ros2types.ROS2Msg {
	clone := *t
	return &clone
}

type CGpsInjectData = C.px4_msgs__msg__GpsInjectData
type CGpsInjectData__Sequence = C.px4_msgs__msg__GpsInjectData__Sequence

func GpsInjectData__Sequence_to_Go(goSlice *[]GpsInjectData, cSlice CGpsInjectData__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]GpsInjectData, int64(cSlice.size))
	for i := 0; i < int(cSlice.size); i++ {
		cIdx := (*C.px4_msgs__msg__GpsInjectData__Sequence)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_px4_msgs__msg__GpsInjectData * uintptr(i)),
		))
		(*goSlice)[i] = GpsInjectData{}
		(*goSlice)[i].AsGoStruct(unsafe.Pointer(cIdx))
	}
}
func GpsInjectData__Sequence_to_C(cSlice *CGpsInjectData__Sequence, goSlice []GpsInjectData) {
	if len(goSlice) == 0 {
		return
	}
	cSlice.data = (*C.px4_msgs__msg__GpsInjectData)(C.malloc((C.size_t)(C.sizeof_struct_px4_msgs__msg__GpsInjectData * uintptr(len(goSlice)))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity

	for i, v := range goSlice {
		cIdx := (*C.px4_msgs__msg__GpsInjectData)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_px4_msgs__msg__GpsInjectData * uintptr(i)),
		))
		*cIdx = *(*C.px4_msgs__msg__GpsInjectData)(v.AsCStruct())
	}
}
func GpsInjectData__Array_to_Go(goSlice []GpsInjectData, cSlice []CGpsInjectData) {
	for i := 0; i < len(cSlice); i++ {
		goSlice[i].AsGoStruct(unsafe.Pointer(&cSlice[i]))
	}
}
func GpsInjectData__Array_to_C(cSlice []CGpsInjectData, goSlice []GpsInjectData) {
	for i := 0; i < len(goSlice); i++ {
		cSlice[i] = *(*C.px4_msgs__msg__GpsInjectData)(goSlice[i].AsCStruct())
	}
}


