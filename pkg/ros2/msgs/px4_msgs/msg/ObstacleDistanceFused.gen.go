/*
This file is part of rclgo

Copyright Â© 2021 Technology Innovation Institute, United Arab Emirates

Licensed under the Apache License, Version 2.0 (the "License");
	http://www.apache.org/licenses/LICENSE-2.0
*/

/*
THIS FILE IS AUTOGENERATED BY 'rclgo-gen generate'
*/

package px4_msgs
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/ros2/ros2types"
	"github.com/tiiuae/rclgo/pkg/ros2/ros2_type_dispatcher"
	rosidl_runtime_c "github.com/tiiuae/rclgo/pkg/ros2/rosidl_runtime_c"
	
)
/*
#cgo LDFLAGS: -L/opt/ros/foxy/lib -Wl,-rpath=/opt/ros/foxy/lib -lrcl -lrosidl_runtime_c -lrosidl_typesupport_c -lrcutils -lrmw_implementation
#cgo LDFLAGS: -lpx4_msgs__rosidl_typesupport_c -lpx4_msgs__rosidl_generator_c

#cgo CFLAGS: -I/opt/ros/foxy/include

#include <rosidl_runtime_c/message_type_support_struct.h>
#include <px4_msgs/msg/obstacle_distance_fused.h>
*/
import "C"

func init() {
	ros2_type_dispatcher.RegisterROS2MsgTypeNameAlias("px4_msgs/ObstacleDistanceFused", &ObstacleDistanceFused{})
}
const (
	ObstacleDistanceFused_MAV_FRAME_GLOBAL uint8 = 0
	ObstacleDistanceFused_MAV_FRAME_LOCAL_NED uint8 = 1
	ObstacleDistanceFused_MAV_FRAME_BODY_FRD uint8 = 12
	ObstacleDistanceFused_MAV_DISTANCE_SENSOR_LASER uint8 = 0
	ObstacleDistanceFused_MAV_DISTANCE_SENSOR_ULTRASOUND uint8 = 1
	ObstacleDistanceFused_MAV_DISTANCE_SENSOR_INFRARED uint8 = 2
	ObstacleDistanceFused_MAV_DISTANCE_SENSOR_RADAR uint8 = 3
)

// Do not create instances of this type directly. Always use NewObstacleDistanceFused
// function instead.
type ObstacleDistanceFused struct {
	Timestamp uint64 `yaml:"timestamp"`// time since system start (microseconds). Obstacle distances in front of the sensor.
	Frame uint8 `yaml:"frame"`// Coordinate frame of reference for the yaw rotation and offset of the sensor data. Defaults to MAV_FRAME_GLOBAL, which is North aligned. For body-mounted sensors use MAV_FRAME_BODY_FRD, which is vehicle front aligned.
	SensorType uint8 `yaml:"sensor_type"`// Type from MAV_DISTANCE_SENSOR enum.
	Distances [72]uint16 `yaml:"distances"`// Distance of obstacles around the UAV with index 0 corresponding to local North. A value of 0 means that the obstacle is right in front of the sensor. A value of max_distance +1 means no obstacle is present. A value of UINT16_MAX for unknown/not used. In a array element, one unit corresponds to 1cm.
	Increment float32 `yaml:"increment"`// Angular width in degrees of each array element.
	MinDistance uint16 `yaml:"min_distance"`// Minimum distance the sensor can measure in centimeters.
	MaxDistance uint16 `yaml:"max_distance"`// Maximum distance the sensor can measure in centimeters.
	AngleOffset float32 `yaml:"angle_offset"`// Relative angle offset of the 0-index element in the distances array. Value of 0 corresponds to forward. Positive values are offsets to the right.
}

// NewObstacleDistanceFused creates a new ObstacleDistanceFused with default values.
func NewObstacleDistanceFused() *ObstacleDistanceFused {
	self := ObstacleDistanceFused{}
	self.SetDefaults(nil)
	return &self
}

func (t *ObstacleDistanceFused) SetDefaults(d interface{}) ros2types.ROS2Msg {
	
	return t
}

func (t *ObstacleDistanceFused) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__ObstacleDistanceFused())
}
func (t *ObstacleDistanceFused) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__ObstacleDistanceFused
	return (unsafe.Pointer)(C.px4_msgs__msg__ObstacleDistanceFused__create())
}
func (t *ObstacleDistanceFused) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__ObstacleDistanceFused__destroy((*C.px4_msgs__msg__ObstacleDistanceFused)(pointer_to_free))
}
func (t *ObstacleDistanceFused) AsCStruct() unsafe.Pointer {
	mem := (*C.px4_msgs__msg__ObstacleDistanceFused)(t.PrepareMemory())
	mem.timestamp = C.uint64_t(t.Timestamp)
	mem.frame = C.uint8_t(t.Frame)
	mem.sensor_type = C.uint8_t(t.SensorType)
	cSlice_distances := mem.distances[:]
	rosidl_runtime_c.Uint16__Array_to_C(*(*[]rosidl_runtime_c.CUint16)(unsafe.Pointer(&cSlice_distances)), t.Distances[:])
	mem.increment = C.float(t.Increment)
	mem.min_distance = C.uint16_t(t.MinDistance)
	mem.max_distance = C.uint16_t(t.MaxDistance)
	mem.angle_offset = C.float(t.AngleOffset)
	return unsafe.Pointer(mem)
}
func (t *ObstacleDistanceFused) AsGoStruct(ros2_message_buffer unsafe.Pointer) {
	mem := (*C.px4_msgs__msg__ObstacleDistanceFused)(ros2_message_buffer)
	t.Timestamp = uint64(mem.timestamp)
	t.Frame = uint8(mem.frame)
	t.SensorType = uint8(mem.sensor_type)
	cSlice_distances := mem.distances[:]
	rosidl_runtime_c.Uint16__Array_to_Go(t.Distances[:], *(*[]rosidl_runtime_c.CUint16)(unsafe.Pointer(&cSlice_distances)))
	t.Increment = float32(mem.increment)
	t.MinDistance = uint16(mem.min_distance)
	t.MaxDistance = uint16(mem.max_distance)
	t.AngleOffset = float32(mem.angle_offset)
}
func (t *ObstacleDistanceFused) Clone() ros2types.ROS2Msg {
	clone := *t
	return &clone
}

type CObstacleDistanceFused = C.px4_msgs__msg__ObstacleDistanceFused
type CObstacleDistanceFused__Sequence = C.px4_msgs__msg__ObstacleDistanceFused__Sequence

func ObstacleDistanceFused__Sequence_to_Go(goSlice *[]ObstacleDistanceFused, cSlice CObstacleDistanceFused__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]ObstacleDistanceFused, int64(cSlice.size))
	for i := 0; i < int(cSlice.size); i++ {
		cIdx := (*C.px4_msgs__msg__ObstacleDistanceFused__Sequence)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_px4_msgs__msg__ObstacleDistanceFused * uintptr(i)),
		))
		(*goSlice)[i] = ObstacleDistanceFused{}
		(*goSlice)[i].AsGoStruct(unsafe.Pointer(cIdx))
	}
}
func ObstacleDistanceFused__Sequence_to_C(cSlice *CObstacleDistanceFused__Sequence, goSlice []ObstacleDistanceFused) {
	if len(goSlice) == 0 {
		return
	}
	cSlice.data = (*C.px4_msgs__msg__ObstacleDistanceFused)(C.malloc((C.size_t)(C.sizeof_struct_px4_msgs__msg__ObstacleDistanceFused * uintptr(len(goSlice)))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity

	for i, v := range goSlice {
		cIdx := (*C.px4_msgs__msg__ObstacleDistanceFused)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_px4_msgs__msg__ObstacleDistanceFused * uintptr(i)),
		))
		*cIdx = *(*C.px4_msgs__msg__ObstacleDistanceFused)(v.AsCStruct())
	}
}
func ObstacleDistanceFused__Array_to_Go(goSlice []ObstacleDistanceFused, cSlice []CObstacleDistanceFused) {
	for i := 0; i < len(cSlice); i++ {
		goSlice[i].AsGoStruct(unsafe.Pointer(&cSlice[i]))
	}
}
func ObstacleDistanceFused__Array_to_C(cSlice []CObstacleDistanceFused, goSlice []ObstacleDistanceFused) {
	for i := 0; i < len(goSlice); i++ {
		cSlice[i] = *(*C.px4_msgs__msg__ObstacleDistanceFused)(goSlice[i].AsCStruct())
	}
}


