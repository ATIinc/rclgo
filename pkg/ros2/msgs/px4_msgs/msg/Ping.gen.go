/*
This file is part of rclgo

Copyright Â© 2021 Technology Innovation Institute, United Arab Emirates

Licensed under the Apache License, Version 2.0 (the "License");
	http://www.apache.org/licenses/LICENSE-2.0
*/

/*
THIS FILE IS AUTOGENERATED BY 'rclgo-gen generate'
*/

package px4_msgs
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/ros2/ros2types"
	"github.com/tiiuae/rclgo/pkg/ros2/ros2_type_dispatcher"
	
)
/*
#cgo LDFLAGS: -L/opt/ros/foxy/lib -Wl,-rpath=/opt/ros/foxy/lib -lrcl -lrosidl_runtime_c -lrosidl_typesupport_c -lrcutils -lrmw_implementation
#cgo LDFLAGS: -lpx4_msgs__rosidl_typesupport_c -lpx4_msgs__rosidl_generator_c

#cgo CFLAGS: -I/opt/ros/foxy/include

#include <rosidl_runtime_c/message_type_support_struct.h>
#include <px4_msgs/msg/ping.h>
*/
import "C"

func init() {
	ros2_type_dispatcher.RegisterROS2MsgTypeNameAlias("px4_msgs/Ping", &Ping{})
}

// Do not create instances of this type directly. Always use NewPing
// function instead.
type Ping struct {
	Timestamp uint64 `yaml:"timestamp"`// time since system start (microseconds)
	PingTime uint64 `yaml:"ping_time"`// Timestamp of the ping packet
	PingSequence uint32 `yaml:"ping_sequence"`// Sequence number of the ping packet
	DroppedPackets uint32 `yaml:"dropped_packets"`// Number of dropped ping packets
	RttMs float32 `yaml:"rtt_ms"`// Round trip time (in ms)
	SystemId uint8 `yaml:"system_id"`// System ID of the remote system
	ComponentId uint8 `yaml:"component_id"`// Component ID of the remote system
}

// NewPing creates a new Ping with default values.
func NewPing() *Ping {
	self := Ping{}
	self.SetDefaults(nil)
	return &self
}

func (t *Ping) SetDefaults(d interface{}) ros2types.ROS2Msg {
	
	return t
}

func (t *Ping) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__Ping())
}
func (t *Ping) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__Ping
	return (unsafe.Pointer)(C.px4_msgs__msg__Ping__create())
}
func (t *Ping) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__Ping__destroy((*C.px4_msgs__msg__Ping)(pointer_to_free))
}
func (t *Ping) AsCStruct() unsafe.Pointer {
	mem := (*C.px4_msgs__msg__Ping)(t.PrepareMemory())
	mem.timestamp = C.uint64_t(t.Timestamp)
	mem.ping_time = C.uint64_t(t.PingTime)
	mem.ping_sequence = C.uint32_t(t.PingSequence)
	mem.dropped_packets = C.uint32_t(t.DroppedPackets)
	mem.rtt_ms = C.float(t.RttMs)
	mem.system_id = C.uint8_t(t.SystemId)
	mem.component_id = C.uint8_t(t.ComponentId)
	return unsafe.Pointer(mem)
}
func (t *Ping) AsGoStruct(ros2_message_buffer unsafe.Pointer) {
	mem := (*C.px4_msgs__msg__Ping)(ros2_message_buffer)
	t.Timestamp = uint64(mem.timestamp)
	t.PingTime = uint64(mem.ping_time)
	t.PingSequence = uint32(mem.ping_sequence)
	t.DroppedPackets = uint32(mem.dropped_packets)
	t.RttMs = float32(mem.rtt_ms)
	t.SystemId = uint8(mem.system_id)
	t.ComponentId = uint8(mem.component_id)
}
func (t *Ping) Clone() ros2types.ROS2Msg {
	clone := *t
	return &clone
}

type CPing = C.px4_msgs__msg__Ping
type CPing__Sequence = C.px4_msgs__msg__Ping__Sequence

func Ping__Sequence_to_Go(goSlice *[]Ping, cSlice CPing__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]Ping, int64(cSlice.size))
	for i := 0; i < int(cSlice.size); i++ {
		cIdx := (*C.px4_msgs__msg__Ping__Sequence)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_px4_msgs__msg__Ping * uintptr(i)),
		))
		(*goSlice)[i] = Ping{}
		(*goSlice)[i].AsGoStruct(unsafe.Pointer(cIdx))
	}
}
func Ping__Sequence_to_C(cSlice *CPing__Sequence, goSlice []Ping) {
	if len(goSlice) == 0 {
		return
	}
	cSlice.data = (*C.px4_msgs__msg__Ping)(C.malloc((C.size_t)(C.sizeof_struct_px4_msgs__msg__Ping * uintptr(len(goSlice)))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity

	for i, v := range goSlice {
		cIdx := (*C.px4_msgs__msg__Ping)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_px4_msgs__msg__Ping * uintptr(i)),
		))
		*cIdx = *(*C.px4_msgs__msg__Ping)(v.AsCStruct())
	}
}
func Ping__Array_to_Go(goSlice []Ping, cSlice []CPing) {
	for i := 0; i < len(cSlice); i++ {
		goSlice[i].AsGoStruct(unsafe.Pointer(&cSlice[i]))
	}
}
func Ping__Array_to_C(cSlice []CPing, goSlice []Ping) {
	for i := 0; i < len(goSlice); i++ {
		cSlice[i] = *(*C.px4_msgs__msg__Ping)(goSlice[i].AsCStruct())
	}
}


