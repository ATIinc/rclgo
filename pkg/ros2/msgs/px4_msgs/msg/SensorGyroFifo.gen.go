/*
This file is part of rclgo

Copyright Â© 2021 Technology Innovation Institute, United Arab Emirates

Licensed under the Apache License, Version 2.0 (the "License");
	http://www.apache.org/licenses/LICENSE-2.0
*/

/*
THIS FILE IS AUTOGENERATED BY 'rclgo-gen generate'
*/

package px4_msgs
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/ros2/ros2types"
	"github.com/tiiuae/rclgo/pkg/ros2/ros2_type_dispatcher"
	rosidl_runtime_c "github.com/tiiuae/rclgo/pkg/ros2/rosidl_runtime_c"
	
)
/*
#cgo LDFLAGS: -L/opt/ros/foxy/lib -Wl,-rpath=/opt/ros/foxy/lib -lrcl -lrosidl_runtime_c -lrosidl_typesupport_c -lrcutils -lrmw_implementation
#cgo LDFLAGS: -lpx4_msgs__rosidl_typesupport_c -lpx4_msgs__rosidl_generator_c

#cgo CFLAGS: -I/opt/ros/foxy/include

#include <rosidl_runtime_c/message_type_support_struct.h>
#include <px4_msgs/msg/sensor_gyro_fifo.h>
*/
import "C"

func init() {
	ros2_type_dispatcher.RegisterROS2MsgTypeNameAlias("px4_msgs/SensorGyroFifo", &SensorGyroFifo{})
}
const (
	SensorGyroFifo_ORB_QUEUE_LENGTH uint8 = 4
)

// Do not create instances of this type directly. Always use NewSensorGyroFifo
// function instead.
type SensorGyroFifo struct {
	Timestamp uint64 `yaml:"timestamp"`// time since system start (microseconds)
	TimestampSample uint64 `yaml:"timestamp_sample"`
	DeviceId uint32 `yaml:"device_id"`// unique device ID for the sensor that does not change between power cycles
	Dt float32 `yaml:"dt"`// delta time between samples (microseconds)
	Scale float32 `yaml:"scale"`
	Samples uint8 `yaml:"samples"`// number of valid samples
	X [32]int16 `yaml:"x"`// angular velocity in the FRD board frame X-axis in rad/s
	Y [32]int16 `yaml:"y"`// angular velocity in the FRD board frame Y-axis in rad/s
	Z [32]int16 `yaml:"z"`// angular velocity in the FRD board frame Z-axis in rad/s
}

// NewSensorGyroFifo creates a new SensorGyroFifo with default values.
func NewSensorGyroFifo() *SensorGyroFifo {
	self := SensorGyroFifo{}
	self.SetDefaults(nil)
	return &self
}

func (t *SensorGyroFifo) SetDefaults(d interface{}) ros2types.ROS2Msg {
	
	return t
}

func (t *SensorGyroFifo) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__SensorGyroFifo())
}
func (t *SensorGyroFifo) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__SensorGyroFifo
	return (unsafe.Pointer)(C.px4_msgs__msg__SensorGyroFifo__create())
}
func (t *SensorGyroFifo) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__SensorGyroFifo__destroy((*C.px4_msgs__msg__SensorGyroFifo)(pointer_to_free))
}
func (t *SensorGyroFifo) AsCStruct() unsafe.Pointer {
	mem := (*C.px4_msgs__msg__SensorGyroFifo)(t.PrepareMemory())
	mem.timestamp = C.uint64_t(t.Timestamp)
	mem.timestamp_sample = C.uint64_t(t.TimestampSample)
	mem.device_id = C.uint32_t(t.DeviceId)
	mem.dt = C.float(t.Dt)
	mem.scale = C.float(t.Scale)
	mem.samples = C.uint8_t(t.Samples)
	cSlice_x := mem.x[:]
	rosidl_runtime_c.Int16__Array_to_C(*(*[]rosidl_runtime_c.CInt16)(unsafe.Pointer(&cSlice_x)), t.X[:])
	cSlice_y := mem.y[:]
	rosidl_runtime_c.Int16__Array_to_C(*(*[]rosidl_runtime_c.CInt16)(unsafe.Pointer(&cSlice_y)), t.Y[:])
	cSlice_z := mem.z[:]
	rosidl_runtime_c.Int16__Array_to_C(*(*[]rosidl_runtime_c.CInt16)(unsafe.Pointer(&cSlice_z)), t.Z[:])
	return unsafe.Pointer(mem)
}
func (t *SensorGyroFifo) AsGoStruct(ros2_message_buffer unsafe.Pointer) {
	mem := (*C.px4_msgs__msg__SensorGyroFifo)(ros2_message_buffer)
	t.Timestamp = uint64(mem.timestamp)
	t.TimestampSample = uint64(mem.timestamp_sample)
	t.DeviceId = uint32(mem.device_id)
	t.Dt = float32(mem.dt)
	t.Scale = float32(mem.scale)
	t.Samples = uint8(mem.samples)
	cSlice_x := mem.x[:]
	rosidl_runtime_c.Int16__Array_to_Go(t.X[:], *(*[]rosidl_runtime_c.CInt16)(unsafe.Pointer(&cSlice_x)))
	cSlice_y := mem.y[:]
	rosidl_runtime_c.Int16__Array_to_Go(t.Y[:], *(*[]rosidl_runtime_c.CInt16)(unsafe.Pointer(&cSlice_y)))
	cSlice_z := mem.z[:]
	rosidl_runtime_c.Int16__Array_to_Go(t.Z[:], *(*[]rosidl_runtime_c.CInt16)(unsafe.Pointer(&cSlice_z)))
}
func (t *SensorGyroFifo) Clone() ros2types.ROS2Msg {
	clone := *t
	return &clone
}

type CSensorGyroFifo = C.px4_msgs__msg__SensorGyroFifo
type CSensorGyroFifo__Sequence = C.px4_msgs__msg__SensorGyroFifo__Sequence

func SensorGyroFifo__Sequence_to_Go(goSlice *[]SensorGyroFifo, cSlice CSensorGyroFifo__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]SensorGyroFifo, int64(cSlice.size))
	for i := 0; i < int(cSlice.size); i++ {
		cIdx := (*C.px4_msgs__msg__SensorGyroFifo__Sequence)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_px4_msgs__msg__SensorGyroFifo * uintptr(i)),
		))
		(*goSlice)[i] = SensorGyroFifo{}
		(*goSlice)[i].AsGoStruct(unsafe.Pointer(cIdx))
	}
}
func SensorGyroFifo__Sequence_to_C(cSlice *CSensorGyroFifo__Sequence, goSlice []SensorGyroFifo) {
	if len(goSlice) == 0 {
		return
	}
	cSlice.data = (*C.px4_msgs__msg__SensorGyroFifo)(C.malloc((C.size_t)(C.sizeof_struct_px4_msgs__msg__SensorGyroFifo * uintptr(len(goSlice)))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity

	for i, v := range goSlice {
		cIdx := (*C.px4_msgs__msg__SensorGyroFifo)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_px4_msgs__msg__SensorGyroFifo * uintptr(i)),
		))
		*cIdx = *(*C.px4_msgs__msg__SensorGyroFifo)(v.AsCStruct())
	}
}
func SensorGyroFifo__Array_to_Go(goSlice []SensorGyroFifo, cSlice []CSensorGyroFifo) {
	for i := 0; i < len(cSlice); i++ {
		goSlice[i].AsGoStruct(unsafe.Pointer(&cSlice[i]))
	}
}
func SensorGyroFifo__Array_to_C(cSlice []CSensorGyroFifo, goSlice []SensorGyroFifo) {
	for i := 0; i < len(goSlice); i++ {
		cSlice[i] = *(*C.px4_msgs__msg__SensorGyroFifo)(goSlice[i].AsCStruct())
	}
}


