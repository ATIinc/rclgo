/*
This file is part of rclgo

Copyright Â© 2021 Technology Innovation Institute, United Arab Emirates

Licensed under the Apache License, Version 2.0 (the "License");
	http://www.apache.org/licenses/LICENSE-2.0
*/

/*
THIS FILE IS AUTOGENERATED BY 'rclgo-gen generate'
*/

package px4_msgs_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/ros2/ros2types"
	"github.com/tiiuae/rclgo/pkg/ros2/ros2_type_dispatcher"
	rosidl_runtime_c "github.com/tiiuae/rclgo/pkg/ros2/rosidl_runtime_c"
	
)
/*
#cgo LDFLAGS: -L/opt/ros/foxy/lib -Wl,-rpath=/opt/ros/foxy/lib -lrcl -lrosidl_runtime_c -lrosidl_typesupport_c -lrcutils -lrmw_implementation
#cgo LDFLAGS: -lpx4_msgs__rosidl_typesupport_c -lpx4_msgs__rosidl_generator_c

#cgo CFLAGS: -I/opt/ros/foxy/include

#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/vehicle_imu_status.h>

*/
import "C"

func init() {
	ros2_type_dispatcher.RegisterROS2MsgTypeNameAlias("px4_msgs/VehicleImuStatus", &VehicleImuStatus{})
}

// Do not create instances of this type directly. Always use NewVehicleImuStatus
// function instead.
type VehicleImuStatus struct {
	Timestamp uint64 `yaml:"timestamp"`// time since system start (microseconds)
	AccelDeviceId uint32 `yaml:"accel_device_id"`// unique device ID for the sensor that does not change between power cycles
	GyroDeviceId uint32 `yaml:"gyro_device_id"`// unique device ID for the sensor that does not change between power cycles
	AccelClipping [3]uint32 `yaml:"accel_clipping"`// total clipping per axis
	AccelErrorCount uint32 `yaml:"accel_error_count"`
	GyroErrorCount uint32 `yaml:"gyro_error_count"`
	AccelRateHz float32 `yaml:"accel_rate_hz"`
	GyroRateHz float32 `yaml:"gyro_rate_hz"`
	AccelRawRateHz float32 `yaml:"accel_raw_rate_hz"`// full raw sensor sample rate (Hz)
	GyroRawRateHz float32 `yaml:"gyro_raw_rate_hz"`// full raw sensor sample rate (Hz)
	AccelVibrationMetric float32 `yaml:"accel_vibration_metric"`// high frequency vibration level in the IMU delta velocity data (m/s)
	GyroVibrationMetric float32 `yaml:"gyro_vibration_metric"`// high frequency vibration level in the IMU delta velocity data (m/s)
	GyroConingVibration float32 `yaml:"gyro_coning_vibration"`// Level of coning vibration in the IMU delta angles (rad^2)
	MeanAccel [3]float32 `yaml:"mean_accel"`// average accelerometer readings since last publication
	MeanGyro [3]float32 `yaml:"mean_gyro"`// average gyroscope readings since last publication
	TemperatureAccel float32 `yaml:"temperature_accel"`
	TemperatureGyro float32 `yaml:"temperature_gyro"`
}

// NewVehicleImuStatus creates a new VehicleImuStatus with default values.
func NewVehicleImuStatus() *VehicleImuStatus {
	self := VehicleImuStatus{}
	self.SetDefaults(nil)
	return &self
}

func (t *VehicleImuStatus) SetDefaults(d interface{}) ros2types.ROS2Msg {
	
	return t
}

func (t *VehicleImuStatus) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__VehicleImuStatus())
}
func (t *VehicleImuStatus) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__VehicleImuStatus
	return (unsafe.Pointer)(C.px4_msgs__msg__VehicleImuStatus__create())
}
func (t *VehicleImuStatus) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__VehicleImuStatus__destroy((*C.px4_msgs__msg__VehicleImuStatus)(pointer_to_free))
}
func (t *VehicleImuStatus) AsCStruct() unsafe.Pointer {
	mem := (*C.px4_msgs__msg__VehicleImuStatus)(t.PrepareMemory())
	mem.timestamp = C.uint64_t(t.Timestamp)
	mem.accel_device_id = C.uint32_t(t.AccelDeviceId)
	mem.gyro_device_id = C.uint32_t(t.GyroDeviceId)
	cSlice_accel_clipping := mem.accel_clipping[:]
	rosidl_runtime_c.Uint32__Array_to_C(*(*[]rosidl_runtime_c.CUint32)(unsafe.Pointer(&cSlice_accel_clipping)), t.AccelClipping[:])
	mem.accel_error_count = C.uint32_t(t.AccelErrorCount)
	mem.gyro_error_count = C.uint32_t(t.GyroErrorCount)
	mem.accel_rate_hz = C.float(t.AccelRateHz)
	mem.gyro_rate_hz = C.float(t.GyroRateHz)
	mem.accel_raw_rate_hz = C.float(t.AccelRawRateHz)
	mem.gyro_raw_rate_hz = C.float(t.GyroRawRateHz)
	mem.accel_vibration_metric = C.float(t.AccelVibrationMetric)
	mem.gyro_vibration_metric = C.float(t.GyroVibrationMetric)
	mem.gyro_coning_vibration = C.float(t.GyroConingVibration)
	cSlice_mean_accel := mem.mean_accel[:]
	rosidl_runtime_c.Float32__Array_to_C(*(*[]rosidl_runtime_c.CFloat32)(unsafe.Pointer(&cSlice_mean_accel)), t.MeanAccel[:])
	cSlice_mean_gyro := mem.mean_gyro[:]
	rosidl_runtime_c.Float32__Array_to_C(*(*[]rosidl_runtime_c.CFloat32)(unsafe.Pointer(&cSlice_mean_gyro)), t.MeanGyro[:])
	mem.temperature_accel = C.float(t.TemperatureAccel)
	mem.temperature_gyro = C.float(t.TemperatureGyro)
	return unsafe.Pointer(mem)
}
func (t *VehicleImuStatus) AsGoStruct(ros2_message_buffer unsafe.Pointer) {
	mem := (*C.px4_msgs__msg__VehicleImuStatus)(ros2_message_buffer)
	t.Timestamp = uint64(mem.timestamp)
	t.AccelDeviceId = uint32(mem.accel_device_id)
	t.GyroDeviceId = uint32(mem.gyro_device_id)
	cSlice_accel_clipping := mem.accel_clipping[:]
	rosidl_runtime_c.Uint32__Array_to_Go(t.AccelClipping[:], *(*[]rosidl_runtime_c.CUint32)(unsafe.Pointer(&cSlice_accel_clipping)))
	t.AccelErrorCount = uint32(mem.accel_error_count)
	t.GyroErrorCount = uint32(mem.gyro_error_count)
	t.AccelRateHz = float32(mem.accel_rate_hz)
	t.GyroRateHz = float32(mem.gyro_rate_hz)
	t.AccelRawRateHz = float32(mem.accel_raw_rate_hz)
	t.GyroRawRateHz = float32(mem.gyro_raw_rate_hz)
	t.AccelVibrationMetric = float32(mem.accel_vibration_metric)
	t.GyroVibrationMetric = float32(mem.gyro_vibration_metric)
	t.GyroConingVibration = float32(mem.gyro_coning_vibration)
	cSlice_mean_accel := mem.mean_accel[:]
	rosidl_runtime_c.Float32__Array_to_Go(t.MeanAccel[:], *(*[]rosidl_runtime_c.CFloat32)(unsafe.Pointer(&cSlice_mean_accel)))
	cSlice_mean_gyro := mem.mean_gyro[:]
	rosidl_runtime_c.Float32__Array_to_Go(t.MeanGyro[:], *(*[]rosidl_runtime_c.CFloat32)(unsafe.Pointer(&cSlice_mean_gyro)))
	t.TemperatureAccel = float32(mem.temperature_accel)
	t.TemperatureGyro = float32(mem.temperature_gyro)
}
func (t *VehicleImuStatus) Clone() ros2types.ROS2Msg {
	clone := *t
	return &clone
}

type CVehicleImuStatus = C.px4_msgs__msg__VehicleImuStatus
type CVehicleImuStatus__Sequence = C.px4_msgs__msg__VehicleImuStatus__Sequence

func VehicleImuStatus__Sequence_to_Go(goSlice *[]VehicleImuStatus, cSlice CVehicleImuStatus__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]VehicleImuStatus, int64(cSlice.size))
	for i := 0; i < int(cSlice.size); i++ {
		cIdx := (*C.px4_msgs__msg__VehicleImuStatus__Sequence)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_px4_msgs__msg__VehicleImuStatus * uintptr(i)),
		))
		(*goSlice)[i] = VehicleImuStatus{}
		(*goSlice)[i].AsGoStruct(unsafe.Pointer(cIdx))
	}
}
func VehicleImuStatus__Sequence_to_C(cSlice *CVehicleImuStatus__Sequence, goSlice []VehicleImuStatus) {
	if len(goSlice) == 0 {
		return
	}
	cSlice.data = (*C.px4_msgs__msg__VehicleImuStatus)(C.malloc((C.size_t)(C.sizeof_struct_px4_msgs__msg__VehicleImuStatus * uintptr(len(goSlice)))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity

	for i, v := range goSlice {
		cIdx := (*C.px4_msgs__msg__VehicleImuStatus)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_px4_msgs__msg__VehicleImuStatus * uintptr(i)),
		))
		*cIdx = *(*C.px4_msgs__msg__VehicleImuStatus)(v.AsCStruct())
	}
}
func VehicleImuStatus__Array_to_Go(goSlice []VehicleImuStatus, cSlice []CVehicleImuStatus) {
	for i := 0; i < len(cSlice); i++ {
		goSlice[i].AsGoStruct(unsafe.Pointer(&cSlice[i]))
	}
}
func VehicleImuStatus__Array_to_C(cSlice []CVehicleImuStatus, goSlice []VehicleImuStatus) {
	for i := 0; i < len(goSlice); i++ {
		cSlice[i] = *(*C.px4_msgs__msg__VehicleImuStatus)(goSlice[i].AsCStruct())
	}
}


