/*
This file is part of rclgo

Copyright Â© 2021 Technology Innovation Institute, United Arab Emirates

Licensed under the Apache License, Version 2.0 (the "License");
	http://www.apache.org/licenses/LICENSE-2.0
*/

/*
THIS FILE IS AUTOGENERATED BY 'rclgo-gen generate'
*/

package px4_msgs_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/ros2/ros2types"
	"github.com/tiiuae/rclgo/pkg/ros2/ros2_type_dispatcher"
	
)
/*
#cgo LDFLAGS: -L/opt/ros/foxy/lib -Wl,-rpath=/opt/ros/foxy/lib -lrcl -lrosidl_runtime_c -lrosidl_typesupport_c -lrcutils -lrmw_implementation
#cgo LDFLAGS: -lpx4_msgs__rosidl_typesupport_c -lpx4_msgs__rosidl_generator_c

#cgo CFLAGS: -I/opt/ros/foxy/include

#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/collision_report.h>

*/
import "C"

func init() {
	ros2_type_dispatcher.RegisterROS2MsgTypeNameAlias("px4_msgs/CollisionReport", &CollisionReport{})
}

// Do not create instances of this type directly. Always use NewCollisionReport
// function instead.
type CollisionReport struct {
	Timestamp uint64 `yaml:"timestamp"`// time since system start (microseconds)
	Src uint8 `yaml:"src"`
	Id uint32 `yaml:"id"`
	Action uint8 `yaml:"action"`
	ThreatLevel uint8 `yaml:"threat_level"`
	TimeToMinimumDelta float32 `yaml:"time_to_minimum_delta"`
	AltitudeMinimumDelta float32 `yaml:"altitude_minimum_delta"`
	HorizontalMinimumDelta float32 `yaml:"horizontal_minimum_delta"`
}

// NewCollisionReport creates a new CollisionReport with default values.
func NewCollisionReport() *CollisionReport {
	self := CollisionReport{}
	self.SetDefaults(nil)
	return &self
}

func (t *CollisionReport) SetDefaults(d interface{}) ros2types.ROS2Msg {
	
	return t
}

func (t *CollisionReport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__CollisionReport())
}
func (t *CollisionReport) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__CollisionReport
	return (unsafe.Pointer)(C.px4_msgs__msg__CollisionReport__create())
}
func (t *CollisionReport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__CollisionReport__destroy((*C.px4_msgs__msg__CollisionReport)(pointer_to_free))
}
func (t *CollisionReport) AsCStruct() unsafe.Pointer {
	mem := (*C.px4_msgs__msg__CollisionReport)(t.PrepareMemory())
	mem.timestamp = C.uint64_t(t.Timestamp)
	mem.src = C.uint8_t(t.Src)
	mem.id = C.uint32_t(t.Id)
	mem.action = C.uint8_t(t.Action)
	mem.threat_level = C.uint8_t(t.ThreatLevel)
	mem.time_to_minimum_delta = C.float(t.TimeToMinimumDelta)
	mem.altitude_minimum_delta = C.float(t.AltitudeMinimumDelta)
	mem.horizontal_minimum_delta = C.float(t.HorizontalMinimumDelta)
	return unsafe.Pointer(mem)
}
func (t *CollisionReport) AsGoStruct(ros2_message_buffer unsafe.Pointer) {
	mem := (*C.px4_msgs__msg__CollisionReport)(ros2_message_buffer)
	t.Timestamp = uint64(mem.timestamp)
	t.Src = uint8(mem.src)
	t.Id = uint32(mem.id)
	t.Action = uint8(mem.action)
	t.ThreatLevel = uint8(mem.threat_level)
	t.TimeToMinimumDelta = float32(mem.time_to_minimum_delta)
	t.AltitudeMinimumDelta = float32(mem.altitude_minimum_delta)
	t.HorizontalMinimumDelta = float32(mem.horizontal_minimum_delta)
}
func (t *CollisionReport) Clone() ros2types.ROS2Msg {
	clone := *t
	return &clone
}

type CCollisionReport = C.px4_msgs__msg__CollisionReport
type CCollisionReport__Sequence = C.px4_msgs__msg__CollisionReport__Sequence

func CollisionReport__Sequence_to_Go(goSlice *[]CollisionReport, cSlice CCollisionReport__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]CollisionReport, int64(cSlice.size))
	for i := 0; i < int(cSlice.size); i++ {
		cIdx := (*C.px4_msgs__msg__CollisionReport__Sequence)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_px4_msgs__msg__CollisionReport * uintptr(i)),
		))
		(*goSlice)[i] = CollisionReport{}
		(*goSlice)[i].AsGoStruct(unsafe.Pointer(cIdx))
	}
}
func CollisionReport__Sequence_to_C(cSlice *CCollisionReport__Sequence, goSlice []CollisionReport) {
	if len(goSlice) == 0 {
		return
	}
	cSlice.data = (*C.px4_msgs__msg__CollisionReport)(C.malloc((C.size_t)(C.sizeof_struct_px4_msgs__msg__CollisionReport * uintptr(len(goSlice)))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity

	for i, v := range goSlice {
		cIdx := (*C.px4_msgs__msg__CollisionReport)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_px4_msgs__msg__CollisionReport * uintptr(i)),
		))
		*cIdx = *(*C.px4_msgs__msg__CollisionReport)(v.AsCStruct())
	}
}
func CollisionReport__Array_to_Go(goSlice []CollisionReport, cSlice []CCollisionReport) {
	for i := 0; i < len(cSlice); i++ {
		goSlice[i].AsGoStruct(unsafe.Pointer(&cSlice[i]))
	}
}
func CollisionReport__Array_to_C(cSlice []CCollisionReport, goSlice []CollisionReport) {
	for i := 0; i < len(goSlice); i++ {
		cSlice[i] = *(*C.px4_msgs__msg__CollisionReport)(goSlice[i].AsCStruct())
	}
}


