/*
This file is part of rclgo

Copyright Â© 2021 Technology Innovation Institute, United Arab Emirates

Licensed under the Apache License, Version 2.0 (the "License");
	http://www.apache.org/licenses/LICENSE-2.0
*/

/*
THIS FILE IS AUTOGENERATED BY 'rclgo-gen generate'
*/

package px4_msgs
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/ros2/ros2types"
	"github.com/tiiuae/rclgo/pkg/ros2/ros2_type_dispatcher"
	
)
/*
#cgo LDFLAGS: -L/opt/ros/foxy/lib -Wl,-rpath=/opt/ros/foxy/lib -lrcl -lrosidl_runtime_c -lrosidl_typesupport_c -lrcutils -lrmw_implementation
#cgo LDFLAGS: -lpx4_msgs__rosidl_typesupport_c -lpx4_msgs__rosidl_generator_c

#cgo CFLAGS: -I/opt/ros/foxy/include

#include <rosidl_runtime_c/message_type_support_struct.h>
#include <px4_msgs/msg/timesync.h>
*/
import "C"

func init() {
	ros2_type_dispatcher.RegisterROS2MsgTypeNameAlias("px4_msgs/Timesync", &Timesync{})
}

// Do not create instances of this type directly. Always use NewTimesync
// function instead.
type Timesync struct {
	Timestamp uint64 `yaml:"timestamp"`// time since system start (microseconds)
	SysId uint8 `yaml:"sys_id"`// id of the origin system
	Seq uint8 `yaml:"seq"`// timesync msg sequence
	Tc1 int64 `yaml:"tc1"`// time sync timestamp 1
	Ts1 int64 `yaml:"ts1"`// time sync timestamp 2
}

// NewTimesync creates a new Timesync with default values.
func NewTimesync() *Timesync {
	self := Timesync{}
	self.SetDefaults(nil)
	return &self
}

func (t *Timesync) SetDefaults(d interface{}) ros2types.ROS2Msg {
	
	return t
}

func (t *Timesync) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__Timesync())
}
func (t *Timesync) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__Timesync
	return (unsafe.Pointer)(C.px4_msgs__msg__Timesync__create())
}
func (t *Timesync) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__Timesync__destroy((*C.px4_msgs__msg__Timesync)(pointer_to_free))
}
func (t *Timesync) AsCStruct() unsafe.Pointer {
	mem := (*C.px4_msgs__msg__Timesync)(t.PrepareMemory())
	mem.timestamp = C.uint64_t(t.Timestamp)
	mem.sys_id = C.uint8_t(t.SysId)
	mem.seq = C.uint8_t(t.Seq)
	mem.tc1 = C.int64_t(t.Tc1)
	mem.ts1 = C.int64_t(t.Ts1)
	return unsafe.Pointer(mem)
}
func (t *Timesync) AsGoStruct(ros2_message_buffer unsafe.Pointer) {
	mem := (*C.px4_msgs__msg__Timesync)(ros2_message_buffer)
	t.Timestamp = uint64(mem.timestamp)
	t.SysId = uint8(mem.sys_id)
	t.Seq = uint8(mem.seq)
	t.Tc1 = int64(mem.tc1)
	t.Ts1 = int64(mem.ts1)
}
func (t *Timesync) Clone() ros2types.ROS2Msg {
	clone := *t
	return &clone
}

type CTimesync = C.px4_msgs__msg__Timesync
type CTimesync__Sequence = C.px4_msgs__msg__Timesync__Sequence

func Timesync__Sequence_to_Go(goSlice *[]Timesync, cSlice CTimesync__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]Timesync, int64(cSlice.size))
	for i := 0; i < int(cSlice.size); i++ {
		cIdx := (*C.px4_msgs__msg__Timesync__Sequence)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_px4_msgs__msg__Timesync * uintptr(i)),
		))
		(*goSlice)[i] = Timesync{}
		(*goSlice)[i].AsGoStruct(unsafe.Pointer(cIdx))
	}
}
func Timesync__Sequence_to_C(cSlice *CTimesync__Sequence, goSlice []Timesync) {
	if len(goSlice) == 0 {
		return
	}
	cSlice.data = (*C.px4_msgs__msg__Timesync)(C.malloc((C.size_t)(C.sizeof_struct_px4_msgs__msg__Timesync * uintptr(len(goSlice)))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity

	for i, v := range goSlice {
		cIdx := (*C.px4_msgs__msg__Timesync)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_px4_msgs__msg__Timesync * uintptr(i)),
		))
		*cIdx = *(*C.px4_msgs__msg__Timesync)(v.AsCStruct())
	}
}
func Timesync__Array_to_Go(goSlice []Timesync, cSlice []CTimesync) {
	for i := 0; i < len(cSlice); i++ {
		goSlice[i].AsGoStruct(unsafe.Pointer(&cSlice[i]))
	}
}
func Timesync__Array_to_C(cSlice []CTimesync, goSlice []Timesync) {
	for i := 0; i < len(goSlice); i++ {
		cSlice[i] = *(*C.px4_msgs__msg__Timesync)(goSlice[i].AsCStruct())
	}
}


