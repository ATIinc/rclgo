/*
This file is part of rclgo

Copyright Â© 2021 Technology Innovation Institute, United Arab Emirates

Licensed under the Apache License, Version 2.0 (the "License");
	http://www.apache.org/licenses/LICENSE-2.0
*/

/*
THIS FILE IS AUTOGENERATED BY 'rclgo-gen generate'
*/

package shape_msgs
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/ros2/ros2types"
	"github.com/tiiuae/rclgo/pkg/ros2/ros2_type_dispatcher"
	geometry_msgs "github.com/tiiuae/rclgo/pkg/ros2/msgs/geometry_msgs/msg"
	
)
/*
#cgo LDFLAGS: -L/opt/ros/foxy/lib -Wl,-rpath=/opt/ros/foxy/lib -lrcl -lrosidl_runtime_c -lrosidl_typesupport_c -lrcutils -lrmw_implementation
#cgo LDFLAGS: -lshape_msgs__rosidl_typesupport_c -lshape_msgs__rosidl_generator_c
#cgo LDFLAGS: -lgeometry_msgs__rosidl_typesupport_c -lgeometry_msgs__rosidl_generator_c

#cgo CFLAGS: -I/opt/ros/foxy/include

#include <rosidl_runtime_c/message_type_support_struct.h>
#include <shape_msgs/msg/mesh.h>
*/
import "C"

func init() {
	ros2_type_dispatcher.RegisterROS2MsgTypeNameAlias("shape_msgs/Mesh", &Mesh{})
}

// Do not create instances of this type directly. Always use NewMesh
// function instead.
type Mesh struct {
	Triangles []MeshTriangle `yaml:"triangles"`// List of triangles; the index values refer to positions in vertices[].
	Vertices []geometry_msgs.Point `yaml:"vertices"`// The actual vertices that make up the mesh.
}

// NewMesh creates a new Mesh with default values.
func NewMesh() *Mesh {
	self := Mesh{}
	self.SetDefaults(nil)
	return &self
}

func (t *Mesh) SetDefaults(d interface{}) ros2types.ROS2Msg {
	
	return t
}

func (t *Mesh) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__shape_msgs__msg__Mesh())
}
func (t *Mesh) PrepareMemory() unsafe.Pointer { //returns *C.shape_msgs__msg__Mesh
	return (unsafe.Pointer)(C.shape_msgs__msg__Mesh__create())
}
func (t *Mesh) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.shape_msgs__msg__Mesh__destroy((*C.shape_msgs__msg__Mesh)(pointer_to_free))
}
func (t *Mesh) AsCStruct() unsafe.Pointer {
	mem := (*C.shape_msgs__msg__Mesh)(t.PrepareMemory())
	MeshTriangle__Sequence_to_C(&mem.triangles, t.Triangles)
	geometry_msgs.Point__Sequence_to_C((*geometry_msgs.CPoint__Sequence)(unsafe.Pointer(&mem.vertices)), t.Vertices)
	return unsafe.Pointer(mem)
}
func (t *Mesh) AsGoStruct(ros2_message_buffer unsafe.Pointer) {
	mem := (*C.shape_msgs__msg__Mesh)(ros2_message_buffer)
	MeshTriangle__Sequence_to_Go(&t.Triangles, mem.triangles)
	geometry_msgs.Point__Sequence_to_Go(&t.Vertices, *(*geometry_msgs.CPoint__Sequence)(unsafe.Pointer(&mem.vertices)))
}
func (t *Mesh) Clone() ros2types.ROS2Msg {
	clone := *t
	return &clone
}

type CMesh = C.shape_msgs__msg__Mesh
type CMesh__Sequence = C.shape_msgs__msg__Mesh__Sequence

func Mesh__Sequence_to_Go(goSlice *[]Mesh, cSlice CMesh__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]Mesh, int64(cSlice.size))
	for i := 0; i < int(cSlice.size); i++ {
		cIdx := (*C.shape_msgs__msg__Mesh__Sequence)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_shape_msgs__msg__Mesh * uintptr(i)),
		))
		(*goSlice)[i] = Mesh{}
		(*goSlice)[i].AsGoStruct(unsafe.Pointer(cIdx))
	}
}
func Mesh__Sequence_to_C(cSlice *CMesh__Sequence, goSlice []Mesh) {
	if len(goSlice) == 0 {
		return
	}
	cSlice.data = (*C.shape_msgs__msg__Mesh)(C.malloc((C.size_t)(C.sizeof_struct_shape_msgs__msg__Mesh * uintptr(len(goSlice)))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity

	for i, v := range goSlice {
		cIdx := (*C.shape_msgs__msg__Mesh)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_shape_msgs__msg__Mesh * uintptr(i)),
		))
		*cIdx = *(*C.shape_msgs__msg__Mesh)(v.AsCStruct())
	}
}
func Mesh__Array_to_Go(goSlice []Mesh, cSlice []CMesh) {
	for i := 0; i < len(cSlice); i++ {
		goSlice[i].AsGoStruct(unsafe.Pointer(&cSlice[i]))
	}
}
func Mesh__Array_to_C(cSlice []CMesh, goSlice []Mesh) {
	for i := 0; i < len(goSlice); i++ {
		cSlice[i] = *(*C.shape_msgs__msg__Mesh)(goSlice[i].AsCStruct())
	}
}


