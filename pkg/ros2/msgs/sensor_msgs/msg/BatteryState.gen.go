/*
This file is part of rclgo

Copyright Â© 2021 Technology Innovation Institute, United Arab Emirates

Licensed under the Apache License, Version 2.0 (the "License");
	http://www.apache.org/licenses/LICENSE-2.0
*/

/*
THIS FILE IS AUTOGENERATED BY 'rclgo-gen generate'
*/

package sensor_msgs
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/ros2/ros2types"
	"github.com/tiiuae/rclgo/pkg/ros2/ros2_type_dispatcher"
	std_msgs "github.com/tiiuae/rclgo/pkg/ros2/msgs/std_msgs/msg"
	rosidl_runtime_c "github.com/tiiuae/rclgo/pkg/ros2/rosidl_runtime_c"
	
)
/*
#cgo LDFLAGS: -L/opt/ros/foxy/lib -Wl,-rpath=/opt/ros/foxy/lib -lrcl -lrosidl_runtime_c -lrosidl_typesupport_c -lrcutils -lrmw_implementation
#cgo LDFLAGS: -lsensor_msgs__rosidl_typesupport_c -lsensor_msgs__rosidl_generator_c
#cgo LDFLAGS: -lstd_msgs__rosidl_typesupport_c -lstd_msgs__rosidl_generator_c

#cgo CFLAGS: -I/opt/ros/foxy/include

#include <rosidl_runtime_c/message_type_support_struct.h>
#include <sensor_msgs/msg/battery_state.h>
*/
import "C"

func init() {
	ros2_type_dispatcher.RegisterROS2MsgTypeNameAlias("sensor_msgs/BatteryState", &BatteryState{})
}
const (
	BatteryState_POWER_SUPPLY_STATUS_UNKNOWN uint8 = 0// Power supply status constants
	BatteryState_POWER_SUPPLY_STATUS_CHARGING uint8 = 1// Power supply status constants
	BatteryState_POWER_SUPPLY_STATUS_DISCHARGING uint8 = 2// Power supply status constants
	BatteryState_POWER_SUPPLY_STATUS_NOT_CHARGING uint8 = 3// Power supply status constants
	BatteryState_POWER_SUPPLY_STATUS_FULL uint8 = 4// Power supply status constants
	BatteryState_POWER_SUPPLY_HEALTH_UNKNOWN uint8 = 0// Power supply health constants
	BatteryState_POWER_SUPPLY_HEALTH_GOOD uint8 = 1// Power supply health constants
	BatteryState_POWER_SUPPLY_HEALTH_OVERHEAT uint8 = 2// Power supply health constants
	BatteryState_POWER_SUPPLY_HEALTH_DEAD uint8 = 3// Power supply health constants
	BatteryState_POWER_SUPPLY_HEALTH_OVERVOLTAGE uint8 = 4// Power supply health constants
	BatteryState_POWER_SUPPLY_HEALTH_UNSPEC_FAILURE uint8 = 5// Power supply health constants
	BatteryState_POWER_SUPPLY_HEALTH_COLD uint8 = 6// Power supply health constants
	BatteryState_POWER_SUPPLY_HEALTH_WATCHDOG_TIMER_EXPIRE uint8 = 7// Power supply health constants
	BatteryState_POWER_SUPPLY_HEALTH_SAFETY_TIMER_EXPIRE uint8 = 8// Power supply health constants
	BatteryState_POWER_SUPPLY_TECHNOLOGY_UNKNOWN uint8 = 0// Power supply technology (chemistry) constants
	BatteryState_POWER_SUPPLY_TECHNOLOGY_NIMH uint8 = 1// Power supply technology (chemistry) constants
	BatteryState_POWER_SUPPLY_TECHNOLOGY_LION uint8 = 2// Power supply technology (chemistry) constants
	BatteryState_POWER_SUPPLY_TECHNOLOGY_LIPO uint8 = 3// Power supply technology (chemistry) constants
	BatteryState_POWER_SUPPLY_TECHNOLOGY_LIFE uint8 = 4// Power supply technology (chemistry) constants
	BatteryState_POWER_SUPPLY_TECHNOLOGY_NICD uint8 = 5// Power supply technology (chemistry) constants
	BatteryState_POWER_SUPPLY_TECHNOLOGY_LIMN uint8 = 6// Power supply technology (chemistry) constants
)

// Do not create instances of this type directly. Always use NewBatteryState
// function instead.
type BatteryState struct {
	Header std_msgs.Header `yaml:"header"`
	Voltage float32 `yaml:"voltage"`// Voltage in Volts (Mandatory)
	Temperature float32 `yaml:"temperature"`// Temperature in Degrees Celsius (If unmeasured NaN)
	Current float32 `yaml:"current"`// Negative when discharging (A)  (If unmeasured NaN)
	Charge float32 `yaml:"charge"`// Current charge in Ah  (If unmeasured NaN)
	Capacity float32 `yaml:"capacity"`// Capacity in Ah (last full capacity)  (If unmeasured NaN)
	DesignCapacity float32 `yaml:"design_capacity"`// Capacity in Ah (design capacity)  (If unmeasured NaN)
	Percentage float32 `yaml:"percentage"`// Charge percentage on 0 to 1 range  (If unmeasured NaN)
	PowerSupplyStatus uint8 `yaml:"power_supply_status"`// The charging status as reported. Values defined above
	PowerSupplyHealth uint8 `yaml:"power_supply_health"`// The battery health metric. Values defined above
	PowerSupplyTechnology uint8 `yaml:"power_supply_technology"`// The battery chemistry. Values defined above
	Present bool `yaml:"present"`// True if the battery is present
	CellVoltage []float32 `yaml:"cell_voltage"`// An array of individual cell voltages for each cell in the pack
	CellTemperature []float32 `yaml:"cell_temperature"`// An array of individual cell temperatures for each cell in the pack. If individual voltages unknown but number of cells known set each to NaN
	Location rosidl_runtime_c.String `yaml:"location"`// The location into which the battery is inserted. (slot number or plug). If individual voltages unknown but number of cells known set each to NaNIf individual temperatures unknown but number of cells known set each to NaN
	SerialNumber rosidl_runtime_c.String `yaml:"serial_number"`// The best approximation of the battery serial number. If individual voltages unknown but number of cells known set each to NaNIf individual temperatures unknown but number of cells known set each to NaN
}

// NewBatteryState creates a new BatteryState with default values.
func NewBatteryState() *BatteryState {
	self := BatteryState{}
	self.SetDefaults(nil)
	return &self
}

func (t *BatteryState) SetDefaults(d interface{}) ros2types.ROS2Msg {
	t.Header.SetDefaults(nil)
	t.Location.SetDefaults("")
	t.SerialNumber.SetDefaults("")
	
	return t
}

func (t *BatteryState) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__BatteryState())
}
func (t *BatteryState) PrepareMemory() unsafe.Pointer { //returns *C.sensor_msgs__msg__BatteryState
	return (unsafe.Pointer)(C.sensor_msgs__msg__BatteryState__create())
}
func (t *BatteryState) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.sensor_msgs__msg__BatteryState__destroy((*C.sensor_msgs__msg__BatteryState)(pointer_to_free))
}
func (t *BatteryState) AsCStruct() unsafe.Pointer {
	mem := (*C.sensor_msgs__msg__BatteryState)(t.PrepareMemory())
	mem.header = *(*C.std_msgs__msg__Header)(t.Header.AsCStruct())
	mem.voltage = C.float(t.Voltage)
	mem.temperature = C.float(t.Temperature)
	mem.current = C.float(t.Current)
	mem.charge = C.float(t.Charge)
	mem.capacity = C.float(t.Capacity)
	mem.design_capacity = C.float(t.DesignCapacity)
	mem.percentage = C.float(t.Percentage)
	mem.power_supply_status = C.uint8_t(t.PowerSupplyStatus)
	mem.power_supply_health = C.uint8_t(t.PowerSupplyHealth)
	mem.power_supply_technology = C.uint8_t(t.PowerSupplyTechnology)
	mem.present = C.bool(t.Present)
	rosidl_runtime_c.Float32__Sequence_to_C((*rosidl_runtime_c.CFloat32__Sequence)(unsafe.Pointer(&mem.cell_voltage)), t.CellVoltage)
	rosidl_runtime_c.Float32__Sequence_to_C((*rosidl_runtime_c.CFloat32__Sequence)(unsafe.Pointer(&mem.cell_temperature)), t.CellTemperature)
	mem.location = *(*C.rosidl_runtime_c__String)(t.Location.AsCStruct())
	mem.serial_number = *(*C.rosidl_runtime_c__String)(t.SerialNumber.AsCStruct())
	return unsafe.Pointer(mem)
}
func (t *BatteryState) AsGoStruct(ros2_message_buffer unsafe.Pointer) {
	mem := (*C.sensor_msgs__msg__BatteryState)(ros2_message_buffer)
	t.Header.AsGoStruct(unsafe.Pointer(&mem.header))
	t.Voltage = float32(mem.voltage)
	t.Temperature = float32(mem.temperature)
	t.Current = float32(mem.current)
	t.Charge = float32(mem.charge)
	t.Capacity = float32(mem.capacity)
	t.DesignCapacity = float32(mem.design_capacity)
	t.Percentage = float32(mem.percentage)
	t.PowerSupplyStatus = uint8(mem.power_supply_status)
	t.PowerSupplyHealth = uint8(mem.power_supply_health)
	t.PowerSupplyTechnology = uint8(mem.power_supply_technology)
	t.Present = bool(mem.present)
	rosidl_runtime_c.Float32__Sequence_to_Go(&t.CellVoltage, *(*rosidl_runtime_c.CFloat32__Sequence)(unsafe.Pointer(&mem.cell_voltage)))
	rosidl_runtime_c.Float32__Sequence_to_Go(&t.CellTemperature, *(*rosidl_runtime_c.CFloat32__Sequence)(unsafe.Pointer(&mem.cell_temperature)))
	t.Location.AsGoStruct(unsafe.Pointer(&mem.location))
	t.SerialNumber.AsGoStruct(unsafe.Pointer(&mem.serial_number))
}
func (t *BatteryState) Clone() ros2types.ROS2Msg {
	clone := *t
	return &clone
}

type CBatteryState = C.sensor_msgs__msg__BatteryState
type CBatteryState__Sequence = C.sensor_msgs__msg__BatteryState__Sequence

func BatteryState__Sequence_to_Go(goSlice *[]BatteryState, cSlice CBatteryState__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]BatteryState, int64(cSlice.size))
	for i := 0; i < int(cSlice.size); i++ {
		cIdx := (*C.sensor_msgs__msg__BatteryState__Sequence)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_sensor_msgs__msg__BatteryState * uintptr(i)),
		))
		(*goSlice)[i] = BatteryState{}
		(*goSlice)[i].AsGoStruct(unsafe.Pointer(cIdx))
	}
}
func BatteryState__Sequence_to_C(cSlice *CBatteryState__Sequence, goSlice []BatteryState) {
	if len(goSlice) == 0 {
		return
	}
	cSlice.data = (*C.sensor_msgs__msg__BatteryState)(C.malloc((C.size_t)(C.sizeof_struct_sensor_msgs__msg__BatteryState * uintptr(len(goSlice)))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity

	for i, v := range goSlice {
		cIdx := (*C.sensor_msgs__msg__BatteryState)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_sensor_msgs__msg__BatteryState * uintptr(i)),
		))
		*cIdx = *(*C.sensor_msgs__msg__BatteryState)(v.AsCStruct())
	}
}
func BatteryState__Array_to_Go(goSlice []BatteryState, cSlice []CBatteryState) {
	for i := 0; i < len(cSlice); i++ {
		goSlice[i].AsGoStruct(unsafe.Pointer(&cSlice[i]))
	}
}
func BatteryState__Array_to_C(cSlice []CBatteryState, goSlice []BatteryState) {
	for i := 0; i < len(goSlice); i++ {
		cSlice[i] = *(*C.sensor_msgs__msg__BatteryState)(goSlice[i].AsCStruct())
	}
}


