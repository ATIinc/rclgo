/*
This file is part of rclgo

Copyright Â© 2021 Technology Innovation Institute, United Arab Emirates

Licensed under the Apache License, Version 2.0 (the "License");
	http://www.apache.org/licenses/LICENSE-2.0
*/

/*
THIS FILE IS AUTOGENERATED BY 'rclgo-gen generate'
*/

package sensor_msgs
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/ros2/ros2types"
	"github.com/tiiuae/rclgo/pkg/ros2/ros2_type_dispatcher"
	std_msgs "github.com/tiiuae/rclgo/pkg/ros2/msgs/std_msgs/msg"
	rosidl_runtime_c "github.com/tiiuae/rclgo/pkg/ros2/rosidl_runtime_c"
	
)
/*
#cgo LDFLAGS: -L/opt/ros/foxy/lib -Wl,-rpath=/opt/ros/foxy/lib -lrcl -lrosidl_runtime_c -lrosidl_typesupport_c -lrcutils -lrmw_implementation
#cgo LDFLAGS: -lsensor_msgs__rosidl_typesupport_c -lsensor_msgs__rosidl_generator_c
#cgo LDFLAGS: -lstd_msgs__rosidl_typesupport_c -lstd_msgs__rosidl_generator_c

#cgo CFLAGS: -I/opt/ros/foxy/include

#include <rosidl_runtime_c/message_type_support_struct.h>
#include <sensor_msgs/msg/image.h>
*/
import "C"

func init() {
	ros2_type_dispatcher.RegisterROS2MsgTypeNameAlias("sensor_msgs/Image", &Image{})
}

// Do not create instances of this type directly. Always use NewImage
// function instead.
type Image struct {
	Header std_msgs.Header `yaml:"header"`// Header timestamp should be acquisition time of image
	Height uint32 `yaml:"height"`// image height, that is, number of rows
	Width uint32 `yaml:"width"`// image width, that is, number of columns
	Encoding rosidl_runtime_c.String `yaml:"encoding"`// Encoding of pixels -- channel meaning, ordering, size
	IsBigendian uint8 `yaml:"is_bigendian"`// is this data bigendian?
	Step uint32 `yaml:"step"`// Full row length in bytes
	Data []uint8 `yaml:"data"`// actual matrix data, size is (step * rows)
}

// NewImage creates a new Image with default values.
func NewImage() *Image {
	self := Image{}
	self.SetDefaults(nil)
	return &self
}

func (t *Image) SetDefaults(d interface{}) ros2types.ROS2Msg {
	t.Header.SetDefaults(nil)
	t.Encoding.SetDefaults("")
	
	return t
}

func (t *Image) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Image())
}
func (t *Image) PrepareMemory() unsafe.Pointer { //returns *C.sensor_msgs__msg__Image
	return (unsafe.Pointer)(C.sensor_msgs__msg__Image__create())
}
func (t *Image) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.sensor_msgs__msg__Image__destroy((*C.sensor_msgs__msg__Image)(pointer_to_free))
}
func (t *Image) AsCStruct() unsafe.Pointer {
	mem := (*C.sensor_msgs__msg__Image)(t.PrepareMemory())
	mem.header = *(*C.std_msgs__msg__Header)(t.Header.AsCStruct())
	mem.height = C.uint32_t(t.Height)
	mem.width = C.uint32_t(t.Width)
	mem.encoding = *(*C.rosidl_runtime_c__String)(t.Encoding.AsCStruct())
	mem.is_bigendian = C.uint8_t(t.IsBigendian)
	mem.step = C.uint32_t(t.Step)
	rosidl_runtime_c.Uint8__Sequence_to_C((*rosidl_runtime_c.CUint8__Sequence)(unsafe.Pointer(&mem.data)), t.Data)
	return unsafe.Pointer(mem)
}
func (t *Image) AsGoStruct(ros2_message_buffer unsafe.Pointer) {
	mem := (*C.sensor_msgs__msg__Image)(ros2_message_buffer)
	t.Header.AsGoStruct(unsafe.Pointer(&mem.header))
	t.Height = uint32(mem.height)
	t.Width = uint32(mem.width)
	t.Encoding.AsGoStruct(unsafe.Pointer(&mem.encoding))
	t.IsBigendian = uint8(mem.is_bigendian)
	t.Step = uint32(mem.step)
	rosidl_runtime_c.Uint8__Sequence_to_Go(&t.Data, *(*rosidl_runtime_c.CUint8__Sequence)(unsafe.Pointer(&mem.data)))
}
func (t *Image) Clone() ros2types.ROS2Msg {
	clone := *t
	return &clone
}

type CImage = C.sensor_msgs__msg__Image
type CImage__Sequence = C.sensor_msgs__msg__Image__Sequence

func Image__Sequence_to_Go(goSlice *[]Image, cSlice CImage__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]Image, int64(cSlice.size))
	for i := 0; i < int(cSlice.size); i++ {
		cIdx := (*C.sensor_msgs__msg__Image__Sequence)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_sensor_msgs__msg__Image * uintptr(i)),
		))
		(*goSlice)[i] = Image{}
		(*goSlice)[i].AsGoStruct(unsafe.Pointer(cIdx))
	}
}
func Image__Sequence_to_C(cSlice *CImage__Sequence, goSlice []Image) {
	if len(goSlice) == 0 {
		return
	}
	cSlice.data = (*C.sensor_msgs__msg__Image)(C.malloc((C.size_t)(C.sizeof_struct_sensor_msgs__msg__Image * uintptr(len(goSlice)))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity

	for i, v := range goSlice {
		cIdx := (*C.sensor_msgs__msg__Image)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_sensor_msgs__msg__Image * uintptr(i)),
		))
		*cIdx = *(*C.sensor_msgs__msg__Image)(v.AsCStruct())
	}
}
func Image__Array_to_Go(goSlice []Image, cSlice []CImage) {
	for i := 0; i < len(cSlice); i++ {
		goSlice[i].AsGoStruct(unsafe.Pointer(&cSlice[i]))
	}
}
func Image__Array_to_C(cSlice []CImage, goSlice []Image) {
	for i := 0; i < len(goSlice); i++ {
		cSlice[i] = *(*C.sensor_msgs__msg__Image)(goSlice[i].AsCStruct())
	}
}


