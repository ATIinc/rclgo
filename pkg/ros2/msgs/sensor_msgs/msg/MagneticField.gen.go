/*
This file is part of rclgo

Copyright Â© 2021 Technology Innovation Institute, United Arab Emirates

Licensed under the Apache License, Version 2.0 (the "License");
	http://www.apache.org/licenses/LICENSE-2.0
*/

/*
THIS FILE IS AUTOGENERATED BY 'rclgo-gen generate'
*/

package sensor_msgs_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/ros2/ros2types"
	"github.com/tiiuae/rclgo/pkg/ros2/ros2_type_dispatcher"
	geometry_msgs_msg "github.com/tiiuae/rclgo/pkg/ros2/msgs/geometry_msgs/msg"
	std_msgs_msg "github.com/tiiuae/rclgo/pkg/ros2/msgs/std_msgs/msg"
	rosidl_runtime_c "github.com/tiiuae/rclgo/pkg/ros2/rosidl_runtime_c"
	
)
/*
#cgo LDFLAGS: -L/opt/ros/foxy/lib -Wl,-rpath=/opt/ros/foxy/lib -lrcl -lrosidl_runtime_c -lrosidl_typesupport_c -lrcutils -lrmw_implementation
#cgo LDFLAGS: -lsensor_msgs__rosidl_typesupport_c -lsensor_msgs__rosidl_generator_c
#cgo LDFLAGS: -lgeometry_msgs__rosidl_typesupport_c -lgeometry_msgs__rosidl_generator_c
#cgo LDFLAGS: -lstd_msgs__rosidl_typesupport_c -lstd_msgs__rosidl_generator_c

#cgo CFLAGS: -I/opt/ros/foxy/include

#include <rosidl_runtime_c/message_type_support_struct.h>

#include <sensor_msgs/msg/magnetic_field.h>

*/
import "C"

func init() {
	ros2_type_dispatcher.RegisterROS2MsgTypeNameAlias("sensor_msgs/MagneticField", &MagneticField{})
}

// Do not create instances of this type directly. Always use NewMagneticField
// function instead.
type MagneticField struct {
	Header std_msgs_msg.Header `yaml:"header"`// timestamp is the time the
	MagneticField geometry_msgs_msg.Vector3 `yaml:"magnetic_field"`// x, y, and z components of the
	MagneticFieldCovariance [9]float64 `yaml:"magnetic_field_covariance"`// Row major about x, y, z axes
}

// NewMagneticField creates a new MagneticField with default values.
func NewMagneticField() *MagneticField {
	self := MagneticField{}
	self.SetDefaults(nil)
	return &self
}

func (t *MagneticField) SetDefaults(d interface{}) ros2types.ROS2Msg {
	t.Header.SetDefaults(nil)
	t.MagneticField.SetDefaults(nil)
	
	return t
}

func (t *MagneticField) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__MagneticField())
}
func (t *MagneticField) PrepareMemory() unsafe.Pointer { //returns *C.sensor_msgs__msg__MagneticField
	return (unsafe.Pointer)(C.sensor_msgs__msg__MagneticField__create())
}
func (t *MagneticField) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.sensor_msgs__msg__MagneticField__destroy((*C.sensor_msgs__msg__MagneticField)(pointer_to_free))
}
func (t *MagneticField) AsCStruct() unsafe.Pointer {
	mem := (*C.sensor_msgs__msg__MagneticField)(t.PrepareMemory())
	mem.header = *(*C.std_msgs__msg__Header)(t.Header.AsCStruct())
	mem.magnetic_field = *(*C.geometry_msgs__msg__Vector3)(t.MagneticField.AsCStruct())
	cSlice_magnetic_field_covariance := mem.magnetic_field_covariance[:]
	rosidl_runtime_c.Float64__Array_to_C(*(*[]rosidl_runtime_c.CFloat64)(unsafe.Pointer(&cSlice_magnetic_field_covariance)), t.MagneticFieldCovariance[:])
	return unsafe.Pointer(mem)
}
func (t *MagneticField) AsGoStruct(ros2_message_buffer unsafe.Pointer) {
	mem := (*C.sensor_msgs__msg__MagneticField)(ros2_message_buffer)
	t.Header.AsGoStruct(unsafe.Pointer(&mem.header))
	t.MagneticField.AsGoStruct(unsafe.Pointer(&mem.magnetic_field))
	cSlice_magnetic_field_covariance := mem.magnetic_field_covariance[:]
	rosidl_runtime_c.Float64__Array_to_Go(t.MagneticFieldCovariance[:], *(*[]rosidl_runtime_c.CFloat64)(unsafe.Pointer(&cSlice_magnetic_field_covariance)))
}
func (t *MagneticField) Clone() ros2types.ROS2Msg {
	clone := *t
	return &clone
}

type CMagneticField = C.sensor_msgs__msg__MagneticField
type CMagneticField__Sequence = C.sensor_msgs__msg__MagneticField__Sequence

func MagneticField__Sequence_to_Go(goSlice *[]MagneticField, cSlice CMagneticField__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]MagneticField, int64(cSlice.size))
	for i := 0; i < int(cSlice.size); i++ {
		cIdx := (*C.sensor_msgs__msg__MagneticField__Sequence)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_sensor_msgs__msg__MagneticField * uintptr(i)),
		))
		(*goSlice)[i] = MagneticField{}
		(*goSlice)[i].AsGoStruct(unsafe.Pointer(cIdx))
	}
}
func MagneticField__Sequence_to_C(cSlice *CMagneticField__Sequence, goSlice []MagneticField) {
	if len(goSlice) == 0 {
		return
	}
	cSlice.data = (*C.sensor_msgs__msg__MagneticField)(C.malloc((C.size_t)(C.sizeof_struct_sensor_msgs__msg__MagneticField * uintptr(len(goSlice)))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity

	for i, v := range goSlice {
		cIdx := (*C.sensor_msgs__msg__MagneticField)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_sensor_msgs__msg__MagneticField * uintptr(i)),
		))
		*cIdx = *(*C.sensor_msgs__msg__MagneticField)(v.AsCStruct())
	}
}
func MagneticField__Array_to_Go(goSlice []MagneticField, cSlice []CMagneticField) {
	for i := 0; i < len(cSlice); i++ {
		goSlice[i].AsGoStruct(unsafe.Pointer(&cSlice[i]))
	}
}
func MagneticField__Array_to_C(cSlice []CMagneticField, goSlice []MagneticField) {
	for i := 0; i < len(goSlice); i++ {
		cSlice[i] = *(*C.sensor_msgs__msg__MagneticField)(goSlice[i].AsCStruct())
	}
}


