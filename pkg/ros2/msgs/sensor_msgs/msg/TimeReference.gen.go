/*
This file is part of rclgo

Copyright Â© 2021 Technology Innovation Institute, United Arab Emirates

Licensed under the Apache License, Version 2.0 (the "License");
	http://www.apache.org/licenses/LICENSE-2.0
*/

/*
THIS FILE IS AUTOGENERATED BY 'rclgo-gen generate'
*/

package sensor_msgs
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/ros2/ros2types"
	"github.com/tiiuae/rclgo/pkg/ros2/ros2_type_dispatcher"
	builtin_interfaces "github.com/tiiuae/rclgo/pkg/ros2/msgs/builtin_interfaces/msg"
	std_msgs "github.com/tiiuae/rclgo/pkg/ros2/msgs/std_msgs/msg"
	rosidl_runtime_c "github.com/tiiuae/rclgo/pkg/ros2/rosidl_runtime_c"
	
)
/*
#cgo LDFLAGS: -L/opt/ros/foxy/lib -Wl,-rpath=/opt/ros/foxy/lib -lrcl -lrosidl_runtime_c -lrosidl_typesupport_c -lrcutils -lrmw_implementation
#cgo LDFLAGS: -lsensor_msgs__rosidl_typesupport_c -lsensor_msgs__rosidl_generator_c
#cgo LDFLAGS: -lbuiltin_interfaces__rosidl_typesupport_c -lbuiltin_interfaces__rosidl_generator_c
#cgo LDFLAGS: -lstd_msgs__rosidl_typesupport_c -lstd_msgs__rosidl_generator_c

#cgo CFLAGS: -I/opt/ros/foxy/include

#include <rosidl_runtime_c/message_type_support_struct.h>
#include <sensor_msgs/msg/time_reference.h>
*/
import "C"

func init() {
	ros2_type_dispatcher.RegisterROS2MsgTypeNameAlias("sensor_msgs/TimeReference", &TimeReference{})
}

// Do not create instances of this type directly. Always use NewTimeReference
// function instead.
type TimeReference struct {
	Header std_msgs.Header `yaml:"header"`// stamp is system time for which measurement was valid
	TimeRef builtin_interfaces.Time `yaml:"time_ref"`// corresponding time from this external source
	Source rosidl_runtime_c.String `yaml:"source"`// (optional) name of time source
}

// NewTimeReference creates a new TimeReference with default values.
func NewTimeReference() *TimeReference {
	self := TimeReference{}
	self.SetDefaults(nil)
	return &self
}

func (t *TimeReference) SetDefaults(d interface{}) ros2types.ROS2Msg {
	t.Header.SetDefaults(nil)
	t.TimeRef.SetDefaults(nil)
	t.Source.SetDefaults("")
	
	return t
}

func (t *TimeReference) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__TimeReference())
}
func (t *TimeReference) PrepareMemory() unsafe.Pointer { //returns *C.sensor_msgs__msg__TimeReference
	return (unsafe.Pointer)(C.sensor_msgs__msg__TimeReference__create())
}
func (t *TimeReference) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.sensor_msgs__msg__TimeReference__destroy((*C.sensor_msgs__msg__TimeReference)(pointer_to_free))
}
func (t *TimeReference) AsCStruct() unsafe.Pointer {
	mem := (*C.sensor_msgs__msg__TimeReference)(t.PrepareMemory())
	mem.header = *(*C.std_msgs__msg__Header)(t.Header.AsCStruct())
	mem.time_ref = *(*C.builtin_interfaces__msg__Time)(t.TimeRef.AsCStruct())
	mem.source = *(*C.rosidl_runtime_c__String)(t.Source.AsCStruct())
	return unsafe.Pointer(mem)
}
func (t *TimeReference) AsGoStruct(ros2_message_buffer unsafe.Pointer) {
	mem := (*C.sensor_msgs__msg__TimeReference)(ros2_message_buffer)
	t.Header.AsGoStruct(unsafe.Pointer(&mem.header))
	t.TimeRef.AsGoStruct(unsafe.Pointer(&mem.time_ref))
	t.Source.AsGoStruct(unsafe.Pointer(&mem.source))
}
func (t *TimeReference) Clone() ros2types.ROS2Msg {
	clone := *t
	return &clone
}

type CTimeReference = C.sensor_msgs__msg__TimeReference
type CTimeReference__Sequence = C.sensor_msgs__msg__TimeReference__Sequence

func TimeReference__Sequence_to_Go(goSlice *[]TimeReference, cSlice CTimeReference__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]TimeReference, int64(cSlice.size))
	for i := 0; i < int(cSlice.size); i++ {
		cIdx := (*C.sensor_msgs__msg__TimeReference__Sequence)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_sensor_msgs__msg__TimeReference * uintptr(i)),
		))
		(*goSlice)[i] = TimeReference{}
		(*goSlice)[i].AsGoStruct(unsafe.Pointer(cIdx))
	}
}
func TimeReference__Sequence_to_C(cSlice *CTimeReference__Sequence, goSlice []TimeReference) {
	if len(goSlice) == 0 {
		return
	}
	cSlice.data = (*C.sensor_msgs__msg__TimeReference)(C.malloc((C.size_t)(C.sizeof_struct_sensor_msgs__msg__TimeReference * uintptr(len(goSlice)))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity

	for i, v := range goSlice {
		cIdx := (*C.sensor_msgs__msg__TimeReference)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_sensor_msgs__msg__TimeReference * uintptr(i)),
		))
		*cIdx = *(*C.sensor_msgs__msg__TimeReference)(v.AsCStruct())
	}
}
func TimeReference__Array_to_Go(goSlice []TimeReference, cSlice []CTimeReference) {
	for i := 0; i < len(cSlice); i++ {
		goSlice[i].AsGoStruct(unsafe.Pointer(&cSlice[i]))
	}
}
func TimeReference__Array_to_C(cSlice []CTimeReference, goSlice []TimeReference) {
	for i := 0; i < len(goSlice); i++ {
		cSlice[i] = *(*C.sensor_msgs__msg__TimeReference)(goSlice[i].AsCStruct())
	}
}


