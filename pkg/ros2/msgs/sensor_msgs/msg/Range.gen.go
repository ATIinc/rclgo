/*
This file is part of rclgo

Copyright Â© 2021 Technology Innovation Institute, United Arab Emirates

Licensed under the Apache License, Version 2.0 (the "License");
	http://www.apache.org/licenses/LICENSE-2.0
*/

/*
THIS FILE IS AUTOGENERATED BY 'rclgo-gen generate'
*/

package sensor_msgs
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/ros2/ros2types"
	"github.com/tiiuae/rclgo/pkg/ros2/ros2_type_dispatcher"
	std_msgs "github.com/tiiuae/rclgo/pkg/ros2/msgs/std_msgs/msg"
	
)
/*
#cgo LDFLAGS: -L/opt/ros/foxy/lib -Wl,-rpath=/opt/ros/foxy/lib -lrcl -lrosidl_runtime_c -lrosidl_typesupport_c -lrcutils -lrmw_implementation
#cgo LDFLAGS: -lsensor_msgs__rosidl_typesupport_c -lsensor_msgs__rosidl_generator_c
#cgo LDFLAGS: -lstd_msgs__rosidl_typesupport_c -lstd_msgs__rosidl_generator_c

#cgo CFLAGS: -I/opt/ros/foxy/include

#include <rosidl_runtime_c/message_type_support_struct.h>
#include <sensor_msgs/msg/range.h>
*/
import "C"

func init() {
	ros2_type_dispatcher.RegisterROS2MsgTypeNameAlias("sensor_msgs/Range", &Range{})
}
const (
	Range_ULTRASOUND uint8 = 0// Radiation type enumsIf you want a value added to this list, send an email to the ros-users list
	Range_INFRARED uint8 = 1// Radiation type enumsIf you want a value added to this list, send an email to the ros-users list
)

// Do not create instances of this type directly. Always use NewRange
// function instead.
type Range struct {
	Header std_msgs.Header `yaml:"header"`// timestamp in the header is the time the ranger
	RadiationType uint8 `yaml:"radiation_type"`// the type of radiation used by the sensor
	FieldOfView float32 `yaml:"field_of_view"`// the size of the arc that the distance reading is
	MinRange float32 `yaml:"min_range"`// minimum range value [m]
	MaxRange float32 `yaml:"max_range"`// maximum range value [m]
	Range float32 `yaml:"range"`// range data [m]
}

// NewRange creates a new Range with default values.
func NewRange() *Range {
	self := Range{}
	self.SetDefaults(nil)
	return &self
}

func (t *Range) SetDefaults(d interface{}) ros2types.ROS2Msg {
	t.Header.SetDefaults(nil)
	
	return t
}

func (t *Range) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Range())
}
func (t *Range) PrepareMemory() unsafe.Pointer { //returns *C.sensor_msgs__msg__Range
	return (unsafe.Pointer)(C.sensor_msgs__msg__Range__create())
}
func (t *Range) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.sensor_msgs__msg__Range__destroy((*C.sensor_msgs__msg__Range)(pointer_to_free))
}
func (t *Range) AsCStruct() unsafe.Pointer {
	mem := (*C.sensor_msgs__msg__Range)(t.PrepareMemory())
	mem.header = *(*C.std_msgs__msg__Header)(t.Header.AsCStruct())
	mem.radiation_type = C.uint8_t(t.RadiationType)
	mem.field_of_view = C.float(t.FieldOfView)
	mem.min_range = C.float(t.MinRange)
	mem.max_range = C.float(t.MaxRange)
	mem._range = C.float(t.Range)
	return unsafe.Pointer(mem)
}
func (t *Range) AsGoStruct(ros2_message_buffer unsafe.Pointer) {
	mem := (*C.sensor_msgs__msg__Range)(ros2_message_buffer)
	t.Header.AsGoStruct(unsafe.Pointer(&mem.header))
	t.RadiationType = uint8(mem.radiation_type)
	t.FieldOfView = float32(mem.field_of_view)
	t.MinRange = float32(mem.min_range)
	t.MaxRange = float32(mem.max_range)
	t.Range = float32(mem._range)
}
func (t *Range) Clone() ros2types.ROS2Msg {
	clone := *t
	return &clone
}

type CRange = C.sensor_msgs__msg__Range
type CRange__Sequence = C.sensor_msgs__msg__Range__Sequence

func Range__Sequence_to_Go(goSlice *[]Range, cSlice CRange__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]Range, int64(cSlice.size))
	for i := 0; i < int(cSlice.size); i++ {
		cIdx := (*C.sensor_msgs__msg__Range__Sequence)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_sensor_msgs__msg__Range * uintptr(i)),
		))
		(*goSlice)[i] = Range{}
		(*goSlice)[i].AsGoStruct(unsafe.Pointer(cIdx))
	}
}
func Range__Sequence_to_C(cSlice *CRange__Sequence, goSlice []Range) {
	if len(goSlice) == 0 {
		return
	}
	cSlice.data = (*C.sensor_msgs__msg__Range)(C.malloc((C.size_t)(C.sizeof_struct_sensor_msgs__msg__Range * uintptr(len(goSlice)))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity

	for i, v := range goSlice {
		cIdx := (*C.sensor_msgs__msg__Range)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_sensor_msgs__msg__Range * uintptr(i)),
		))
		*cIdx = *(*C.sensor_msgs__msg__Range)(v.AsCStruct())
	}
}
func Range__Array_to_Go(goSlice []Range, cSlice []CRange) {
	for i := 0; i < len(cSlice); i++ {
		goSlice[i].AsGoStruct(unsafe.Pointer(&cSlice[i]))
	}
}
func Range__Array_to_C(cSlice []CRange, goSlice []Range) {
	for i := 0; i < len(goSlice); i++ {
		cSlice[i] = *(*C.sensor_msgs__msg__Range)(goSlice[i].AsCStruct())
	}
}


