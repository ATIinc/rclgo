/*
This file is part of rclgo

Copyright Â© 2021 Technology Innovation Institute, United Arab Emirates

Licensed under the Apache License, Version 2.0 (the "License");
	http://www.apache.org/licenses/LICENSE-2.0
*/

/*
THIS FILE IS AUTOGENERATED BY 'rclgo-gen generate'
*/

package sensor_msgs
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/ros2/ros2types"
	"github.com/tiiuae/rclgo/pkg/ros2/ros2_type_dispatcher"
	std_msgs "github.com/tiiuae/rclgo/pkg/ros2/msgs/std_msgs/msg"
	rosidl_runtime_c "github.com/tiiuae/rclgo/pkg/ros2/rosidl_runtime_c"
	
)
/*
#cgo LDFLAGS: -L/opt/ros/foxy/lib -Wl,-rpath=/opt/ros/foxy/lib -lrcl -lrosidl_runtime_c -lrosidl_typesupport_c -lrcutils -lrmw_implementation
#cgo LDFLAGS: -lsensor_msgs__rosidl_typesupport_c -lsensor_msgs__rosidl_generator_c
#cgo LDFLAGS: -lstd_msgs__rosidl_typesupport_c -lstd_msgs__rosidl_generator_c

#cgo CFLAGS: -I/opt/ros/foxy/include

#include <rosidl_runtime_c/message_type_support_struct.h>
#include <sensor_msgs/msg/camera_info.h>
*/
import "C"

func init() {
	ros2_type_dispatcher.RegisterROS2MsgTypeNameAlias("sensor_msgs/CameraInfo", &CameraInfo{})
}

// Do not create instances of this type directly. Always use NewCameraInfo
// function instead.
type CameraInfo struct {
	Header std_msgs.Header `yaml:"header"`// Header timestamp should be acquisition time of image. Time of image acquisition, camera coordinate frame ID
	Height uint32 `yaml:"height"`// The image dimensions with which the camera was calibrated.Normally this will be the full camera resolution in pixels.
	Width uint32 `yaml:"width"`// The image dimensions with which the camera was calibrated.Normally this will be the full camera resolution in pixels.
	DistortionModel rosidl_runtime_c.String `yaml:"distortion_model"`// The distortion model used. Supported models are listed insensor_msgs/distortion_models.hpp. For most cameras, "plumb_bob" - asimple model of radial and tangential distortion - is sufficent.
	D []float64 `yaml:"d"`// The distortion parameters, size depending on the distortion model.For "plumb_bob", the 5 parameters are: (k1, k2, t1, t2, k3).
	K [9]float64 `yaml:"k"`// 3x3 row-major matrix. Intrinsic camera matrix for the raw (distorted) images.[fx  0 cx]K = [ 0 fy cy][ 0  0  1]Projects 3D points in the camera coordinate frame to 2D pixelcoordinates using the focal lengths (fx, fy) and principal point(cx, cy).
	R [9]float64 `yaml:"r"`// 3x3 row-major matrix. Rectification matrix (stereo cameras only)A rotation matrix aligning the camera coordinate system to the idealstereo image plane so that epipolar lines in both stereo images areparallel.
	P [12]float64 `yaml:"p"`// 3x4 row-major matrix. Projection/camera matrix[fx'  0  cx' Tx]P = [ 0  fy' cy' Ty][ 0   0   1   0]By convention, this matrix specifies the intrinsic (camera) matrixof the processed (rectified) image. That is, the left 3x3 portionis the normal camera intrinsic matrix for the rectified image.It projects 3D points in the camera coordinate frame to 2D pixelcoordinates using the focal lengths (fx', fy') and principal point(cx', cy') - these may differ from the values in K.For monocular cameras, Tx = Ty = 0. Normally, monocular cameras willalso have R = the identity and P[1:3,1:3] = K.For a stereo pair, the fourth column [Tx Ty 0]' is related to theposition of the optical center of the second camera in the firstcamera's frame. We assume Tz = 0 so both cameras are in the samestereo image plane. The first camera always has Tx = Ty = 0. Forthe right (second) camera of a horizontal stereo pair, Ty = 0 andTx = -fx' * B, where B is the baseline between the cameras.Given a 3D point [X Y Z]', the projection (x, y) of the point ontothe rectified image is given by:[u v w]' = P * [X Y Z 1]'x = u / wy = v / wThis holds for both images of a stereo pair.
	BinningX uint32 `yaml:"binning_x"`// Binning refers here to any camera setting which combines rectangularneighborhoods of pixels into larger "super-pixels." It reduces theresolution of the output image to(width / binning_x) x (height / binning_y).The default values binning_x = binning_y = 0 is considered the sameas binning_x = binning_y = 1 (no subsampling).
	BinningY uint32 `yaml:"binning_y"`// Binning refers here to any camera setting which combines rectangularneighborhoods of pixels into larger "super-pixels." It reduces theresolution of the output image to(width / binning_x) x (height / binning_y).The default values binning_x = binning_y = 0 is considered the sameas binning_x = binning_y = 1 (no subsampling).
	Roi RegionOfInterest `yaml:"roi"`// Region of interest (subwindow of full camera resolution), given infull resolution (unbinned) image coordinates. A particular ROIalways denotes the same window of pixels on the camera sensor,regardless of binning settings.The default setting of roi (all values 0) is considered the same asfull resolution (roi.width = width, roi.height = height).
}

// NewCameraInfo creates a new CameraInfo with default values.
func NewCameraInfo() *CameraInfo {
	self := CameraInfo{}
	self.SetDefaults(nil)
	return &self
}

func (t *CameraInfo) SetDefaults(d interface{}) ros2types.ROS2Msg {
	t.Header.SetDefaults(nil)
	t.DistortionModel.SetDefaults("")
	t.Roi.SetDefaults(nil)
	
	return t
}

func (t *CameraInfo) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__CameraInfo())
}
func (t *CameraInfo) PrepareMemory() unsafe.Pointer { //returns *C.sensor_msgs__msg__CameraInfo
	return (unsafe.Pointer)(C.sensor_msgs__msg__CameraInfo__create())
}
func (t *CameraInfo) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.sensor_msgs__msg__CameraInfo__destroy((*C.sensor_msgs__msg__CameraInfo)(pointer_to_free))
}
func (t *CameraInfo) AsCStruct() unsafe.Pointer {
	mem := (*C.sensor_msgs__msg__CameraInfo)(t.PrepareMemory())
	mem.header = *(*C.std_msgs__msg__Header)(t.Header.AsCStruct())
	mem.height = C.uint32_t(t.Height)
	mem.width = C.uint32_t(t.Width)
	mem.distortion_model = *(*C.rosidl_runtime_c__String)(t.DistortionModel.AsCStruct())
	rosidl_runtime_c.Float64__Sequence_to_C((*rosidl_runtime_c.CFloat64__Sequence)(unsafe.Pointer(&mem.d)), t.D)
	cSlice_k := mem.k[:]
	rosidl_runtime_c.Float64__Array_to_C(*(*[]rosidl_runtime_c.CFloat64)(unsafe.Pointer(&cSlice_k)), t.K[:])
	cSlice_r := mem.r[:]
	rosidl_runtime_c.Float64__Array_to_C(*(*[]rosidl_runtime_c.CFloat64)(unsafe.Pointer(&cSlice_r)), t.R[:])
	cSlice_p := mem.p[:]
	rosidl_runtime_c.Float64__Array_to_C(*(*[]rosidl_runtime_c.CFloat64)(unsafe.Pointer(&cSlice_p)), t.P[:])
	mem.binning_x = C.uint32_t(t.BinningX)
	mem.binning_y = C.uint32_t(t.BinningY)
	mem.roi = *(*C.sensor_msgs__msg__RegionOfInterest)(t.Roi.AsCStruct())
	return unsafe.Pointer(mem)
}
func (t *CameraInfo) AsGoStruct(ros2_message_buffer unsafe.Pointer) {
	mem := (*C.sensor_msgs__msg__CameraInfo)(ros2_message_buffer)
	t.Header.AsGoStruct(unsafe.Pointer(&mem.header))
	t.Height = uint32(mem.height)
	t.Width = uint32(mem.width)
	t.DistortionModel.AsGoStruct(unsafe.Pointer(&mem.distortion_model))
	rosidl_runtime_c.Float64__Sequence_to_Go(&t.D, *(*rosidl_runtime_c.CFloat64__Sequence)(unsafe.Pointer(&mem.d)))
	cSlice_k := mem.k[:]
	rosidl_runtime_c.Float64__Array_to_Go(t.K[:], *(*[]rosidl_runtime_c.CFloat64)(unsafe.Pointer(&cSlice_k)))
	cSlice_r := mem.r[:]
	rosidl_runtime_c.Float64__Array_to_Go(t.R[:], *(*[]rosidl_runtime_c.CFloat64)(unsafe.Pointer(&cSlice_r)))
	cSlice_p := mem.p[:]
	rosidl_runtime_c.Float64__Array_to_Go(t.P[:], *(*[]rosidl_runtime_c.CFloat64)(unsafe.Pointer(&cSlice_p)))
	t.BinningX = uint32(mem.binning_x)
	t.BinningY = uint32(mem.binning_y)
	t.Roi.AsGoStruct(unsafe.Pointer(&mem.roi))
}
func (t *CameraInfo) Clone() ros2types.ROS2Msg {
	clone := *t
	return &clone
}

type CCameraInfo = C.sensor_msgs__msg__CameraInfo
type CCameraInfo__Sequence = C.sensor_msgs__msg__CameraInfo__Sequence

func CameraInfo__Sequence_to_Go(goSlice *[]CameraInfo, cSlice CCameraInfo__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]CameraInfo, int64(cSlice.size))
	for i := 0; i < int(cSlice.size); i++ {
		cIdx := (*C.sensor_msgs__msg__CameraInfo__Sequence)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_sensor_msgs__msg__CameraInfo * uintptr(i)),
		))
		(*goSlice)[i] = CameraInfo{}
		(*goSlice)[i].AsGoStruct(unsafe.Pointer(cIdx))
	}
}
func CameraInfo__Sequence_to_C(cSlice *CCameraInfo__Sequence, goSlice []CameraInfo) {
	if len(goSlice) == 0 {
		return
	}
	cSlice.data = (*C.sensor_msgs__msg__CameraInfo)(C.malloc((C.size_t)(C.sizeof_struct_sensor_msgs__msg__CameraInfo * uintptr(len(goSlice)))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity

	for i, v := range goSlice {
		cIdx := (*C.sensor_msgs__msg__CameraInfo)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_sensor_msgs__msg__CameraInfo * uintptr(i)),
		))
		*cIdx = *(*C.sensor_msgs__msg__CameraInfo)(v.AsCStruct())
	}
}
func CameraInfo__Array_to_Go(goSlice []CameraInfo, cSlice []CCameraInfo) {
	for i := 0; i < len(cSlice); i++ {
		goSlice[i].AsGoStruct(unsafe.Pointer(&cSlice[i]))
	}
}
func CameraInfo__Array_to_C(cSlice []CCameraInfo, goSlice []CameraInfo) {
	for i := 0; i < len(goSlice); i++ {
		cSlice[i] = *(*C.sensor_msgs__msg__CameraInfo)(goSlice[i].AsCStruct())
	}
}


