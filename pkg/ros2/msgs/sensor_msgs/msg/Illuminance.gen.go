/*
This file is part of rclgo

Copyright Â© 2021 Technology Innovation Institute, United Arab Emirates

Licensed under the Apache License, Version 2.0 (the "License");
	http://www.apache.org/licenses/LICENSE-2.0
*/

/*
THIS FILE IS AUTOGENERATED BY 'rclgo-gen generate'
*/

package sensor_msgs_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/ros2/ros2types"
	"github.com/tiiuae/rclgo/pkg/ros2/ros2_type_dispatcher"
	std_msgs_msg "github.com/tiiuae/rclgo/pkg/ros2/msgs/std_msgs/msg"
	
)
/*
#cgo LDFLAGS: -L/opt/ros/foxy/lib -Wl,-rpath=/opt/ros/foxy/lib -lrcl -lrosidl_runtime_c -lrosidl_typesupport_c -lrcutils -lrmw_implementation
#cgo LDFLAGS: -lsensor_msgs__rosidl_typesupport_c -lsensor_msgs__rosidl_generator_c
#cgo LDFLAGS: -lstd_msgs__rosidl_typesupport_c -lstd_msgs__rosidl_generator_c

#cgo CFLAGS: -I/opt/ros/foxy/include

#include <rosidl_runtime_c/message_type_support_struct.h>

#include <sensor_msgs/msg/illuminance.h>

*/
import "C"

func init() {
	ros2_type_dispatcher.RegisterROS2MsgTypeNameAlias("sensor_msgs/Illuminance", &Illuminance{})
}

// Do not create instances of this type directly. Always use NewIlluminance
// function instead.
type Illuminance struct {
	Header std_msgs_msg.Header `yaml:"header"`// timestamp is the time the illuminance was measured
	Illuminance float64 `yaml:"illuminance"`// Measurement of the Photometric Illuminance in Lux.
	Variance float64 `yaml:"variance"`// 0 is interpreted as variance unknown
}

// NewIlluminance creates a new Illuminance with default values.
func NewIlluminance() *Illuminance {
	self := Illuminance{}
	self.SetDefaults(nil)
	return &self
}

func (t *Illuminance) SetDefaults(d interface{}) ros2types.ROS2Msg {
	t.Header.SetDefaults(nil)
	
	return t
}

func (t *Illuminance) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Illuminance())
}
func (t *Illuminance) PrepareMemory() unsafe.Pointer { //returns *C.sensor_msgs__msg__Illuminance
	return (unsafe.Pointer)(C.sensor_msgs__msg__Illuminance__create())
}
func (t *Illuminance) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.sensor_msgs__msg__Illuminance__destroy((*C.sensor_msgs__msg__Illuminance)(pointer_to_free))
}
func (t *Illuminance) AsCStruct() unsafe.Pointer {
	mem := (*C.sensor_msgs__msg__Illuminance)(t.PrepareMemory())
	mem.header = *(*C.std_msgs__msg__Header)(t.Header.AsCStruct())
	mem.illuminance = C.double(t.Illuminance)
	mem.variance = C.double(t.Variance)
	return unsafe.Pointer(mem)
}
func (t *Illuminance) AsGoStruct(ros2_message_buffer unsafe.Pointer) {
	mem := (*C.sensor_msgs__msg__Illuminance)(ros2_message_buffer)
	t.Header.AsGoStruct(unsafe.Pointer(&mem.header))
	t.Illuminance = float64(mem.illuminance)
	t.Variance = float64(mem.variance)
}
func (t *Illuminance) Clone() ros2types.ROS2Msg {
	clone := *t
	return &clone
}

type CIlluminance = C.sensor_msgs__msg__Illuminance
type CIlluminance__Sequence = C.sensor_msgs__msg__Illuminance__Sequence

func Illuminance__Sequence_to_Go(goSlice *[]Illuminance, cSlice CIlluminance__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]Illuminance, int64(cSlice.size))
	for i := 0; i < int(cSlice.size); i++ {
		cIdx := (*C.sensor_msgs__msg__Illuminance__Sequence)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_sensor_msgs__msg__Illuminance * uintptr(i)),
		))
		(*goSlice)[i] = Illuminance{}
		(*goSlice)[i].AsGoStruct(unsafe.Pointer(cIdx))
	}
}
func Illuminance__Sequence_to_C(cSlice *CIlluminance__Sequence, goSlice []Illuminance) {
	if len(goSlice) == 0 {
		return
	}
	cSlice.data = (*C.sensor_msgs__msg__Illuminance)(C.malloc((C.size_t)(C.sizeof_struct_sensor_msgs__msg__Illuminance * uintptr(len(goSlice)))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity

	for i, v := range goSlice {
		cIdx := (*C.sensor_msgs__msg__Illuminance)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_sensor_msgs__msg__Illuminance * uintptr(i)),
		))
		*cIdx = *(*C.sensor_msgs__msg__Illuminance)(v.AsCStruct())
	}
}
func Illuminance__Array_to_Go(goSlice []Illuminance, cSlice []CIlluminance) {
	for i := 0; i < len(cSlice); i++ {
		goSlice[i].AsGoStruct(unsafe.Pointer(&cSlice[i]))
	}
}
func Illuminance__Array_to_C(cSlice []CIlluminance, goSlice []Illuminance) {
	for i := 0; i < len(goSlice); i++ {
		cSlice[i] = *(*C.sensor_msgs__msg__Illuminance)(goSlice[i].AsCStruct())
	}
}


