/*
This file is part of rclgo

Copyright Â© 2021 Technology Innovation Institute, United Arab Emirates

Licensed under the Apache License, Version 2.0 (the "License");
	http://www.apache.org/licenses/LICENSE-2.0
*/

/*
THIS FILE IS AUTOGENERATED BY 'rclgo-gen generate'
*/

package sensor_msgs
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/ros2/ros2types"
	"github.com/tiiuae/rclgo/pkg/ros2/ros2_type_dispatcher"
	rosidl_runtime_c "github.com/tiiuae/rclgo/pkg/ros2/rosidl_runtime_c"
	
)
/*
#cgo LDFLAGS: -L/opt/ros/foxy/lib -Wl,-rpath=/opt/ros/foxy/lib -lrcl -lrosidl_runtime_c -lrosidl_typesupport_c -lrcutils -lrmw_implementation
#cgo LDFLAGS: -lsensor_msgs__rosidl_typesupport_c -lsensor_msgs__rosidl_generator_c

#cgo CFLAGS: -I/opt/ros/foxy/include

#include <rosidl_runtime_c/message_type_support_struct.h>
#include <sensor_msgs/msg/point_field.h>
*/
import "C"

func init() {
	ros2_type_dispatcher.RegisterROS2MsgTypeNameAlias("sensor_msgs/PointField", &PointField{})
}
const (
	PointField_INT8 uint8 = 1// This message holds the description of one point entry in thePointCloud2 message format.
	PointField_UINT8 uint8 = 2// This message holds the description of one point entry in thePointCloud2 message format.
	PointField_INT16 uint8 = 3// This message holds the description of one point entry in thePointCloud2 message format.
	PointField_UINT16 uint8 = 4// This message holds the description of one point entry in thePointCloud2 message format.
	PointField_INT32 uint8 = 5// This message holds the description of one point entry in thePointCloud2 message format.
	PointField_UINT32 uint8 = 6// This message holds the description of one point entry in thePointCloud2 message format.
	PointField_FLOAT32 uint8 = 7// This message holds the description of one point entry in thePointCloud2 message format.
	PointField_FLOAT64 uint8 = 8// This message holds the description of one point entry in thePointCloud2 message format.
)

// Do not create instances of this type directly. Always use NewPointField
// function instead.
type PointField struct {
	Name rosidl_runtime_c.String `yaml:"name"`// Name of field. Common PointField names are x, y, z, intensity, rgb, rgba
	Offset uint32 `yaml:"offset"`// Offset from start of point struct. Common PointField names are x, y, z, intensity, rgb, rgba
	Datatype uint8 `yaml:"datatype"`// Datatype enumeration, see above. Common PointField names are x, y, z, intensity, rgb, rgba
	Count uint32 `yaml:"count"`// How many elements in the field. Common PointField names are x, y, z, intensity, rgb, rgba
}

// NewPointField creates a new PointField with default values.
func NewPointField() *PointField {
	self := PointField{}
	self.SetDefaults(nil)
	return &self
}

func (t *PointField) SetDefaults(d interface{}) ros2types.ROS2Msg {
	t.Name.SetDefaults("")
	
	return t
}

func (t *PointField) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__PointField())
}
func (t *PointField) PrepareMemory() unsafe.Pointer { //returns *C.sensor_msgs__msg__PointField
	return (unsafe.Pointer)(C.sensor_msgs__msg__PointField__create())
}
func (t *PointField) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.sensor_msgs__msg__PointField__destroy((*C.sensor_msgs__msg__PointField)(pointer_to_free))
}
func (t *PointField) AsCStruct() unsafe.Pointer {
	mem := (*C.sensor_msgs__msg__PointField)(t.PrepareMemory())
	mem.name = *(*C.rosidl_runtime_c__String)(t.Name.AsCStruct())
	mem.offset = C.uint32_t(t.Offset)
	mem.datatype = C.uint8_t(t.Datatype)
	mem.count = C.uint32_t(t.Count)
	return unsafe.Pointer(mem)
}
func (t *PointField) AsGoStruct(ros2_message_buffer unsafe.Pointer) {
	mem := (*C.sensor_msgs__msg__PointField)(ros2_message_buffer)
	t.Name.AsGoStruct(unsafe.Pointer(&mem.name))
	t.Offset = uint32(mem.offset)
	t.Datatype = uint8(mem.datatype)
	t.Count = uint32(mem.count)
}
func (t *PointField) Clone() ros2types.ROS2Msg {
	clone := *t
	return &clone
}

type CPointField = C.sensor_msgs__msg__PointField
type CPointField__Sequence = C.sensor_msgs__msg__PointField__Sequence

func PointField__Sequence_to_Go(goSlice *[]PointField, cSlice CPointField__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]PointField, int64(cSlice.size))
	for i := 0; i < int(cSlice.size); i++ {
		cIdx := (*C.sensor_msgs__msg__PointField__Sequence)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_sensor_msgs__msg__PointField * uintptr(i)),
		))
		(*goSlice)[i] = PointField{}
		(*goSlice)[i].AsGoStruct(unsafe.Pointer(cIdx))
	}
}
func PointField__Sequence_to_C(cSlice *CPointField__Sequence, goSlice []PointField) {
	if len(goSlice) == 0 {
		return
	}
	cSlice.data = (*C.sensor_msgs__msg__PointField)(C.malloc((C.size_t)(C.sizeof_struct_sensor_msgs__msg__PointField * uintptr(len(goSlice)))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity

	for i, v := range goSlice {
		cIdx := (*C.sensor_msgs__msg__PointField)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_sensor_msgs__msg__PointField * uintptr(i)),
		))
		*cIdx = *(*C.sensor_msgs__msg__PointField)(v.AsCStruct())
	}
}
func PointField__Array_to_Go(goSlice []PointField, cSlice []CPointField) {
	for i := 0; i < len(cSlice); i++ {
		goSlice[i].AsGoStruct(unsafe.Pointer(&cSlice[i]))
	}
}
func PointField__Array_to_C(cSlice []CPointField, goSlice []PointField) {
	for i := 0; i < len(goSlice); i++ {
		cSlice[i] = *(*C.sensor_msgs__msg__PointField)(goSlice[i].AsCStruct())
	}
}


