/*
This file is part of rclgo

Copyright Â© 2021 Technology Innovation Institute, United Arab Emirates

Licensed under the Apache License, Version 2.0 (the "License");
	http://www.apache.org/licenses/LICENSE-2.0
*/

/*
THIS FILE IS AUTOGENERATED BY 'rclgo-gen generate'
*/

package sensor_msgs
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/ros2/ros2types"
	"github.com/tiiuae/rclgo/pkg/ros2/ros2_type_dispatcher"
	rosidl_runtime_c "github.com/tiiuae/rclgo/pkg/ros2/rosidl_runtime_c"
	
)
/*
#cgo LDFLAGS: -L/opt/ros/foxy/lib -Wl,-rpath=/opt/ros/foxy/lib -lrcl -lrosidl_runtime_c -lrosidl_typesupport_c -lrcutils -lrmw_implementation
#cgo LDFLAGS: -lsensor_msgs__rosidl_typesupport_c -lsensor_msgs__rosidl_generator_c

#cgo CFLAGS: -I/opt/ros/foxy/include

#include <rosidl_runtime_c/message_type_support_struct.h>
#include <sensor_msgs/msg/laser_echo.h>
*/
import "C"

func init() {
	ros2_type_dispatcher.RegisterROS2MsgTypeNameAlias("sensor_msgs/LaserEcho", &LaserEcho{})
}

// Do not create instances of this type directly. Always use NewLaserEcho
// function instead.
type LaserEcho struct {
	Echoes []float32 `yaml:"echoes"`// Multiple values of ranges or intensities.
}

// NewLaserEcho creates a new LaserEcho with default values.
func NewLaserEcho() *LaserEcho {
	self := LaserEcho{}
	self.SetDefaults(nil)
	return &self
}

func (t *LaserEcho) SetDefaults(d interface{}) ros2types.ROS2Msg {
	
	return t
}

func (t *LaserEcho) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__LaserEcho())
}
func (t *LaserEcho) PrepareMemory() unsafe.Pointer { //returns *C.sensor_msgs__msg__LaserEcho
	return (unsafe.Pointer)(C.sensor_msgs__msg__LaserEcho__create())
}
func (t *LaserEcho) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.sensor_msgs__msg__LaserEcho__destroy((*C.sensor_msgs__msg__LaserEcho)(pointer_to_free))
}
func (t *LaserEcho) AsCStruct() unsafe.Pointer {
	mem := (*C.sensor_msgs__msg__LaserEcho)(t.PrepareMemory())
	rosidl_runtime_c.Float32__Sequence_to_C((*rosidl_runtime_c.CFloat32__Sequence)(unsafe.Pointer(&mem.echoes)), t.Echoes)
	return unsafe.Pointer(mem)
}
func (t *LaserEcho) AsGoStruct(ros2_message_buffer unsafe.Pointer) {
	mem := (*C.sensor_msgs__msg__LaserEcho)(ros2_message_buffer)
	rosidl_runtime_c.Float32__Sequence_to_Go(&t.Echoes, *(*rosidl_runtime_c.CFloat32__Sequence)(unsafe.Pointer(&mem.echoes)))
}
func (t *LaserEcho) Clone() ros2types.ROS2Msg {
	clone := *t
	return &clone
}

type CLaserEcho = C.sensor_msgs__msg__LaserEcho
type CLaserEcho__Sequence = C.sensor_msgs__msg__LaserEcho__Sequence

func LaserEcho__Sequence_to_Go(goSlice *[]LaserEcho, cSlice CLaserEcho__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]LaserEcho, int64(cSlice.size))
	for i := 0; i < int(cSlice.size); i++ {
		cIdx := (*C.sensor_msgs__msg__LaserEcho__Sequence)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_sensor_msgs__msg__LaserEcho * uintptr(i)),
		))
		(*goSlice)[i] = LaserEcho{}
		(*goSlice)[i].AsGoStruct(unsafe.Pointer(cIdx))
	}
}
func LaserEcho__Sequence_to_C(cSlice *CLaserEcho__Sequence, goSlice []LaserEcho) {
	if len(goSlice) == 0 {
		return
	}
	cSlice.data = (*C.sensor_msgs__msg__LaserEcho)(C.malloc((C.size_t)(C.sizeof_struct_sensor_msgs__msg__LaserEcho * uintptr(len(goSlice)))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity

	for i, v := range goSlice {
		cIdx := (*C.sensor_msgs__msg__LaserEcho)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_sensor_msgs__msg__LaserEcho * uintptr(i)),
		))
		*cIdx = *(*C.sensor_msgs__msg__LaserEcho)(v.AsCStruct())
	}
}
func LaserEcho__Array_to_Go(goSlice []LaserEcho, cSlice []CLaserEcho) {
	for i := 0; i < len(cSlice); i++ {
		goSlice[i].AsGoStruct(unsafe.Pointer(&cSlice[i]))
	}
}
func LaserEcho__Array_to_C(cSlice []CLaserEcho, goSlice []LaserEcho) {
	for i := 0; i < len(goSlice); i++ {
		cSlice[i] = *(*C.sensor_msgs__msg__LaserEcho)(goSlice[i].AsCStruct())
	}
}


