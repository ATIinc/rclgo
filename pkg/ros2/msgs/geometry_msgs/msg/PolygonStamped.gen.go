/*
This file is part of rclgo

Copyright Â© 2021 Technology Innovation Institute, United Arab Emirates

Licensed under the Apache License, Version 2.0 (the "License");
	http://www.apache.org/licenses/LICENSE-2.0
*/

/*
THIS FILE IS AUTOGENERATED BY 'rclgo-gen generate'
*/

package geometry_msgs_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/ros2/ros2types"
	"github.com/tiiuae/rclgo/pkg/ros2/ros2_type_dispatcher"
	std_msgs_msg "github.com/tiiuae/rclgo/pkg/ros2/msgs/std_msgs/msg"
	
)
/*
#cgo LDFLAGS: -L/opt/ros/foxy/lib -Wl,-rpath=/opt/ros/foxy/lib -lrcl -lrosidl_runtime_c -lrosidl_typesupport_c -lrcutils -lrmw_implementation
#cgo LDFLAGS: -lgeometry_msgs__rosidl_typesupport_c -lgeometry_msgs__rosidl_generator_c
#cgo LDFLAGS: -lstd_msgs__rosidl_typesupport_c -lstd_msgs__rosidl_generator_c

#cgo CFLAGS: -I/opt/ros/foxy/include

#include <rosidl_runtime_c/message_type_support_struct.h>

#include <geometry_msgs/msg/polygon_stamped.h>

*/
import "C"

func init() {
	ros2_type_dispatcher.RegisterROS2MsgTypeNameAlias("geometry_msgs/PolygonStamped", &PolygonStamped{})
}

// Do not create instances of this type directly. Always use NewPolygonStamped
// function instead.
type PolygonStamped struct {
	Header std_msgs_msg.Header `yaml:"header"`
	Polygon Polygon `yaml:"polygon"`
}

// NewPolygonStamped creates a new PolygonStamped with default values.
func NewPolygonStamped() *PolygonStamped {
	self := PolygonStamped{}
	self.SetDefaults(nil)
	return &self
}

func (t *PolygonStamped) SetDefaults(d interface{}) ros2types.ROS2Msg {
	t.Header.SetDefaults(nil)
	t.Polygon.SetDefaults(nil)
	
	return t
}

func (t *PolygonStamped) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__PolygonStamped())
}
func (t *PolygonStamped) PrepareMemory() unsafe.Pointer { //returns *C.geometry_msgs__msg__PolygonStamped
	return (unsafe.Pointer)(C.geometry_msgs__msg__PolygonStamped__create())
}
func (t *PolygonStamped) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.geometry_msgs__msg__PolygonStamped__destroy((*C.geometry_msgs__msg__PolygonStamped)(pointer_to_free))
}
func (t *PolygonStamped) AsCStruct() unsafe.Pointer {
	mem := (*C.geometry_msgs__msg__PolygonStamped)(t.PrepareMemory())
	mem.header = *(*C.std_msgs__msg__Header)(t.Header.AsCStruct())
	mem.polygon = *(*C.geometry_msgs__msg__Polygon)(t.Polygon.AsCStruct())
	return unsafe.Pointer(mem)
}
func (t *PolygonStamped) AsGoStruct(ros2_message_buffer unsafe.Pointer) {
	mem := (*C.geometry_msgs__msg__PolygonStamped)(ros2_message_buffer)
	t.Header.AsGoStruct(unsafe.Pointer(&mem.header))
	t.Polygon.AsGoStruct(unsafe.Pointer(&mem.polygon))
}
func (t *PolygonStamped) Clone() ros2types.ROS2Msg {
	clone := *t
	return &clone
}

type CPolygonStamped = C.geometry_msgs__msg__PolygonStamped
type CPolygonStamped__Sequence = C.geometry_msgs__msg__PolygonStamped__Sequence

func PolygonStamped__Sequence_to_Go(goSlice *[]PolygonStamped, cSlice CPolygonStamped__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]PolygonStamped, int64(cSlice.size))
	for i := 0; i < int(cSlice.size); i++ {
		cIdx := (*C.geometry_msgs__msg__PolygonStamped__Sequence)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_geometry_msgs__msg__PolygonStamped * uintptr(i)),
		))
		(*goSlice)[i] = PolygonStamped{}
		(*goSlice)[i].AsGoStruct(unsafe.Pointer(cIdx))
	}
}
func PolygonStamped__Sequence_to_C(cSlice *CPolygonStamped__Sequence, goSlice []PolygonStamped) {
	if len(goSlice) == 0 {
		return
	}
	cSlice.data = (*C.geometry_msgs__msg__PolygonStamped)(C.malloc((C.size_t)(C.sizeof_struct_geometry_msgs__msg__PolygonStamped * uintptr(len(goSlice)))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity

	for i, v := range goSlice {
		cIdx := (*C.geometry_msgs__msg__PolygonStamped)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_geometry_msgs__msg__PolygonStamped * uintptr(i)),
		))
		*cIdx = *(*C.geometry_msgs__msg__PolygonStamped)(v.AsCStruct())
	}
}
func PolygonStamped__Array_to_Go(goSlice []PolygonStamped, cSlice []CPolygonStamped) {
	for i := 0; i < len(cSlice); i++ {
		goSlice[i].AsGoStruct(unsafe.Pointer(&cSlice[i]))
	}
}
func PolygonStamped__Array_to_C(cSlice []CPolygonStamped, goSlice []PolygonStamped) {
	for i := 0; i < len(goSlice); i++ {
		cSlice[i] = *(*C.geometry_msgs__msg__PolygonStamped)(goSlice[i].AsCStruct())
	}
}


