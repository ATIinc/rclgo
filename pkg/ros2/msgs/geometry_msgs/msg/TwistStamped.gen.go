/*
This file is part of rclgo

Copyright Â© 2021 Technology Innovation Institute, United Arab Emirates

Licensed under the Apache License, Version 2.0 (the "License");
	http://www.apache.org/licenses/LICENSE-2.0
*/

/*
THIS FILE IS AUTOGENERATED BY 'rclgo-gen generate'
*/

package geometry_msgs_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/ros2/ros2types"
	"github.com/tiiuae/rclgo/pkg/ros2/ros2_type_dispatcher"
	std_msgs_msg "github.com/tiiuae/rclgo/pkg/ros2/msgs/std_msgs/msg"
	
)
/*
#cgo LDFLAGS: -L/opt/ros/foxy/lib -Wl,-rpath=/opt/ros/foxy/lib -lrcl -lrosidl_runtime_c -lrosidl_typesupport_c -lrcutils -lrmw_implementation
#cgo LDFLAGS: -lgeometry_msgs__rosidl_typesupport_c -lgeometry_msgs__rosidl_generator_c
#cgo LDFLAGS: -lstd_msgs__rosidl_typesupport_c -lstd_msgs__rosidl_generator_c

#cgo CFLAGS: -I/opt/ros/foxy/include

#include <rosidl_runtime_c/message_type_support_struct.h>

#include <geometry_msgs/msg/twist_stamped.h>

*/
import "C"

func init() {
	ros2_type_dispatcher.RegisterROS2MsgTypeNameAlias("geometry_msgs/TwistStamped", &TwistStamped{})
}

// Do not create instances of this type directly. Always use NewTwistStamped
// function instead.
type TwistStamped struct {
	Header std_msgs_msg.Header `yaml:"header"`
	Twist Twist `yaml:"twist"`
}

// NewTwistStamped creates a new TwistStamped with default values.
func NewTwistStamped() *TwistStamped {
	self := TwistStamped{}
	self.SetDefaults(nil)
	return &self
}

func (t *TwistStamped) SetDefaults(d interface{}) ros2types.ROS2Msg {
	t.Header.SetDefaults(nil)
	t.Twist.SetDefaults(nil)
	
	return t
}

func (t *TwistStamped) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__TwistStamped())
}
func (t *TwistStamped) PrepareMemory() unsafe.Pointer { //returns *C.geometry_msgs__msg__TwistStamped
	return (unsafe.Pointer)(C.geometry_msgs__msg__TwistStamped__create())
}
func (t *TwistStamped) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.geometry_msgs__msg__TwistStamped__destroy((*C.geometry_msgs__msg__TwistStamped)(pointer_to_free))
}
func (t *TwistStamped) AsCStruct() unsafe.Pointer {
	mem := (*C.geometry_msgs__msg__TwistStamped)(t.PrepareMemory())
	mem.header = *(*C.std_msgs__msg__Header)(t.Header.AsCStruct())
	mem.twist = *(*C.geometry_msgs__msg__Twist)(t.Twist.AsCStruct())
	return unsafe.Pointer(mem)
}
func (t *TwistStamped) AsGoStruct(ros2_message_buffer unsafe.Pointer) {
	mem := (*C.geometry_msgs__msg__TwistStamped)(ros2_message_buffer)
	t.Header.AsGoStruct(unsafe.Pointer(&mem.header))
	t.Twist.AsGoStruct(unsafe.Pointer(&mem.twist))
}
func (t *TwistStamped) Clone() ros2types.ROS2Msg {
	clone := *t
	return &clone
}

type CTwistStamped = C.geometry_msgs__msg__TwistStamped
type CTwistStamped__Sequence = C.geometry_msgs__msg__TwistStamped__Sequence

func TwistStamped__Sequence_to_Go(goSlice *[]TwistStamped, cSlice CTwistStamped__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]TwistStamped, int64(cSlice.size))
	for i := 0; i < int(cSlice.size); i++ {
		cIdx := (*C.geometry_msgs__msg__TwistStamped__Sequence)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_geometry_msgs__msg__TwistStamped * uintptr(i)),
		))
		(*goSlice)[i] = TwistStamped{}
		(*goSlice)[i].AsGoStruct(unsafe.Pointer(cIdx))
	}
}
func TwistStamped__Sequence_to_C(cSlice *CTwistStamped__Sequence, goSlice []TwistStamped) {
	if len(goSlice) == 0 {
		return
	}
	cSlice.data = (*C.geometry_msgs__msg__TwistStamped)(C.malloc((C.size_t)(C.sizeof_struct_geometry_msgs__msg__TwistStamped * uintptr(len(goSlice)))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity

	for i, v := range goSlice {
		cIdx := (*C.geometry_msgs__msg__TwistStamped)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_geometry_msgs__msg__TwistStamped * uintptr(i)),
		))
		*cIdx = *(*C.geometry_msgs__msg__TwistStamped)(v.AsCStruct())
	}
}
func TwistStamped__Array_to_Go(goSlice []TwistStamped, cSlice []CTwistStamped) {
	for i := 0; i < len(cSlice); i++ {
		goSlice[i].AsGoStruct(unsafe.Pointer(&cSlice[i]))
	}
}
func TwistStamped__Array_to_C(cSlice []CTwistStamped, goSlice []TwistStamped) {
	for i := 0; i < len(goSlice); i++ {
		cSlice[i] = *(*C.geometry_msgs__msg__TwistStamped)(goSlice[i].AsCStruct())
	}
}


