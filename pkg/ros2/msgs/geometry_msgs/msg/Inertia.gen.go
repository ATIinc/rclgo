/*
This file is part of rclgo

Copyright Â© 2021 Technology Innovation Institute, United Arab Emirates

Licensed under the Apache License, Version 2.0 (the "License");
	http://www.apache.org/licenses/LICENSE-2.0
*/

/*
THIS FILE IS AUTOGENERATED BY 'rclgo-gen generate'
*/

package geometry_msgs
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/ros2/ros2types"
	"github.com/tiiuae/rclgo/pkg/ros2/ros2_type_dispatcher"
	
)
/*
#cgo LDFLAGS: -L/opt/ros/foxy/lib -Wl,-rpath=/opt/ros/foxy/lib -lrcl -lrosidl_runtime_c -lrosidl_typesupport_c -lrcutils -lrmw_implementation
#cgo LDFLAGS: -lgeometry_msgs__rosidl_typesupport_c -lgeometry_msgs__rosidl_generator_c

#cgo CFLAGS: -I/opt/ros/foxy/include

#include <rosidl_runtime_c/message_type_support_struct.h>
#include <geometry_msgs/msg/inertia.h>
*/
import "C"

func init() {
	ros2_type_dispatcher.RegisterROS2MsgTypeNameAlias("geometry_msgs/Inertia", &Inertia{})
}

// Do not create instances of this type directly. Always use NewInertia
// function instead.
type Inertia struct {
	M float64 `yaml:"m"`// Mass [kg]
	Com Vector3 `yaml:"com"`// Center of mass [m]
	Ixx float64 `yaml:"ixx"`// Inertia Tensor [kg-m^2]| ixx ixy ixz |I = | ixy iyy iyz || ixz iyz izz |
	Ixy float64 `yaml:"ixy"`// Inertia Tensor [kg-m^2]| ixx ixy ixz |I = | ixy iyy iyz || ixz iyz izz |
	Ixz float64 `yaml:"ixz"`// Inertia Tensor [kg-m^2]| ixx ixy ixz |I = | ixy iyy iyz || ixz iyz izz |
	Iyy float64 `yaml:"iyy"`// Inertia Tensor [kg-m^2]| ixx ixy ixz |I = | ixy iyy iyz || ixz iyz izz |
	Iyz float64 `yaml:"iyz"`// Inertia Tensor [kg-m^2]| ixx ixy ixz |I = | ixy iyy iyz || ixz iyz izz |
	Izz float64 `yaml:"izz"`// Inertia Tensor [kg-m^2]| ixx ixy ixz |I = | ixy iyy iyz || ixz iyz izz |
}

// NewInertia creates a new Inertia with default values.
func NewInertia() *Inertia {
	self := Inertia{}
	self.SetDefaults(nil)
	return &self
}

func (t *Inertia) SetDefaults(d interface{}) ros2types.ROS2Msg {
	t.Com.SetDefaults(nil)
	
	return t
}

func (t *Inertia) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Inertia())
}
func (t *Inertia) PrepareMemory() unsafe.Pointer { //returns *C.geometry_msgs__msg__Inertia
	return (unsafe.Pointer)(C.geometry_msgs__msg__Inertia__create())
}
func (t *Inertia) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.geometry_msgs__msg__Inertia__destroy((*C.geometry_msgs__msg__Inertia)(pointer_to_free))
}
func (t *Inertia) AsCStruct() unsafe.Pointer {
	mem := (*C.geometry_msgs__msg__Inertia)(t.PrepareMemory())
	mem.m = C.double(t.M)
	mem.com = *(*C.geometry_msgs__msg__Vector3)(t.Com.AsCStruct())
	mem.ixx = C.double(t.Ixx)
	mem.ixy = C.double(t.Ixy)
	mem.ixz = C.double(t.Ixz)
	mem.iyy = C.double(t.Iyy)
	mem.iyz = C.double(t.Iyz)
	mem.izz = C.double(t.Izz)
	return unsafe.Pointer(mem)
}
func (t *Inertia) AsGoStruct(ros2_message_buffer unsafe.Pointer) {
	mem := (*C.geometry_msgs__msg__Inertia)(ros2_message_buffer)
	t.M = float64(mem.m)
	t.Com.AsGoStruct(unsafe.Pointer(&mem.com))
	t.Ixx = float64(mem.ixx)
	t.Ixy = float64(mem.ixy)
	t.Ixz = float64(mem.ixz)
	t.Iyy = float64(mem.iyy)
	t.Iyz = float64(mem.iyz)
	t.Izz = float64(mem.izz)
}
func (t *Inertia) Clone() ros2types.ROS2Msg {
	clone := *t
	return &clone
}

type CInertia = C.geometry_msgs__msg__Inertia
type CInertia__Sequence = C.geometry_msgs__msg__Inertia__Sequence

func Inertia__Sequence_to_Go(goSlice *[]Inertia, cSlice CInertia__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]Inertia, int64(cSlice.size))
	for i := 0; i < int(cSlice.size); i++ {
		cIdx := (*C.geometry_msgs__msg__Inertia__Sequence)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_geometry_msgs__msg__Inertia * uintptr(i)),
		))
		(*goSlice)[i] = Inertia{}
		(*goSlice)[i].AsGoStruct(unsafe.Pointer(cIdx))
	}
}
func Inertia__Sequence_to_C(cSlice *CInertia__Sequence, goSlice []Inertia) {
	if len(goSlice) == 0 {
		return
	}
	cSlice.data = (*C.geometry_msgs__msg__Inertia)(C.malloc((C.size_t)(C.sizeof_struct_geometry_msgs__msg__Inertia * uintptr(len(goSlice)))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity

	for i, v := range goSlice {
		cIdx := (*C.geometry_msgs__msg__Inertia)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_geometry_msgs__msg__Inertia * uintptr(i)),
		))
		*cIdx = *(*C.geometry_msgs__msg__Inertia)(v.AsCStruct())
	}
}
func Inertia__Array_to_Go(goSlice []Inertia, cSlice []CInertia) {
	for i := 0; i < len(cSlice); i++ {
		goSlice[i].AsGoStruct(unsafe.Pointer(&cSlice[i]))
	}
}
func Inertia__Array_to_C(cSlice []CInertia, goSlice []Inertia) {
	for i := 0; i < len(goSlice); i++ {
		cSlice[i] = *(*C.geometry_msgs__msg__Inertia)(goSlice[i].AsCStruct())
	}
}


