/*
This file is part of rclgo

Copyright Â© 2021 Technology Innovation Institute, United Arab Emirates

Licensed under the Apache License, Version 2.0 (the "License");
	http://www.apache.org/licenses/LICENSE-2.0
*/

/*
THIS FILE IS AUTOGENERATED BY 'rclgo-gen generate'
*/

package diagnostic_msgs_srv
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/ros2/ros2types"
	"github.com/tiiuae/rclgo/pkg/ros2/ros2_type_dispatcher"
	rosidl_runtime_c "github.com/tiiuae/rclgo/pkg/ros2/rosidl_runtime_c"
	
)
/*
#cgo LDFLAGS: -L/opt/ros/foxy/lib -Wl,-rpath=/opt/ros/foxy/lib -lrcl -lrosidl_runtime_c -lrosidl_typesupport_c -lrcutils -lrmw_implementation
#cgo LDFLAGS: -ldiagnostic_msgs__rosidl_typesupport_c -ldiagnostic_msgs__rosidl_generator_c

#cgo CFLAGS: -I/opt/ros/foxy/include

#include <rosidl_runtime_c/message_type_support_struct.h>

#include <diagnostic_msgs/srv/add_diagnostics.h>

*/
import "C"

func init() {
	ros2_type_dispatcher.RegisterROS2MsgTypeNameAlias("diagnostic_msgs/AddDiagnostics_Response", &AddDiagnostics_Response{})
}

// Do not create instances of this type directly. Always use NewAddDiagnostics_Response
// function instead.
type AddDiagnostics_Response struct {
	Success bool `yaml:"success"`// True if diagnostic aggregator was updated with new diagnostics, Falseotherwise. A false return value means that either there is a bond in theaggregator which already used the requested namespace, or the initializationof analyzers failed.
	Message rosidl_runtime_c.String `yaml:"message"`// Message with additional information about the success or failure
}

// NewAddDiagnostics_Response creates a new AddDiagnostics_Response with default values.
func NewAddDiagnostics_Response() *AddDiagnostics_Response {
	self := AddDiagnostics_Response{}
	self.SetDefaults(nil)
	return &self
}

func (t *AddDiagnostics_Response) SetDefaults(d interface{}) ros2types.ROS2Msg {
	t.Message.SetDefaults("")
	
	return t
}

func (t *AddDiagnostics_Response) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__diagnostic_msgs__srv__AddDiagnostics_Response())
}
func (t *AddDiagnostics_Response) PrepareMemory() unsafe.Pointer { //returns *C.diagnostic_msgs__srv__AddDiagnostics_Response
	return (unsafe.Pointer)(C.diagnostic_msgs__srv__AddDiagnostics_Response__create())
}
func (t *AddDiagnostics_Response) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.diagnostic_msgs__srv__AddDiagnostics_Response__destroy((*C.diagnostic_msgs__srv__AddDiagnostics_Response)(pointer_to_free))
}
func (t *AddDiagnostics_Response) AsCStruct() unsafe.Pointer {
	mem := (*C.diagnostic_msgs__srv__AddDiagnostics_Response)(t.PrepareMemory())
	mem.success = C.bool(t.Success)
	mem.message = *(*C.rosidl_runtime_c__String)(t.Message.AsCStruct())
	return unsafe.Pointer(mem)
}
func (t *AddDiagnostics_Response) AsGoStruct(ros2_message_buffer unsafe.Pointer) {
	mem := (*C.diagnostic_msgs__srv__AddDiagnostics_Response)(ros2_message_buffer)
	t.Success = bool(mem.success)
	t.Message.AsGoStruct(unsafe.Pointer(&mem.message))
}
func (t *AddDiagnostics_Response) Clone() ros2types.ROS2Msg {
	clone := *t
	return &clone
}

type CAddDiagnostics_Response = C.diagnostic_msgs__srv__AddDiagnostics_Response
type CAddDiagnostics_Response__Sequence = C.diagnostic_msgs__srv__AddDiagnostics_Response__Sequence

func AddDiagnostics_Response__Sequence_to_Go(goSlice *[]AddDiagnostics_Response, cSlice CAddDiagnostics_Response__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]AddDiagnostics_Response, int64(cSlice.size))
	for i := 0; i < int(cSlice.size); i++ {
		cIdx := (*C.diagnostic_msgs__srv__AddDiagnostics_Response__Sequence)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_diagnostic_msgs__srv__AddDiagnostics_Response * uintptr(i)),
		))
		(*goSlice)[i] = AddDiagnostics_Response{}
		(*goSlice)[i].AsGoStruct(unsafe.Pointer(cIdx))
	}
}
func AddDiagnostics_Response__Sequence_to_C(cSlice *CAddDiagnostics_Response__Sequence, goSlice []AddDiagnostics_Response) {
	if len(goSlice) == 0 {
		return
	}
	cSlice.data = (*C.diagnostic_msgs__srv__AddDiagnostics_Response)(C.malloc((C.size_t)(C.sizeof_struct_diagnostic_msgs__srv__AddDiagnostics_Response * uintptr(len(goSlice)))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity

	for i, v := range goSlice {
		cIdx := (*C.diagnostic_msgs__srv__AddDiagnostics_Response)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_diagnostic_msgs__srv__AddDiagnostics_Response * uintptr(i)),
		))
		*cIdx = *(*C.diagnostic_msgs__srv__AddDiagnostics_Response)(v.AsCStruct())
	}
}
func AddDiagnostics_Response__Array_to_Go(goSlice []AddDiagnostics_Response, cSlice []CAddDiagnostics_Response) {
	for i := 0; i < len(cSlice); i++ {
		goSlice[i].AsGoStruct(unsafe.Pointer(&cSlice[i]))
	}
}
func AddDiagnostics_Response__Array_to_C(cSlice []CAddDiagnostics_Response, goSlice []AddDiagnostics_Response) {
	for i := 0; i < len(goSlice); i++ {
		cSlice[i] = *(*C.diagnostic_msgs__srv__AddDiagnostics_Response)(goSlice[i].AsCStruct())
	}
}


