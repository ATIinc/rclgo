/*
This file is part of rclgo

Copyright Â© 2021 Technology Innovation Institute, United Arab Emirates

Licensed under the Apache License, Version 2.0 (the "License");
	http://www.apache.org/licenses/LICENSE-2.0
*/

/*
THIS FILE IS AUTOGENERATED BY 'rclgo-gen generate'
*/

package test_msgs_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/ros2/ros2types"
	"github.com/tiiuae/rclgo/pkg/ros2/ros2_type_dispatcher"
	builtin_interfaces_msg "github.com/tiiuae/rclgo/pkg/ros2/msgs/builtin_interfaces/msg"
	
)
/*
#cgo LDFLAGS: -L/opt/ros/foxy/lib -Wl,-rpath=/opt/ros/foxy/lib -lrcl -lrosidl_runtime_c -lrosidl_typesupport_c -lrcutils -lrmw_implementation
#cgo LDFLAGS: -ltest_msgs__rosidl_typesupport_c -ltest_msgs__rosidl_generator_c
#cgo LDFLAGS: -lbuiltin_interfaces__rosidl_typesupport_c -lbuiltin_interfaces__rosidl_generator_c

#cgo CFLAGS: -I/opt/ros/foxy/include

#include <rosidl_runtime_c/message_type_support_struct.h>

#include <test_msgs/msg/builtins.h>

*/
import "C"

func init() {
	ros2_type_dispatcher.RegisterROS2MsgTypeNameAlias("test_msgs/Builtins", &Builtins{})
}

// Do not create instances of this type directly. Always use NewBuiltins
// function instead.
type Builtins struct {
	DurationValue builtin_interfaces_msg.Duration `yaml:"duration_value"`
	TimeValue builtin_interfaces_msg.Time `yaml:"time_value"`
}

// NewBuiltins creates a new Builtins with default values.
func NewBuiltins() *Builtins {
	self := Builtins{}
	self.SetDefaults(nil)
	return &self
}

func (t *Builtins) SetDefaults(d interface{}) ros2types.ROS2Msg {
	t.DurationValue.SetDefaults(nil)
	t.TimeValue.SetDefaults(nil)
	
	return t
}

func (t *Builtins) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__test_msgs__msg__Builtins())
}
func (t *Builtins) PrepareMemory() unsafe.Pointer { //returns *C.test_msgs__msg__Builtins
	return (unsafe.Pointer)(C.test_msgs__msg__Builtins__create())
}
func (t *Builtins) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.test_msgs__msg__Builtins__destroy((*C.test_msgs__msg__Builtins)(pointer_to_free))
}
func (t *Builtins) AsCStruct() unsafe.Pointer {
	mem := (*C.test_msgs__msg__Builtins)(t.PrepareMemory())
	mem.duration_value = *(*C.builtin_interfaces__msg__Duration)(t.DurationValue.AsCStruct())
	mem.time_value = *(*C.builtin_interfaces__msg__Time)(t.TimeValue.AsCStruct())
	return unsafe.Pointer(mem)
}
func (t *Builtins) AsGoStruct(ros2_message_buffer unsafe.Pointer) {
	mem := (*C.test_msgs__msg__Builtins)(ros2_message_buffer)
	t.DurationValue.AsGoStruct(unsafe.Pointer(&mem.duration_value))
	t.TimeValue.AsGoStruct(unsafe.Pointer(&mem.time_value))
}
func (t *Builtins) Clone() ros2types.ROS2Msg {
	clone := *t
	return &clone
}

type CBuiltins = C.test_msgs__msg__Builtins
type CBuiltins__Sequence = C.test_msgs__msg__Builtins__Sequence

func Builtins__Sequence_to_Go(goSlice *[]Builtins, cSlice CBuiltins__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]Builtins, int64(cSlice.size))
	for i := 0; i < int(cSlice.size); i++ {
		cIdx := (*C.test_msgs__msg__Builtins__Sequence)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_test_msgs__msg__Builtins * uintptr(i)),
		))
		(*goSlice)[i] = Builtins{}
		(*goSlice)[i].AsGoStruct(unsafe.Pointer(cIdx))
	}
}
func Builtins__Sequence_to_C(cSlice *CBuiltins__Sequence, goSlice []Builtins) {
	if len(goSlice) == 0 {
		return
	}
	cSlice.data = (*C.test_msgs__msg__Builtins)(C.malloc((C.size_t)(C.sizeof_struct_test_msgs__msg__Builtins * uintptr(len(goSlice)))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity

	for i, v := range goSlice {
		cIdx := (*C.test_msgs__msg__Builtins)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_test_msgs__msg__Builtins * uintptr(i)),
		))
		*cIdx = *(*C.test_msgs__msg__Builtins)(v.AsCStruct())
	}
}
func Builtins__Array_to_Go(goSlice []Builtins, cSlice []CBuiltins) {
	for i := 0; i < len(cSlice); i++ {
		goSlice[i].AsGoStruct(unsafe.Pointer(&cSlice[i]))
	}
}
func Builtins__Array_to_C(cSlice []CBuiltins, goSlice []Builtins) {
	for i := 0; i < len(goSlice); i++ {
		cSlice[i] = *(*C.test_msgs__msg__Builtins)(goSlice[i].AsCStruct())
	}
}


