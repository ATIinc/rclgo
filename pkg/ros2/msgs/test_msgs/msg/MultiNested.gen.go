/*
This file is part of rclgo

Copyright Â© 2021 Technology Innovation Institute, United Arab Emirates

Licensed under the Apache License, Version 2.0 (the "License");
	http://www.apache.org/licenses/LICENSE-2.0
*/

/*
THIS FILE IS AUTOGENERATED BY 'rclgo-gen generate'
*/

package test_msgs
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/ros2/ros2types"
	"github.com/tiiuae/rclgo/pkg/ros2/ros2_type_dispatcher"
	
)
/*
#cgo LDFLAGS: -L/opt/ros/foxy/lib -Wl,-rpath=/opt/ros/foxy/lib -lrcl -lrosidl_runtime_c -lrosidl_typesupport_c -lrcutils -lrmw_implementation
#cgo LDFLAGS: -ltest_msgs__rosidl_typesupport_c -ltest_msgs__rosidl_generator_c

#cgo CFLAGS: -I/opt/ros/foxy/include

#include <rosidl_runtime_c/message_type_support_struct.h>
#include <test_msgs/msg/multi_nested.h>
*/
import "C"

func init() {
	ros2_type_dispatcher.RegisterROS2MsgTypeNameAlias("test_msgs/MultiNested", &MultiNested{})
}

// Do not create instances of this type directly. Always use NewMultiNested
// function instead.
type MultiNested struct {
	ArrayOfArrays [3]Arrays `yaml:"array_of_arrays"`// Mulitple levels of nested messages
	ArrayOfBoundedSequences [3]BoundedSequences `yaml:"array_of_bounded_sequences"`// Mulitple levels of nested messages
	ArrayOfUnboundedSequences [3]UnboundedSequences `yaml:"array_of_unbounded_sequences"`// Mulitple levels of nested messages
	BoundedSequenceOfArrays []Arrays `yaml:"bounded_sequence_of_arrays"`// Mulitple levels of nested messages
	BoundedSequenceOfBoundedSequences []BoundedSequences `yaml:"bounded_sequence_of_bounded_sequences"`// Mulitple levels of nested messages
	BoundedSequenceOfUnboundedSequences []UnboundedSequences `yaml:"bounded_sequence_of_unbounded_sequences"`// Mulitple levels of nested messages
	UnboundedSequenceOfArrays []Arrays `yaml:"unbounded_sequence_of_arrays"`// Mulitple levels of nested messages
	UnboundedSequenceOfBoundedSequences []BoundedSequences `yaml:"unbounded_sequence_of_bounded_sequences"`// Mulitple levels of nested messages
	UnboundedSequenceOfUnboundedSequences []UnboundedSequences `yaml:"unbounded_sequence_of_unbounded_sequences"`// Mulitple levels of nested messages
}

// NewMultiNested creates a new MultiNested with default values.
func NewMultiNested() *MultiNested {
	self := MultiNested{}
	self.SetDefaults(nil)
	return &self
}

func (t *MultiNested) SetDefaults(d interface{}) ros2types.ROS2Msg {
	t.ArrayOfArrays[0].SetDefaults(nil)
	t.ArrayOfArrays[1].SetDefaults(nil)
	t.ArrayOfArrays[2].SetDefaults(nil)
	t.ArrayOfBoundedSequences[0].SetDefaults(nil)
	t.ArrayOfBoundedSequences[1].SetDefaults(nil)
	t.ArrayOfBoundedSequences[2].SetDefaults(nil)
	t.ArrayOfUnboundedSequences[0].SetDefaults(nil)
	t.ArrayOfUnboundedSequences[1].SetDefaults(nil)
	t.ArrayOfUnboundedSequences[2].SetDefaults(nil)
	
	return t
}

func (t *MultiNested) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__test_msgs__msg__MultiNested())
}
func (t *MultiNested) PrepareMemory() unsafe.Pointer { //returns *C.test_msgs__msg__MultiNested
	return (unsafe.Pointer)(C.test_msgs__msg__MultiNested__create())
}
func (t *MultiNested) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.test_msgs__msg__MultiNested__destroy((*C.test_msgs__msg__MultiNested)(pointer_to_free))
}
func (t *MultiNested) AsCStruct() unsafe.Pointer {
	mem := (*C.test_msgs__msg__MultiNested)(t.PrepareMemory())
	Arrays__Array_to_C(mem.array_of_arrays[:], t.ArrayOfArrays[:])
	BoundedSequences__Array_to_C(mem.array_of_bounded_sequences[:], t.ArrayOfBoundedSequences[:])
	UnboundedSequences__Array_to_C(mem.array_of_unbounded_sequences[:], t.ArrayOfUnboundedSequences[:])
	Arrays__Sequence_to_C(&mem.bounded_sequence_of_arrays, t.BoundedSequenceOfArrays)
	BoundedSequences__Sequence_to_C(&mem.bounded_sequence_of_bounded_sequences, t.BoundedSequenceOfBoundedSequences)
	UnboundedSequences__Sequence_to_C(&mem.bounded_sequence_of_unbounded_sequences, t.BoundedSequenceOfUnboundedSequences)
	Arrays__Sequence_to_C(&mem.unbounded_sequence_of_arrays, t.UnboundedSequenceOfArrays)
	BoundedSequences__Sequence_to_C(&mem.unbounded_sequence_of_bounded_sequences, t.UnboundedSequenceOfBoundedSequences)
	UnboundedSequences__Sequence_to_C(&mem.unbounded_sequence_of_unbounded_sequences, t.UnboundedSequenceOfUnboundedSequences)
	return unsafe.Pointer(mem)
}
func (t *MultiNested) AsGoStruct(ros2_message_buffer unsafe.Pointer) {
	mem := (*C.test_msgs__msg__MultiNested)(ros2_message_buffer)
	Arrays__Array_to_Go(t.ArrayOfArrays[:], mem.array_of_arrays[:])
	BoundedSequences__Array_to_Go(t.ArrayOfBoundedSequences[:], mem.array_of_bounded_sequences[:])
	UnboundedSequences__Array_to_Go(t.ArrayOfUnboundedSequences[:], mem.array_of_unbounded_sequences[:])
	Arrays__Sequence_to_Go(&t.BoundedSequenceOfArrays, mem.bounded_sequence_of_arrays)
	BoundedSequences__Sequence_to_Go(&t.BoundedSequenceOfBoundedSequences, mem.bounded_sequence_of_bounded_sequences)
	UnboundedSequences__Sequence_to_Go(&t.BoundedSequenceOfUnboundedSequences, mem.bounded_sequence_of_unbounded_sequences)
	Arrays__Sequence_to_Go(&t.UnboundedSequenceOfArrays, mem.unbounded_sequence_of_arrays)
	BoundedSequences__Sequence_to_Go(&t.UnboundedSequenceOfBoundedSequences, mem.unbounded_sequence_of_bounded_sequences)
	UnboundedSequences__Sequence_to_Go(&t.UnboundedSequenceOfUnboundedSequences, mem.unbounded_sequence_of_unbounded_sequences)
}
func (t *MultiNested) Clone() ros2types.ROS2Msg {
	clone := *t
	return &clone
}

type CMultiNested = C.test_msgs__msg__MultiNested
type CMultiNested__Sequence = C.test_msgs__msg__MultiNested__Sequence

func MultiNested__Sequence_to_Go(goSlice *[]MultiNested, cSlice CMultiNested__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]MultiNested, int64(cSlice.size))
	for i := 0; i < int(cSlice.size); i++ {
		cIdx := (*C.test_msgs__msg__MultiNested__Sequence)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_test_msgs__msg__MultiNested * uintptr(i)),
		))
		(*goSlice)[i] = MultiNested{}
		(*goSlice)[i].AsGoStruct(unsafe.Pointer(cIdx))
	}
}
func MultiNested__Sequence_to_C(cSlice *CMultiNested__Sequence, goSlice []MultiNested) {
	if len(goSlice) == 0 {
		return
	}
	cSlice.data = (*C.test_msgs__msg__MultiNested)(C.malloc((C.size_t)(C.sizeof_struct_test_msgs__msg__MultiNested * uintptr(len(goSlice)))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity

	for i, v := range goSlice {
		cIdx := (*C.test_msgs__msg__MultiNested)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_test_msgs__msg__MultiNested * uintptr(i)),
		))
		*cIdx = *(*C.test_msgs__msg__MultiNested)(v.AsCStruct())
	}
}
func MultiNested__Array_to_Go(goSlice []MultiNested, cSlice []CMultiNested) {
	for i := 0; i < len(cSlice); i++ {
		goSlice[i].AsGoStruct(unsafe.Pointer(&cSlice[i]))
	}
}
func MultiNested__Array_to_C(cSlice []CMultiNested, goSlice []MultiNested) {
	for i := 0; i < len(goSlice); i++ {
		cSlice[i] = *(*C.test_msgs__msg__MultiNested)(goSlice[i].AsCStruct())
	}
}


