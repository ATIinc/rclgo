// THIS FILE IS AUTOGENERATED BY go generate //TODO
/*
There is no practical and good way to dynamically load the required message definitions on demand,
se we have to statically include all of them, if we want to be able to do dynamic runtime casting to
unexpected ros2 message types.

The problem is that Golang doesnt allow dynamic imports. There is a plugin-system but that would still require
shared struct definitions between the core rclgo and the ros2-message-plugin-implementation,
which kinda make it not useful in this type of situation.

*/
package ros2_type_dispatcher

import (
	// Statically load ROS2 message definitions
	"github.com/tiiuae/rclgo/pkg/ros2/std_msgs"
)

/*
	Seed the type string to implementation dispatcher so the correct type can be dynamically chosen.
	Needs to be defined for all supported ROS2 message types.
*/
func init() {
	RegisterROS2MsgTypeNameAlias("std_msgs/ColorRGBA", &std_msgs.ColorRGBA{})
	RegisterROS2MsgTypeNameAlias("std_msgs/String", &std_msgs.String{})
}
